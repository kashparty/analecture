ID: e64f4cc9-275f-4d80-a671-adbb0160087b
Title: DoCSoc - Introduction to Programming Utilities (3 of 3) - Q&A - Linux
Category: COMP 1st Year General
Lecturer: Konstantinos Gkoutzis
Date: 08/10/2021
I wish I could try and use the word move and see an.
0:02
So we can see what happens, but, yeah, basically I'm just going to start by showing how to get things between two machines.
0:10
So on the left we have the machine. I'm currently running on the iPhone and the other one I've got Minotaur, which is also sat right next to me.
0:17
But that's the one we were installing yesterday.
0:29
So you were around the beginning, I made a file called Love Letter Dot Text.
0:33
Now, the aim of the game is we want to give it all the love letter.
0:42
Panopto doesn't have anything exciting at the moment, so I want to demonstrate SICP.
0:47
So this is the the command and it's got a whole bunch of stuff that we don't really care about.
0:55
Most of this is going to be unnecessary, but the key is it is a city with source and target.
1:01
Now, the source of the target can be one of these machines, so it doesn't matter, we can push stuff and we can pull stuff, so.
1:13
Let's get it over. So our source is is here.
1:24
A lot of text and we're sending it to my little. Now I have my little just to quickly demonstrate.
1:32
I have my little well as a housemate, so I don't need to buy expensive buy the stuff for it,
1:41
but I will demonstrate to change the Maastricht weekend into your settings.
1:50
The Windows terminal quickly put it up so it will be there and then you can just set it up, a dollar slash, showboater, slash, blah, blah, blah.
1:59
Let's put that down in the chart. So.
2:12
So, yeah, I could stay at my little document called blah blah.
2:20
I can't just say my all because I have it as a hostname.
2:26
So Minotaur Kolon so specify I want to send it to my little unless side is going to be the address is going to default to the directory told and.
2:32
But. I'm going to I'm just not going to specify,
2:47
so it should go to the director and I get to pick what the name is on the Senate side so I could change his name.
2:54
But it's also a chance to change some things, you can just do it like this.
3:10
So if this happens, says it over 100 percent and if I look here, I'll look lecturer's a.
3:16
It's. Not edited, not letter, and how can I ask again?
3:29
Well, I can fetch it from my tool and pocket back in my love letter to text if I see what's inside.
3:44
That is the message from my little. Well, I have to not write Jamie.
4:02
Well, A, because many people don't make the same name, so I don't need to do it because of that.
4:08
The other reason is that the my that my little configuration has specified the name Jamie anyway.
4:14
So I don't need to I don't need to bother doing that so far.
4:23
So that's, that's what I'll tried is FCP. So this means that I can you copy it.
4:30
Actually it is a is a copy so it doesn't like you don't use it.
4:36
If I, if I hear the love letter was still there on all sides, it was not a move, it is a copy of how are the two machines connected.
4:44
XP goes in NH. So Leviathan has an HP registered a Minotaur so there's no password required.
4:53
But if there wasn't an SS HQ in place, then it would ask me for my password when I tried to send the between and is a copy S.A.C.
5:03
I think it stands for Secure Copy and and S stands for Secure Shell S.H. being the Shell command on Linux.
5:14
So I don't think, I think it is just secure. Plus the normal code name.
5:27
And. So I provided the key to my ideas for using this idea is I think it I don't know, can you do this with the machines?
5:34
Yes. Yes, you can. You can do something like, you know, if I wanted to send it to the machines, I could do, you know,
5:45
at someone not I stayed in the UK and it would come it would go to the machines is the way to listen.
5:54
If you do it again, it overrides it so you can change the foreign name if you wants to do it multiple times.
6:06
I don't know if there's a way to ask for permission first. That might be an option for this.
6:13
And so the other thing you can do is accept people.
6:21
So, Steve, if this works, let me go.
6:26
So FCP is a bit different. You can see it connects you to monitor.
6:30
And then if I use the regular, like, file commands, I can sort of see that.
6:37
And so I can navigate around and I can see the love letter here. And I think that's FCP.
6:42
You can do some special commands used to fetch stuff. I'm not sure exactly what they said fetched.
6:47
I'm sure we can help. Get they got.
6:58
Get so you can so you can get so I could get another letter and that's putting to a wall of text,
7:05
so that's what I've got and I'm still on my hands so I can still play around and do other things you could also use.
7:15
So that's an alternative way of of doing stuff if I accept less than one lap around as well.
7:21
And. I mean, you could send a Trojan virus, of course, but you still need to have the certificate, so it's still a machine that you have access to.
7:32
You could just go to the other machine and copy and paste it. So, you know, it's not it's not any less safe and.
7:44
Can you set up a synchronisation? Yeah, you can mount is a network drive.
7:52
I'm not going to I'm not going to try to do that offline.
7:58
But yeah, you can do network drives and stuff to try and sync to other places. And.
8:03
Charles and is the gateway, but you can transfer files to them, that's fine.
8:10
What you don't do on Schell's is is do heavy lifting, right.
8:14
Entertainment directory. So just don't use them to do like work on.
8:20
But yeah. How did I get the text file back?
8:25
I just reversed if you just look at what changed. It just depends on which ones.
8:31
So this is the source. So I'm saying from mine, it's go fetch this thing from the home directory and put it in my home directory.
8:36
Love letters of text and the opposite. My purpose in sending instead that phone.
8:44
Cool. So that's a step that's all I wanted to make out there.
8:55
So that's a useful way of getting your stuff across. Yeah, that's that's all I really wanted to cover.
8:59
I should have just done that yesterday.
9:05
And yeah, like I said, if you don't have it necessary to keep between the machines, you're going to be to password safety.
9:07
I think that would also work on like I don't know that it wouldn't.
9:14
Yeah. So if it's a command centre, don't you get together? So yeah, we'll see.
9:19
Talk again later. And for now, I'm going to go back to my docs, Lochinvar.
9:27
We're going to start talking about it. So is there going to be files?
9:33
I don't know if it existed in the ASMOF. But apparently that's not a command that exists, so I suppose not.
9:40
Started to beat the thing up to accept it. OK, so what is it going to make a folder, get tossed inside and see what it's all about?
9:50
At the moment, there's nothing in here, right? These are just the backwards pointers that other locations.
10:05
So we'll get get is a version control system. So usually we can make some files right.
10:13
And we can make some files. We can edit them.
10:21
And what happens is once you get into that saved it, it's gone.
10:25
Right. You can't just go backwards to a previous version unless you've got some sort of backing up system.
10:30
It basically allows you to track those changes as they happen. And now you could just use get locally, you can just make a get repost.
10:36
I'm just going to show that now.
10:43
But it's more useful when it's connected to a remote server so that if your computer drives to work is stored safely somewhere else.
10:45
But the very basic level and all the commands that we'll be using today are going to be prefaced with get so get in.
10:54
It is the way to just make a repository. There you go, and we can see that it's made this photo docket,
11:02
so this is basically where Kit will store all of the information about, you know, previous versions of what changes have made.
11:10
And so you don't need to go in there. You don't need to look at what's in there.
11:17
Certainly don't add anything that's in there. But that's where everything live.
11:21
So that's like the administration fold up. So now that we have a.
11:27
I'm just going to run another command worth noting his commands.
11:31
So get status. He's going to tell us what's up. So at the moment, we're on a branch called Master.
11:36
Now, I don't think I'll call a couple of branches today. They're more useful when you're working with other people.
11:42
But Master is like the default branch. And if you clone from GitHub, they or you make a report, get out of the main mosts,
11:48
get distributions to master, but you can't change it if you want to.
11:58
I've forgotten how to do it in the it it is possible.
12:03
So this is sort of the place for everything. And it says that we are not committed anything yet and there is nothing to commit.
12:08
It's already giving us some hints about what to do.
12:16
So I'm going to make my file and let's call it lifestyle dot text so we can just write something in here that we want to get straight to this again.
12:18
So, again, no comment. Still the branch master, but this time it's telling us we've got this untracked file called my file dot text.
12:34
Now, what untracked file means is the gate hasn't been told to track its changes at all.
12:43
So if we make changes to this, isn't going to remember anything about what it used to be.
12:50
And it does say here you get at the track. So I had it in my file text.
12:56
And if I do get status now, it says that there are no changes to be committed.
13:04
So the changes we have made a new file in the repository called my file dot text.
13:10
So if I change this file again, we'll see what happens.
13:20
Do you need to manually track the files created? Yes. So when you first make a file, you do need to get at it so that it is tracked.
13:24
I think if you're using the term like integration's in your editors, they can sometimes like automatically at them for you.
13:36
You can set that up, but if you just take it by seven,
13:42
I think you always need to add once you've added one or you use adult once you get it, once you don't to and again,
13:44
you can use a command later to just add to commit everything that is tracked that has been changed and you can get adult to add the entire directory.
13:53
The one thing to be careful with that is if there's something you don't actually want tracked,
14:06
then either you need to use a ignore or turn like colour or, you know, don't use get at unless you really do want everything to be added.
14:13
OK, so I'm going to file again just to add something else and we'll see what happens now.
14:24
Says the changes to be committed. It knows there's a new file could be found at tax, but it has been modified since the last time it was added.
14:32
See here it says, use the ad with the file, final update or be committed.
14:40
Or we could restore to the previous point that we had to discard those changes.
14:46
So I can just I get a doctor or get at my followup text to update that, so I'm going to get it log.
14:53
Forget the status of things to be committed when you file.
15:08
So we haven't got any commit yet, so we're sort of building a convict here.
15:14
That's what we've been doing so far. And what it is, is basically like setting in stone.
15:19
Now, usually you want to use that n doesn't mean with a message and you'll write something like the first version of the file.
15:27
Right. So this is documenting what the change is and you should always try to make this as descriptive as possible.
15:39
And please tell me who you are. Whoa, exciting.
15:46
So this is a brand new thing.
15:53
So I actually apparently need to tell everyone who I am.
15:58
I'm just going to do not and my name, so I'm just following instructions that it's temporary, but that's fine, so.
16:05
I try and commit again and what's happened, so this time says that we've made the very, very first comment and his name,
16:16
so each committee has a unique name and it said that the first version of the file, one file was changed.
16:23
There was one inserted line, this false one that was created.
16:29
So, again, nothing to commit. So there was no changes.
16:33
And if I did get log, it tells me that here's the full committee.
16:38
Here's who who wrote it and his when it was written and here's what happened.
16:44
Right. So if I make another change now.
16:51
Let's have a look at what's happening now. But for now, saying that life has changed.
17:03
Now it does say here, no changes that you get at all get Duchaine.
17:14
So this is this is the way that you can sort of you don't have to use that adds to manually specify what you want.
17:20
You can use get a message and say changed time.
17:27
So, again, one phone was changed. There was one insertion of one deletion. So that roughly means one line was altered.
17:37
You have an you haven't taken away. You've altered it to get log again.
17:44
And then we got something here, so the most recent comment was right then and it changed hello to hi.
17:50
Just before it the very first version of the file. Now.
17:59
Can you add a particular focus?
18:08
No, so actually, I might think is everything that you can specify, I don't know what the what the flags are necessarily,
18:11
but I think it's usually just everything so and so the moment we've got these two committees,
18:21
medical and what we're going to play around it now is going backwards in time.
18:29
So if I can see the file in my file, so the moment it says I won't.
18:35
Now, suppose you want to go backwards in time, then we can use get out.
18:41
So get checked out and we give it the commit number. There it is.
18:47
And it tells us that we're in a detached head state.
18:54
It sounds completely horrific, but it's fun. So it tells us what this means so we can look around, we can make changes and commit them.
18:58
But you really shouldn't do it because you're kind of in history.
19:07
So this is part of the like checking what you've done. You shouldn't really edit stuff back in time.
19:11
But if we look at my final text, you see now it's a slow world.
19:18
So it's back in time. It's back to a previous place and you can see the log actually moves the other place.
19:23
Can I repeat check out short circuit checkout is just that with the hash that we wanted, which was this one.
19:32
So suppose we won't go back again, and so I think we can just do get check monster,
19:42
which is the branch, and it should have put us back in the other position.
19:49
There you go. So it's gone back to this one again, so she's able to go back in history just to check out something,
19:56
I wouldn't recommend making changes in the past because you get into some ugly branching scenarios where the history is diverge.
20:04
But that's the basics. So. How can we take the entire bunch back to the past and I think.
20:12
Recept. Usually so usually I find myself Googling these things, I think.
20:26
So there are people who is doing this get relief that is going to basically undo the commit and it will perform the anti commit.
20:35
So basically, it will perform the exact opposite of the one that you did.
20:46
I think if you check out and commit that might work, it might complain,
20:51
especially if you're using like another weapon, you might be able to get reset.
20:55
Uh, let's see. Let's see what happens. I don't mind breaking this.
21:03
Yeah, OK, so it's now get reset there and you can see that the changes have been left behind and you can also use that to say,
21:10
no, I really don't care about the other things. So, yeah, you can use that.
21:21
And harness looks like the best way of, like, getting out of the sticky situation.
21:27
So if someone's seen rebase before, what does that do? So that's about branching.
21:31
If I get in time at the end, I'll talk about that essentially.
21:37
No, I would not use rebase in your in your university.
21:42
But now what we base does is it basically says there are two branches.
21:47
So one's got something, one has got something else. And usually when you want to put them together, they get merged.
21:53
So there's a committee that basically takes the changes and the changes. The other puts them together, makes a new permit.
22:01
And what we base does is it actually says, actually, I want to replay the new stuff.
22:08
Over the top of the oil changes, so they sort of look like one continuous history.
22:17
The problem with doing that at uni is that we want to see evidence that you're using the punches in some of your later projects and stuff.
22:22
So replacing kind of hides the fact that you ever used the branches.
22:29
And it's going to make it harder for your Marcus to verify that you actually did something.
22:32
So I would avoid it. It is good practise in the real world. I would avoid it at university.
22:37
So can I repeat reset? So reset allows you to show no example when we're working with a different repository that allows
22:44
you to go back to connect and sort of on-stage everything that happened up to that point.
22:54
If you use that hard flashcard, you're basically saying, so if you look at it, it'll get reset on its own and said unstaged changes after reset.
23:02
My phone has been modified. These are the changes I made that have been allowed to fly and they've just been sort of like rolled back.
23:11
I can choose to commit them again or discard them just as hard as no.
23:20
I really don't care about any of the changes from this commit get rid of them all.
23:24
I want to just like, go back and get outside, get log they go.
23:29
So after doing that resectable commit, it has disappeared.
23:34
And this is the head of the last check out master.
23:39
It will only have one commit this time. Is there any way so we need to check out some of what happens to the head and it just stays around,
23:44
so that's why it says detached head states and the old head is left where it is.
23:54
So you can move around, you can just go backwards.
24:01
If you had two branches get checked out most or go back to Masters, had to get checked out to the other branches.
24:04
That was different. The revert, Reesa, is a bit more like a sledgehammer and rubber will basically do the opposite commit.
24:10
So it was sort of under the commit that there's evidence that it happened.
24:20
So let's let's see if we can demonstrate that.
24:24
So let's change it back to high and let's try some of this trend of 30 minutes and get rid of that.
24:30
Let's get lower. So let's say I want to get rid of this comet to multiple comets if you want.
24:43
But we'll give out one component and it now opens default.
24:51
And it's not a I could be doing this, so be careful and you might want to have that configured exactly how to do that.
24:57
So it says, revert hello to Jaheim. It's Pervert's the comet.
25:05
So can we do that? Get log.
25:09
You see, we have got three comets and this one says, I have this one.
25:15
And this one is if you quickly scan over the numbers, you'll see that this comet right here.
25:19
So this is sort of recorded, the fact that this comet and it's been undone.
25:26
So if you were to look like a dif, you will see that compared to these comets, if we do get death less and less.
25:31
We'll see what this this year did, is it?
25:48
What's the difference? I take it the wrong way around. I don't want this one to be fast.
25:55
If you commit to do commit and we get to find out what happened between these two comments, so in this case it took away himbo and it worked.
26:03
Hello, world. So the river is literally the opposite.
26:15
The opposite commit. Does that make sense?
26:20
So it sort of gives you evidence that you wanted to unwind something that basically just says, you know what, to get rid of it.
26:26
Why is that attached to the dangerous? It's not just dangerous. It's just that it's like it's like an alternate reality to different things.
26:34
So it can be a bit hard to sort of make it the real reality.
26:43
Then you need to, like, play around with a few more commands. It's all stuff that you can Google that.
26:48
Yeah, I, I tend to try and avoid doing stuff in a detached state.
26:55
I like to keep my head on the wall working with a. So, yeah, no useful tool here, so definitely what's changed between two different events is Israel.
26:59
Of course, work depends.
27:13
I think it doesn't really matter. I think that is good because it will show people what you've undone, especially when you're working within it.
27:21
That might be a bit more useful so that people can see specifically you did something and got rid of it.
27:28
Yeah, ReverbNation and look, that something was averted, get resettled, just throws away Korvettes, and that is the difference.
27:35
OK, so if there's no more questions, we're going to move on to a more regular workflow.
27:44
So the moment we've just been working with local people, what it's detached, mean and not attached.
27:52
So literally it means that, you know, your head to the head is the point to the part where you're looking at in the in the sorts of tree.
28:04
So I guess actually my Panopto might be useful for this.
28:17
Uh, that's what we got, right?
28:23
So I'm going to some drawing then, uh, excuse my drawing skills on with the mouse so you might have your comment.
28:27
History, which is like this is one this is commit to this is three.
28:41
So by default, your head is going to point here.
28:48
And this is like going to a head and the chocolate master, if you get to check out, see to your head,
28:52
is going to point here, but it's no longer attached to when master is master still over there.
29:01
That's why it's detached, because they're not together anymore. One is over here and the other is over there.
29:08
So that's what attachment means. And it's not necessarily from the master, but it's it's from any branch that you happen to be on.
29:14
So. Check that, I think you mean check and reset, check reset will actually throw away the stuff,
29:25
check out gives you this detached state so you can't just go backwards again by checking out M.
29:33
If you were to say this is a check out, so I checked out Setu and my head's not pointing here,
29:41
if I reset hard to see to, this link is completely severed and this now becomes master.
29:46
So all of this stuff here is thrown away. That's the difference between the two of them could.
29:54
Let's get rid of that. I've got my black screen back. OK, we're not going to last.
30:02
Hopefully they won't get in the way too much. Can you revert to revert?
30:09
You can refer to and you can remember that and yeah, you can.
30:14
It's going to get ridiculous real fast, but. OK, so let's work with a more realistic workflow then.
30:22
So I'm going to switch over and can you.
30:32
And reset. No, well, it depends on whether you've pushed it yet, so let's go for that one.
30:36
I've got a prop, a non a non local server going if you did it locally.
30:51
No, it's gone. It's gone, brother. And so I have people here it is Gilan, so I'm just going to use the docket just so that we're all on the same page.
30:55
And by the way, once you've got your keys, if you don't want to enter your password every time, then pop in here.
31:12
So you use the settings, preferences, keys,
31:21
and you paste your public key here and add it and then the get level acceptable, your ability for as I say.
31:25
And so what difference does that make? Well, normally we have a repo that we're trying to get to this lovely big Clonmel and you get two options here.
31:32
So you get close with SNH or close with https.
31:43
If you do with this option, you're going to have to enter your password every single time you do a push and pull.
31:48
We haven't seen that yet, but we will if you use it. It's just easier.
31:54
It's just easier and easier at the CHP to do the job for you.
31:59
So I'm going to quickly demonstrate this, so I'm going to do it alone and I'm in my home, the rectory here, and I've just taken the link from here.
32:05
Let me go past that in. So get close. And I'm just going to show you what the syntax of this is and how you access your keys, something like this.
32:15
So capital at the Sago Mine disaster, they talk it go.
32:29
So what you do is you copy and paste this into that window. That's what you're going to do.
32:36
Once you have generated, which you do at this point. So what's the syntax of that?
32:42
So we have. Git clone, this is the address.
32:47
This is like the host that will find it. So this is get lab servers and the user we could get now is just one convention.
32:53
It doesn't necessarily have to be that when I make a report and I'll show you.
33:03
And then this is the basically by the get the get folder is found that don't get for that.
33:07
So happens to be in this factory and it is this directorate here.
33:14
How do you generate S.H. case that would be the stage kitchen and follow the instructions that it tells you to do.
33:20
So I will let you walk through that. It's quite a simple process.
33:28
So get going. I run. It already exists.
33:34
OK, cool. Groups like.
33:39
And so you said it's now cloning into this directory and O'Reagan lab.
33:48
So if I guess you can say that they have a photo now, got contemporise alterna,
33:57
and if I go inside, this is indeed the same repository that we saw up here they go.
34:02
Two things in it. That's all some. That is how you're going to basically do the stuff you clone from your repo and you work on the local machine.
34:10
How do you find a specific case that you've only created?
34:23
Usually you find them in, I suspect so more specifically tailored to search and they usually found in their.
34:26
To be specific to the gentleman, you can move them to other machines if you want to, but yeah, I tend to have a machine, Birkitt.
34:40
So that's how you get out, we get.
34:50
Now I'm going to start playing around with people's emotions, so I'm actually going to take a slightly different day.
34:54
So let's put so I'm going to introduce my third friend for the day.
35:03
We got my little Minotaur gets to live up here. And we've also got a new friend, Cerberus.
35:13
The the trainer is back together. So three machines, what are we up to?
35:20
So I'm just going to quickly make an. A folder.
35:26
Now, this is not normally how you can get repo,
35:37
I'm just setting this up because I'm treating my little as the as the server that is actually going to be storing the histories.
35:39
And so I'm going to run slightly different commands. You don't normally do this.
35:48
I get in it. I would take.
35:55
That's the one. There we go.
36:03
So I've made this repeatedly here, so we don't need to worry about this anymore, but we're going to start playing around with it.
36:06
So I'm going to blow it all on a direct basis and lock stock test and not get.
36:15
And angular contemporary. Well, sort of hold little dear, we don't know that, uh.
36:25
OK, oh, oh.
36:50
It installed. What do you know about? So first, you disappoint me, you disappoint me, OK, OK, OK, OK, OK, I can do this on the section.
36:58
And what are they used bad, so I'm setting up. Well, if you look at like in this photo, it's got all get crap in it.
37:17
And this is because I'm making a remote server. So this isn't something you'd normally do.
37:24
So I'm going to make let me down today.
37:30
That is sometimes get blown my little dog.
37:36
Test. OK, so there are now two versions of this in these in these places.
37:44
However, they're going to be diverging from each other.
37:58
And Leviathan is Hebrew, yeah, the other two Greek, they're all just mythological beasts and all of my machines are cool.
38:04
That is cool because it's the gateway, it controls the other two.
38:13
So that's how they get turned on and off in the morning and.
38:18
Yeah, minus the heavy lifting. So, yes, what we do.
38:23
So we've now basically cloned this paper on this machine so we can treat that like we become something that will get the same process.
38:28
Point is, these are sort of pointing at a different location somewhere else in the world.
38:39
So we go inside those tests. There isn't anything there.
38:44
So it's empty. And then here again, nothing there.
38:48
So I'm making some stuff and say.
38:53
And again, if I do get status, Bonbright master, noncommitted, untracked files, same stuff that we have to cross, I'm going to at the end of it.
39:03
Hello. Now, this time, we've got some new plants.
39:17
And in a sense, push.
39:23
And get put, so I'm going to show it was best to get first sense of what we've done locally to mine until now,
39:28
this really isn't going to change anything because it's always just just to get foda.
39:37
It doesn't change the stuff in itself. But if we go to the other part, if any Cerebus was playing ball today, we'd be on a different machine in time.
39:42
I can now get a here just going to demonstrate if I get pulled on this one.
39:52
Looked. The. Uh, I'm just going to run this so that it gets out of the way.
39:59
Uh, you just don't have to care about about that message again.
40:08
So if I get up on this this side, this is already up today, so there's nothing on this machine, there's nothing on this machine here.
40:19
I mean, it's all that Leviathan one doesn't know about.
40:28
So nothing to it if I get pulled here. I think I'll meet you.
40:33
Yeah. Wow, how did I meet myself? That's natural.
40:50
So, yeah, when I do a bit pull here, it's not been updated with this new committee.
40:58
Well, no, they are so the same. They get their identical things.
41:02
Just we've now got an orange master. So if we were to reset here, um, we kind of be OK.
41:07
So if I do just make another commit to this file and just quickly commit it.
41:16
So let's get more, OK. So if we now do get reset to this.
41:28
I'm just. They get so it's up there.
41:38
So if we get look, you see how it's changed. So it was like Origin Master knows up to this point.
41:43
Now all the master knows up to this point because I pushed it.
41:50
If I do the reset. And that's that's hard to miss one.
41:54
It has thrown away that committee system in Australia. Can you get back what in this case?
42:03
Yes. So we're trying to push it's going to say rejected.
42:09
They have to push the to mind at all. Updates were rejected because the typical is behind its remote counterparts.
42:15
Essentially, Minotaur's like, no, you're not pushing.
42:22
You're behind me. You've got to grab your stuff just so it's OK.
42:26
Let's say, oh, no, we made a mistake. I actually looked at that comment back. How do we get it?
42:32
Get reset. That's the origin master.
42:37
So this is now saying reset to wherever the origin is.
42:42
And we know that somewhere ahead. So if we reset, we go commit back.
42:46
Everything's fine. I push. It's just going to say everything today has nothing to do.
42:52
Right. So.
42:58
There we go. So that's how you restore yourself when you don't get me that hard and you made a mistake that sometimes you haven't pushed it.
43:05
And so I do want to illustrate that that changed.
43:15
So we've got to make sure that we always get pulling before we work on something we can see here.
43:20
We've pulled together. It's told us that there was a change to Helen got text.
43:27
Right, and there's nothing to pull if we do this and it's all up the day,
43:32
so I'm going to make a change, I'm going to illustrate when things can go wrong.
43:38
So I'm not happy about that. So it up, so now Panopto is aware of this change.
43:43
This one is now out of date, so I'm going to go and did that fight and the.
43:56
I'm going to be here. And that's just me today, and I'm going to try to push it and it's going to get rejected.
44:08
Why is it rejected? Because this woman knows about something that this version of Leviathan doesn't know about.
44:22
Right? It's not aware of the fact that this happens.
44:28
When you look at the logs, you can see they are the right one.
44:34
Has got this changed to back the government have got something and oops.
44:38
So we can say, OK, well, we can't really do much.
44:43
We can do we get. What's going to happen?
44:48
Well, this is what you've got to be careful to get approval before you start working on something, because we've now got too much conflict.
44:52
So basically, when two branches with two versions have diverged, they can often merge them together again and apply the changes from both of them.
45:01
The problem is that both of these machines have decided to edit the same line and gets not sure how to merge those.
45:11
So if I open that file, here's what it now looks like.
45:20
So what is telling us is that we had we've got this and this is the change we do try to make.
45:25
On the other hand, the remote has this change and this is the permit for that.
45:33
There it is. You can see that they are the same the same hash.
45:39
So essentially, we have to resolve this through arbitrating between the two of them.
45:45
Now, what I'm going to do is not do anything openness in government.
45:51
So I'm going to demonstrate when editors can help with this sort of stuff.
45:59
And. So here you go. So there's nothing just that we can see what happens.
46:05
So this is this code and other editors often annotate things which make them look a bit nicer for you.
46:12
So in this case, you know,
46:21
it can tell us only Q1 that you're in the master branch and the exclamation mark saying that there was something going wrong here.
46:22
We've got to deal with a merge conflicted text.
46:29
And it tells us it gives us some options about, you know, we can accept the current change except the incoming change, whatever.
46:33
In my case, I'm just going to accept the incoming change and I'm just going to accept I made a mistake.
46:42
And so it's always nice to sort of try and resolve these editors, but it doesn't really matter where you do it.
46:48
You could have done a text or of text.
46:53
Now it's just been resolved and to fix the most conflicts.
46:57
And then it says there is so much conflict.
47:03
Usually you want to that's a descriptive name.
47:11
But then again, and we do get logged and there is another committee here which is about conflict and fixed.
47:13
If it didn't need to announce an example of that, it would just automatically converted what's good for us.
47:23
Maybe I can make that work so I can all get push. It's not going to accept that.
47:31
And I can now get pulled from here and everything is OK.
47:38
So I'm just going to go back to code quickly so that we can see what he's not saying, anything exciting.
47:46
If I had some more text, you can see we've got a little blue bar here.
47:52
Now, this might change depending on what you think, but a lot of them will sort of show that this does illustrate you've changed the light and you can
48:00
actually ask what if it sort of says you removed an empty line and you added this line on top of it.
48:08
So that's quite useful for sort of tracking stuff. And you can see this and here is telling us that we've modified this pilot to commit.
48:15
So it's like a way of managing this stuff. You actually can do all sorts of source control and stuff like that.
48:22
So if you wanted to do the command, we could do that.
48:31
So I can the United States, the changes and it's another line and commit and whether or not maybe it does turn out as Jack gets like this.
48:34
Yeah, so it did. It hasn't actually pushed. So you don't actually need to push between every single cornette.
48:52
You can do a bunch of them, them all at one go before you can just push like that.
48:57
So I'm just going to get pull show that that worked and say we've got one in no deletions this time and text.
49:03
Right. Then I'm just going to say I.
49:15
Here was a quote, completely forgot of its name.
49:24
Um, so here I'm just going to say, oh, I forgot to to a bit more excited.
49:33
What can we predict is going to happen? Then if elections can work because it's different lines.
49:46
Well, they really pushed. Is it going to succeed for one?
50:01
Look. Not going to succeed, but, yeah, get put these changes on different lines.
50:10
So what does that mean? Well, let's say it says Boto, merging Helidon text and apparently there is still a merge conflict.
50:18
I think I know why that's going to be because of line ending.
50:26
So let me just just accept both changes.
50:33
Get rid of that.
50:39
I'm just going to make a buffer here so that we can play around without having to worry about the last line of fight, because that's what the lines.
50:40
But OK, let's try this again. Oh, OK.
50:52
So I'm going to edit this fight again a little bit about the then I met.
50:58
OK, so let's push back and wait here, I'm just going to edit one of the lines.
51:13
And let's pull so we know if we push, it's not going to work, so let's just go and go something different.
51:31
So I merge the master of this person.
51:40
Explain why this is necessary and not the time. You don't need to specify what's necessary.
51:44
I just normally write out an exit and it tells us that it's all too much.
51:49
The final word has been made by the recursive strategy. So they are both changes are incorporated.
51:53
We didn't need to do any work. Good for us.
52:01
This is a way to merge conflicts using a merge command, the merged commodity used to merge between branches and locally, I think.
52:06
And I think you could probably also merge branch.
52:15
So the idea of merge command issues to being a bit more controlled, waiting for get to scream at you, but it's roughly the same process.
52:20
And so who has the supreme authority to decide what the origin master should be like and what one in particular?
52:29
So the master, the origin master is the authority of source who decides what it looks like, whoever gets there first?
52:40
Um, so, yeah, this is why when you're working the team,
52:49
you don't want to all be working on the Master Branch together because you're just going to have merge conflicts and all sorts of [INAUDIBLE].
52:54
Usually you want to open your own branches and then when you're ready a bit later down the line, you can merge them with each other,
53:00
either online or on get land, or you can do it manually on this on a command line using it much.
53:07
But I'm not going to show that today because you're not going to need branches or any of that stuff for your own projects.
53:14
One of the story is if you happen to be working on two machines, for instance, you do some work on the machine, and then when you're home,
53:20
you do some more work just to get little before you start so that you don't end up realising
53:28
that you've just done some colossal merge conflicts that need to you need to resolve.
53:36
And if you didn't want to deal with that, then you realise you made a mistake at least that allows you to undertake those changes and get rid of the.
53:41
So basically, all I have to say and. Today.
53:52
Yeah, this is a bit different because you more entertaining take the same for same time.
53:59
But try and avoid working on the same price as your team-mates in general, so, yeah, like I said,
54:07
it's time for not just because I'm using Minotaur here and it doesn't make this process any different.
54:13
You could have claimed this from the lab on Get Lab or GitHub or wherever.
54:19
Point is, I've got two different versions of this repo interacting with each other.
54:25
It just so happens that Minotaur gets to sit around the control of it.
54:30
So anyone got any questions about any of this? And just so you know, by the way, and obviously you do this pilots, when you do your submissions,
54:34
but technically your submissions are going to be marking one of these committees as the thing you want to submit.
54:45
Of course, that's how that works, basically. And it looks like I actually these changes to last, so I should do the.
54:51
People supposedly come online and it's basically the same process that it just basically means that you get those jagged lines,
55:04
so you get these like the whatever.
55:11
And the idea is you just take those lines.
55:16
And so, yeah, it's just, you know, basically just replacing the text with what you want, it's just a bit more convenient if you do it in a day,
55:19
because it will allow you to just very quickly delete one or the other or compare them a bit more thoroughly.
55:28
But it's it's the same idea. Can I explain SFP again?
55:33
Sure. So I'm in a good place and it's a fantastic TV.
55:39
So the idea is uses a prepaid and it's to be more specific.
55:49
They meet at my hotel and I'm not connected to my local.
55:55
These are not where I wanted to go wrong.
56:02
Wrong place. I need to change the port. I'm trying to figure out how to get that out.
56:08
I don't think I want capital. So I us this is my I've got my wso slingerland different port to my windows, which is why that changed.
56:26
So basically what this is here is Minotaur's directorate's.
56:43
Now, I can go into something. For instance, I go into there and you can see this is the thing I've got here.
56:49
Right. So this really matter is basically just a normal funnel browser, the graphical versions of this.
56:57
But let's say I want to get a love letter and I'm not going to specify filename or location.
57:07
So I think will go is in subtests just this. So we've collected it.
57:15
And if the exit is it, there it is. So I get and it's not been collected and popped in here and you know.
57:21
Well why not. I can just add it to the repo.
57:30
Kickflip. Magically, it's appeared on the other machines.
57:43
So that's basically how it works. You're using commands to navigate around you.
57:49
Can you get to collect something? You can get used to put something.
57:54
Yeah, so where does it transfer to the directory that you use it in?
58:00
So in my case, they started it in blocks of text. So when I collected it, it came to the test.
58:04
When you can specify it, you could say get the text into say, blah, blah.
58:10
But that's yeah, that's roughly how it works.
58:18
OK, any questions about anything else does so does the college recommend you get an acknowledgement that a DUI doesn't matter?
58:21
I typically use it in the come line. I've never bothered with GWI stuff.
58:34
I don't even use Vaskov. So that was literally the first time I've ever done it. Commit inside the code.
58:38
I usually just have a terminal open where I'll be doing those comments right here.
58:44
And so, yeah, I it's up to you. Basically, it doesn't make much difference.
58:51
Maybe it makes things nicer. I don't know. I just used some. And.
58:57
Anything else and there were questions I got.
59:05
Hanging around a bit for a bit more, if anyone has any, otherwise, I will see you potentially in the lab at about 2:00.
59:16
So could you tell me how to solve much conflict automatically, but how does it automatically.
59:25
Well, it does it automatically.
59:33
So you pull and if it can automatically, it'll just do it and then will ask you to write a message and say that there's nothing else you need to do.
59:34
So just pull it and say, OK, there is there is a conflict here.
59:45
I need to deal with it myself. Just something like the commit message that makes sense.
59:50
As I said, all our computers and so it's by default.
1:00:07
So they all share the same home directory.
1:00:13
So if you compare it to the shell company computer, all of them, and if you study to enter your password, your association between that.
1:00:16
And that's because there's no key registered to go from one machine to another.
1:00:24
So you would need to do that separately or you can form addresses key so that you can use the section on the other end, which you can look at.
1:00:29
And I think it's like a J, something like that.
1:00:39
But I personally have another key on the machines that I've got to love the machines, which them to just hop between them.
1:00:44
OK, OK, OK, I knew that someone else wants to say anything.
1:01:03
The cleanup service as well. Is it possible to clone peril because of the and.
1:01:13
Yeah, absolutely. You just you just you just claim that that's what it's like.
1:01:32
It's just any other snivelling just you need to make sure if you want to do environmental safety,
1:01:37
you need to make sure you SAHD registered will get lab if you don't.
1:01:43
That's fine. But you need to change your password every time you pull or push, which can get very annoying very quickly.
1:01:49
So I would recommend using the SSA education. We do expect you to as well and Sanjay.
1:01:56
That's say. And.
1:02:16
I guess make sure you assess each case registered, if not just for the meantime, and you can see someone in the lab who could actually diagnose that.
1:02:23
Just demonstrate here. If I if I get for this, the show you get flown by ETPs still works.
1:02:34
I just have to enter not only password, but my username is Brian.
1:02:46
If they were actually wants to do a. There we go.
1:02:58
So there you go. That is actually still closed. And if we do get hole that hole, I'm going to need to get my username and password again.
1:03:03
Certificate verification. They're not sure and be I think it's worth asking Constantinos or CSJ.
1:03:19
Also, try a bit of a. And in the meantime, so that you can actually get to work doing something.
1:03:31
Yeah, so if you ask someone, a lot of they can actually diagnose where the problem is in patients as well.
1:03:43
For now, it works now, but it is a bit annoying to have to do your username and password and ask for help in the in the lab with that.
1:03:50
Actually, someone can figure it out. I don't know any arrangements I can buy laptops and, you know,
1:03:57
I don't know about that and they that might exist, you might want to ask Constantinos, but no one but I.
1:04:06
I don't. Oh.
1:04:15
OK, thanks. I think he goes about tablets and actually I think that's prepared the students to do more of the.
1:04:42
That's what I'm asking. This will stop the recording.
1:04:58
Then, uh. And I'll just continue to hang around.
1:05:45