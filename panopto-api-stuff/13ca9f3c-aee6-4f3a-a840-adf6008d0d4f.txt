ID: 13ca9f3c-aee6-4f3a-a840-adf6008d0d4f
Title: L18 - A 32-bit Processor - Architecture and Instructions
Category: COMP40001 - Introduction to Computer Systems (Autumn 2021-2022)
Lecturer: Bjoern Schuller
Date: 06/12/2021
Welcome everybody to lecture 18, 32 bit processor architecture and instructions.
0:01
So we're moving from our manual processor to a 32 bit machine.
0:08
And today we will be talking in this lecture about the architecture and the instructions are talking about machine code or similar instruction set,
0:13
which were really exciting. And then in the very last lecture of its course,
0:23
we will be talking about the fetch and execute cycles again and putting together our controller and its output logic.
0:27
And then we really have all 32 bit processor done from case level.
0:38
So let's go into this, if you remember the manual processor, we had a couple of registers a B result, carry an instruction register.
0:43
We have the combinatorial shifter and a few parts here for the actual processing of the input.
0:54
And then we had some multiple access to choose the output from sifter or from L2 to choose the.
1:01
Multiplex are here for a to be loaded from the result output or close to the result,
1:14
so resembling what should be stored into the result, registering a sort of accumulative fashion or from the data in pass.
1:23
Then we had our execution cycles with five states, if you remember.
1:33
And for that, we had. And this kind of moral instruction here,
1:38
I put together by some migrants trucks and basically loading the instruction loading data into a B and C another instruction,
1:44
the first one was to prepare. So it's sort of the second one is the actual, if you remember, for example,
1:53
additions or Division II to which we had and the last one is not loading any data.
1:59
If you remember, but it's storing until the results register in the carry register.
2:05
So this was our roundabout here, going through these five states consecutively unless going into an idle state and all we know,
2:11
of course, that the idle state is actually when we should move into fetching from memory.
2:18
So to execute the instructions we needed to set the multiplexes such that the correct registers were put together,
2:23
then we needed to set the arithmetic hardware, including, of course, the shifter to compute the correct function.
2:30
And third, and finally provide a clock falling edge to the registers that are to change.
2:36
And remember, we were using falling edges for the registers because of the rising edge was to use to change the state in the state machine,
2:42
and we wanted to avoid race hazards.
2:50
Have you remember fetching from memory, you had a memory put together by matrices of D-type flip flops, which are a one word memory,
2:54
so we grouped them, for example, 256 by eight by eight matrices, and we have these kinds of chips here to put together memory.
3:04
We have the address first to provide the address for read and write operations,
3:14
which was connected to the processor by the memory address register or are in short.
3:18
And we had a bidirectional data bus. Here was a tri state buffer to be able to disconnect the flip flops and make sure that only one is connected
3:25
to the bus in order to avoid burning wires because of high and low being present at the bus at the same time.
3:36
And we had no memory data register, which actually holds the information that is currently available at this address,
3:44
which is in the Memory Editors Register. That was also fed into the instruction of gestures such that we have the current memory address,
3:54
register content available to the memory data register in the instruction register and potentially two other registers.
4:03
Up here we have the programme, Coulter,
4:10
which notes at which moment in the or which place in the memory on the current instructions would be read from that had
4:11
its own imprimatur to make things a little bit speedier to increment the address here after an operation is executed.
4:18
Of course, we need to go to the next one.
4:26
And we had a multiplexes to choose if we wanted the programme counted to be loaded from the increment or from the processor, for example,
4:28
in case we do a jump operation and we want to override the next instruction as an address,
4:35
but rather go to a certain address we're jumping to or to jump and then later on return.
4:41
And this multiplexing here is basically there to choose if you want to out the memory
4:48
address rather just from the programme counter or from the processor that is needed.
4:55
Of course, if you want to decide whether we're loading data from the memory or reloading the next instruction from the memory.
5:01
So we have to put the two together. We have a memory connected to the processor.
5:11
And one thing that you can see easily here is that in this case,
5:18
we're not having the result register needed any longer because we writing the result into the memory.
5:23
So you see the result, register your disappears.
5:29
Rather than that, the results can either be fed back into the register.
5:35
Or, of course, it can be written into your memory.
5:42
So not much has changed if you put the two together, only the result register has disappeared.
5:51
We will write the result of computation directly to memory. However, we have not got a very convenient process and why?
5:56
First of all, data that was placed on the data input lines must now be fetched from memory and memory.
6:05
If you remember, requires three states, that was what we did in the last lecture.
6:12
So instead of having five states for the execution in our controller, we need to have 17 states.
6:16
Why 17? So we had five and fetch costs three.
6:22
So three times five.
6:29
Sorry. Yeah.
6:36
BP 15 plus the executions, well, actually, it's four times that we need to fetch from the memory because if you remember here in the last one,
6:37
we had unused, so we did not need to fetch the we only need to fetch four times.
6:46
Fetch costs us three. So three times for us 12.
6:51
And then the actual. Five added on top of that, so that would give us 17, 12 from full time three fetching and the five acts execution ones.
6:55
Second of all, it's inconvenient because data to be written to memory needs an address to go to.
7:11
So whenever we want to store a result in the memory, we need an address where we should put it.
7:18
Now how did we go to get this address into the memory address register?
7:23
Because the Memory Editors Register must hold that address where we should store to at the moment that we write it to the memory.
7:27
And we could add the address to the store, the result of a computation of the fifth spied in the programme.
7:35
You remember the fifth part was unused. So going back here?
7:41
In this unused which could actually have the address were provided to in the memory, that would need us, of course, to also get it from the memory.
7:47
So meaning that we need another federal from memory and instead of the 17, we would then have another three fetched states.
7:59
So we would have fetched execute states for instruction, also to get the address from the memory data register and to the memory address register,
8:08
because that's when we've headsets to know what we should write to. It will require us two years of passed by a registry.
8:17
And if you look back and to this year, if you want to go from memory data, register to the memory address register.
8:25
Unfortunately, someone will have to go to a.
8:32
To go into the memory address, register turn of the year, you might be thinking of B, obviously, but we need to go via these registers.
8:38
Unfortunately, this will destroy the result currently stored in game,
8:50
and we could feasibly live with the memory address registered before doing the calculation.
8:56
So stop the order and have the results address first.
9:00
But this will take another two states and we would need 22 states for construction.
9:06
That is clearly slow, slow, slow 22 states for instruction.
9:14
That means simply 20 times. Yeah.
9:20
Clock of falling or rising edges to go through the states and register changes.
9:24
Now, how can we do this a little bit better and speed things up, we can change all the boxes from eight bits of 32 bit.
9:34
That's what we're going to do now. And that's in four times as much in each cycle.
9:40
So in 32 bit, we can load all the four data in one fetch and hence be much, much faster.
9:45
Provide local registers,
9:55
which can be programmed to store partial results and design a controller with as small a number of execution cycles as possible.
9:57
So we will be thinking about a smaller number of execution cycles when we design the instruction Saturday and next lecture,
10:06
we will actually design the controller.
10:13
Remove elaborate carrier arrangements by doing our arithmetic on big integers, so as we move from eight bits to 32 bits,
10:16
we don't need these carry arrangements to go from low to high precision because we already have 32 bits, hence we already have high precision.
10:23
And then we can replace the bidirectional database with a separate, data inundated old bus for the memory and speed things up by that of it.
10:33
So that moves us to our real processor.
10:43
See, we still got the A and B registers here because we want these to be safely detached from what programmers can access.
10:48
So if you're programming an assembler or if you're using a compiler, the compiler can access these registers.
10:56
But the hardware still has to be registers, which are sort of safely detached from what can be programmed.
11:03
And they also void long passes to to go to the sifter and a view for spikes avoidance.
11:14
It's a result of the A and B register, but you can see now we got these seven more registers here, which can be selected from to load into A or B.
11:25
And I can tell you that, in fact, when I was having my first computer a quarter or 64,
11:38
it had three registers, a sort of accumulator and an X and Y register.
11:43
So in a way, this is already luxuries. We have seven registers programmable to be accessible to the programmer,
11:48
but also we still don't have a resolved register any longer, of course, was still going directly into memory after the result.
11:56
What else is new here is that we will have a bit more here,
12:07
we will reveal the function of it, in short, and we have this more complex controller here.
12:10
So the instruction register bits are not connected directly to the multiplex servers and shift a view,
12:18
but much more instruction registered goes into this controller,
12:29
which we will be designing in the last lecture, which then connects to these selection and function bits.
12:33
So we can do something here too. Yeah. Prepared.
12:41
So if you wanted to exchange know the contents of registers are zero and register are one.
12:48
What operations must our process carry out so we want to exchange or zero and hour one?
12:53
To look as the first example problem, and of course, we need to go via the air register and load it from our zero.
13:01
Then we load our one from a and a from our one at the same time, this is possible because we have to type flip-flops,
13:11
and that means that we can load our one from a because we load it from queue.
13:20
In the detail, flip-flop it, you know, so for a into from our one and at the same time,
13:30
you can input from our one Q side into the D side of the detail, flip the tax free.
13:37
And then finally, as we have it now, an eight hour one, we have to load R0 from a and the swap is complete.
13:48
So we're going from zero. And to a and then from.
13:59
One into a. And then from Iceland today, because we want to swap the contents, sorry, One Direction here.
14:13
So basically, we go. To load a from here.
14:20
And then we. Load our one from A and at the same time, you load it from one.
14:25
And final load are zero from a. Now, a couple of observations registers ABC, the programme counter the memory address, Rogers,
14:34
the memory data structure that's just a McCarey belong to the Harvard designers, as we said,
14:43
whereas the registers are zero until six can be manipulated by the programmers,
14:49
most arithmetic operations will no longer require a carryin simply because we already have high
14:56
precision with all 32 bits so we can set the value carryin directly from the controller if required.
15:01
For example, if you want to have an increment or a jump instruction, we'll be seeing for that.
15:09
Another controller, Speck, the controller is going to be a sequential circuit,
15:16
of course, again looking something like this, we have some three facts here.
15:19
That's what we discussed last lecture that's saying the same.
15:24
And then we have an unknown number of execution steps or states following each other, depending on the instruction.
15:28
So during the states we fetched from memory, and that's always the same three states, no matter what, but during the states,
15:39
the instructions are executed and will depend on the complexity of the instruction, how many execution steps will be needed.
15:46
It's the first time I can get a thirty two bit instruction from the memory, and the execute cycles will make the process a carry out that instruction.
15:53
So to formalise our back, we need now to define what the instructions will do.
16:02
So some of the instructions are a compromise between the software specialists and the hardware designers.
16:10
How does that go from the programmers or software point of view?
16:15
The instructions should be few, but very powerful.
16:20
We want to have very capable with instructions and for you to memorise that can do a lot of mighty things.
16:24
But from the hardware point of view, we need instructions to be very simple and take only a few clock paths to execute to speed things up.
16:32
So we now must find a compromise between these two opposing viewpoints.
16:40
And we will do our instruction for them,
16:50
and now we need to be very precise about it because we then implement it in hardware and in order to be able to implement and harder,
16:52
of course it must be defined.
17:00
And we will assume that there will be fifty five or less instructions, why at 255, because we will be using eight bits to encode them.
17:02
And why not more? Because it will be pretty hard to to memorise more than 255.
17:10
Even if you use a compiler, that's something of the top eight bits will be fine.
17:15
The instruction. In fact, we will be seeing, of course, as we do many less than 255.
17:21
But eight bits gives us some leeway if later on, we should use more instruction on the mark.
17:25
And plus one version of the processor.
17:34
Now, most instructions will act on a register, so we will let the next four bits define the destination register in our first template,
17:37
we will be going through other templates where we also have a source register.
17:46
But for now, on the top eight bits are the opcode, so bits 24 to 31 and the next for all the destination register.
17:50
And then we have a zero to 19, so 20 bids for an address.
18:01
You may be asking, why do we use four bits for the decimation register, wouldn't that give us 16 registers and only having just seven of them?
18:06
Yes, but again, we're reserving one bits to be able to have that little bit of headroom for next mark
18:13
edition of the processor to then have it was 16 registers or at least once more than eight,
18:20
potentially.
18:26
So memory reference and instructions, as are first bunch of instructions we will have for basic instructions that reference to the memory directly.
18:29
That is load register and the address of where to load from, store register and the address and.
18:39
Where two story two, meaning that we load into that register that we specified was all for bits.
18:49
The content that is held at the address that we're providing here and foster it
18:57
means that we store into that register zero to six with the forward specified here,
19:03
the content being available in the memory at that address, and we have jump to an address that doesn't need to register.
19:09
So we simply jump there to the place.
19:18
To the address that is being held at that address in the memory.
19:26
That's in jump with our return, and then we have call, which you may also know as John subroutine,
19:30
which means that we jump to the address that is being held at the address in memory that we specify here.
19:36
We also need to register why? Because this register will be the one where we store the return address.
19:45
So for the return after the call.
19:51
This will, of course, jump and call be working by overwriting the programme counter and then later on when when we go back after the.
19:55
Call we need to load from that register into the programme counter, so all of these have the same instruction format,
20:07
top eight bits for opcode next fall for the destination register note, however, that jump doesn't meet that.
20:16
And then finally, 20 bits for the address.
20:22
Now, this reveals the function of the BIT mosque, the memory reference instruction contained in memory address and the bottom 20 bits,
20:27
but if you want to feed the register into the memory address register,
20:36
of course we need to make sure that we delete the content in the destination,
20:42
register bits and the opcode bits because we will have to get all the 32 bits until the memory address register from the instruction register.
20:47
Hence, we need to somehow use a mosque and this mosque is a very simple one.
20:58
You can see it simply grounds these top bits here, setting them to zero,
21:01
such that the address is simply zero zero zero zero and then the least significant 20 bits.
21:07
To have the actual address. So from asking, we only need to to to ground these so no gate, as you know and or something.
21:14
This is a very, very simple thing of the mosque.
21:25
And converts the unsigned Typekit number to 30, but no, by masking the topics and setting them to zero, essentially.
21:28
Now, 20 bits means we can address one megabyte, of course, often too much, 32 bit what before.
21:37
So the memory space is quite a bit limited that we can use here.
21:43
So we want to use a full 32 bit address as an alternative if you need to have a larger memory to be addressable.
21:51
So for that, we can't use this direct load to restore.
22:00
We will need indirect and use the indirect addressing by another register of the source register and that can of course, provide 32 bits.
22:03
And we will introduce the next instructions load indirect.
22:15
Was two registers, this means that we have the destination and register to load and to provide it, but we also have a source register,
22:21
which holds the 32 bit address, where to where in the memory to load into from into the destination register.
22:32
Similarly, store in direct two registers the.
22:42
Destination Register, which tells from which address to store and origin from from from which register to store by the source register now,
22:48
which holds the 32 bit address for the memory to store into.
23:03
Same, of course, for John and call indirect. No Jump has a register, namely this source.
23:09
Register for the 32 bit address.
23:15
Where to jump to for the memory address, register and call on the same principle here.
23:19
Next up, after our memory instructions to register internal instructions, basically the arithmetic and logic.
23:26
And that is a move. So we're moving from one register to the other one,
23:38
the content and arithmetic add and subtract and then logic and or X or or compare each operations between two registers.
23:44
Hence, we need to the destination and source register now as we're not using the address, we again leave the lower 16 bits on use.
23:54
They haven't mentioned this previously. That was the same here for the indirect memory references.
24:04
And we're also leaving 16 bits unused. That is, of course, unfortunate and wasteful, but that's the way it is currently.
24:09
It our architecture. We're fetching 32 bits and for the instruction and partly relieved bits unused.
24:15
So here again, we have two registers used in an up code, meaning that we use eight plus four plus four equalling sixteen bit.
24:25
And unfortunately, at least six inputs on use of the bottom. Next up are one register instructions, so clear a destination registers,
24:32
so we're setting it to zero in tremendous improvement by one decrement that compliment, meaning that we flip the bits for to compliment preparation.
24:44
This is only flipping the bits, so after a compliment, we would also need to use an increment.
24:56
Or was it carry in or something to to add one, if you remember to compliment as flipping each bit and then adding one.
25:02
So compliment here is actually just flipping bits.
25:09
Arithmetic shift left and right and rotate right, you remember at some point we have these more shift operations,
25:13
but we don't need these carry in and carry and able to shift operations any longer because now we have 32 bits, we have high precision already.
25:21
Hence, we don't need to have these cumbersome carry arrangements for shifting.
25:32
And we fall back into the four shifting operations and those who are hold and shift left, shift right and rotate right.
25:37
So those are the shifting operations. Also one register instruction, of course, because we're shifting.
25:48
The content of the detonation register.
25:55
Yeah, and then we have returned to return as belonging to call, we call and store and to register, and then we return to the address and the.
25:59
Destination Register, which is send content and send written into the programme counter to then continue the programme
26:14
sequence from the content in the destination register return to the programme content.
26:23
So for one, registered instructions were even more wasteful, were completely not using 20 bits.
26:30
The least significant 20 bits from zero to 19 because we only have one register now and the instruction use.
26:37
And the upshot, of course, is eight bits. And we move to no register instructions.
26:45
What could that be for sort of if then kind of branching conditional branching?
26:52
We really need skip positive and negative in our hardware design.
27:01
We're not having a skip zero, meaning that an operation or comparison between registers in our case A and B results in a zero.
27:06
You could argue that that is cumbersome from a programmers point of view, but it's more convenient from a hardware point of view for now.
27:14
So because we have the the registers, the carry, for example.
27:22
And conditioned on on those registers, we will have skips.
27:30
So why skip skip means that we skip the next instruction? And what would the next instruction usually be?
27:34
It would be a jump to somewhere else. So if something, then else something else would mean that if we skip the next instruction,
27:40
it else would be what we have been skipping, namely the jump to address.
27:52
So in short, our no registers skip instructions are there to realise conditional.
27:57
Handling as an if then, and they could one command on one condition and that one command usually would be a jumbo call or something like that.
28:06
Typically, it doesn't need to be that, but that is a very typical thing, of course,
28:15
because otherwise you would only have one instruction and you would move on to the other thing.
28:19
So you're jumping way to go to the handling of if case.
28:25
Then we also have unconditional no residential construction that is simply skip or no
28:32
operation that is useful in some cases that you will see later on and computer architecture,
28:39
for example, for hyperthreading with things like that. But this means in the case of no operation, that you simply do nothing.
28:47
And, Skip, is that you unconditionally skip the next instruction.
28:58
So in this case, no registered instructions, we have only the opcode and we're losing 24 bits unused because we don't need to register,
29:02
we don't need a direct address in memory, so we're really quite wasteful you.
29:12
No input and output will be achieved using the load and store instructions.
29:19
So, for example, if you think of peripherals like just serial ports like USP, et cetera, they can be read or written to,
29:24
for example, the screen via HDR cable or something like that where you can use pretty face to survive on memory.
29:32
So we're not talking about this in this course, but in later causes like computer architecture, you'll be seeing that.
29:42
The peripherals are can be handled as if they were memory.
29:50
So that's why we're connecting input and output devices so they can also be connected directly with the memory,
29:55
so they're using the space in the memory such that the input and output can be done while the processor is otherwise engaged.
30:01
So using load and saw instructions and two to two input and output operations, right?
30:10
So story would be riding onto the screen, for example, if the screen was our desired output,
30:15
a load would be reading, for example, from the moles or whatever keyboard and so on.
30:20
Then we need registered transfers. Each of the instructions that we have specified requires a series of registered transfers to carry them out,
30:26
and we will continue our design by determining the registered transfers that will be needed
30:34
to carry out each instruction from all the instructions we have been fighting so far.
30:39
And the registered transfers will become the formal specification of our process of controller, which we will then set to sign in the next lecture.
30:44
So we will have to set these fetch and execute steps,
30:55
always three steps to fetch and then depending on the instructions and varying number of execution.
30:58
So each step of the execution cycle, a number of registered transfers take place, and in the first steps,
31:05
the registered transfers are always the same and the execute sets the registered transfer depend on the instruction being executed.
31:10
Let's remind ourselves of the fetch register transfers,
31:22
and this versions of the process of the memory data register is the only register connected to the memory data outputs.
31:25
Remember separated into data and data outputs. So to the date of birth, we only connect the MDR.
31:31
The memory data registers three states. Are required, if you remember to fetch an instruction,
31:38
fetch one state a memory address register as loaded from the programme counter at the same time, programme counters increased by one.
31:45
That's to memory day to register is loaded from the memory, of course, at that address, so memory at the address, that memory address Rajitha holds.
31:55
And in the final fetch step, perhaps three, the instruction register is loaded from memory data register.
32:06
So note that after first three, the instruction is both in the instruction register and the memory data register.
32:15
We will be seeing that in our instructions now. So now we do the specification of our instruction set in detail and looking into what has
32:22
to happen is register a transfer and via which parts in the architecture we will be going.
32:38
So we start with the load direct.
32:45
And if you remember for low direct, we have a destination register and an address, the least significant 20 bits.
32:51
And we will have the first execution, so I could do the following.
33:00
We lowered the memory address register from the memory data register.
33:04
Why are the big mosque?
33:12
Why do we do that, why do we love the memory address registered from the memory data register, if you remember what we just said?
33:15
The instruction is both in the instruction register and in the memory data register,
33:22
meaning that also the memory data register holds the instruction and we need to go via
33:29
this bit mask if you remember to mask by grounding them the top bits above bit 19.
33:35
So but zero to 19 hold the address and the bits 20 to 31 needs to be mask drawn into zero.
33:44
Such that we go into the memory address register was a valid address to load from.
33:52
So we need to go via the bit mask and let me just quickly step back here to this slide.
33:59
We go, why are the memory data register from the memory data register via the Bit Mosk into the memory
34:12
evidence register and now you can see why we need it to to come from the memory data register,
34:21
not the instruction register. The instruction is in both registers.
34:27
Now we load it from memory of the current problem kind of position we loaded into memory data register and also to instruct to register.
34:32
But we need to use it for this case here from major memory data register because the instruction register cannot go.
34:42
Why of the Bit Mosque?
34:50
So we need to go from from memory day to register via the bit mark into memory adjust register and the first execution cycle of Low Direct.
34:54
There will be some skipping years, sorry for that second execution cycle.
35:06
Reload memory data register from Memory Synovial will write the instruction to do the actual load and reload the MDR from the memory at that address,
35:12
which is now in the memory address registered because we loaded in to the memory edges.
35:22
Register from the memory data register the first way, the bit mark and then the third execution cycle.
35:26
We need to load the destination register.
35:32
From the memory data register, meaning that we actually load the content from the memory into the destination register, no mask is needed for that.
35:39
Let me just get back here. To Slide 11.
35:49
So we have it in the memory data register and we choose No, and this multiplex, you're not to choose it from the bit,
35:54
but rather to choose the full memory data register content to then loaded into our destination register, which we specified.
36:04
And once that is executed, it means that we actually executed our load, directs him to a destination register.
36:14
No. We will not go in full detail through all of these commands, and no, but I would highly encourage you to do that.
36:23
Think about this is a great exercise to to think about each of these.
36:34
Story direct. So we have a destination register from which to store and an address where we want to store to,
36:39
which is held in the lower 19 zero to 19 bits of lower 20 bits here.
36:50
Execution second one we load from memory address.
36:56
We love the memory address. Register from the memory data. Register again, my other bit mosque.
37:00
That's the same as a lot. But we also load accumulated from the destination register at the same step.
37:05
Why? Because we then need to load the memory from a view of the shifter.
37:14
And why do we go? Why are the shifter? Because we can use, hold or unchanged in the shifter.
37:21
So this is simply our pulse from a into the memory.
37:25
So again, we're loading the address where we want stored to from again from the memory data register while the Bit Mosque,
37:30
because it's in these lower 20 bits here and we need to mask it.
37:37
Then we have in the memory address registered of the address we can store to the
37:42
same execution site and we can already also load a from the destination register.
37:47
And then in the second execution cycle and right into memory from a while, the shifter of the go back here to slide 11 and show you this.
37:53
So again, remember, please always remember the instructions after reading it from memory, both in EMDR and II.
38:05
But if you need to go via the MIT mosque here because we have a notice or direct,
38:12
we need to take it from me on in some way or we're loading into me or just like we did, followed.
38:18
But at the same moment in time, it can load from one of these registers into a because we need to go somehow from this register into the memory.
38:25
The past to go into memory is via a because we go into a use the shifter to do nothing,
38:35
so basically hold and then go year into memory address register.
38:43
Or respectively. No data register.
38:51
Not no data register, sorry, but into the memories are actually.
39:05
So we loaded memory address registered from the instruction we go from the register via a into the memory.
39:12
Back to our instruction set and.
39:23
Yeah, jump is easy, we just love the programme calendar from Memorial Day to register again,
39:29
of course, by the big malls as we're having direct programme control from them with data register.
39:35
Means that we go why a bit malls? Hence, we need it from me, not from air.
39:45
And we go into the programme kontomire this past year to set the programme counter to this new address.
39:51
Same for cars. Only that for coal, we also need to.
40:01
Do a little more so we have this load in the programme, can't from my yard.
40:10
But of course, we also need to increase the programme count by one for the return address, so we want to return to one.
40:14
Step one. Address ahead and then write this new address into the destination.
40:23
Register and saving three execution sections. Let's move on to indirect memory reference instructions and your number.
40:30
We're not using this lower 16 bit, but we're using but 16 to 19 for another register here such that we can.
40:39
No indirect. And we start with lower indirect,
40:53
and we will be seeing this is the longest instruction in terms of cycles we will be needing if all we have specified as it actually needs four cycles.
40:56
First, we load a from the source structure source register sorry two to go from source the register wire a into the memory editors register.
41:06
We know this now from previously. So this already takes two cycles simply to go from the source.
41:16
Register into the memory address register. This is actually going well.
41:22
I have a shift to withhold. And then we need to load memory data, register from the memory at that address to then be able to load the destination,
41:28
register from the memory data, register no mask as needed here, of course, but that takes about four cycles.
41:41
Storing direct reload aid from the source register load memory address registered from a savings,
41:49
but you're basically but then again, as in the or direct reload, a from the destination registered.
41:55
Why the shifter? And memory from a way of the shift to them, finally.
42:01
Do the actual storing.
42:09
And note that again, these two happened at the same moment in time, jump in direct reload aid from the source, register that first execution cycle.
42:12
And then the problem counter from a home.
42:22
That's easy because we don't need a return option and call in direct again, increase programme counter or increment it.
42:26
And at the same moment in time, load a from the source register.
42:33
Red, a red destination,
42:40
fetches a story from the programme counter that's our return address and then programme counter from a which we have prepared here, hear my shifter.
42:42
To register instructions. So you remember, these are, uh, arithmetic logical operations, we just pick a few examples here.
42:52
Move from one system to the other.
43:04
We first have to load aid from the source register and then destination register via the
43:09
shift from a sort of through two cycles and we load A and B from the respective registers.
43:15
We then load in the third step, the destination register from the early result.
43:23
So overriding. The destination register in a sort of a community's accumulation way from a yearly result.
43:33
And we execute at this moment in time and you addition of a and B and carrying people in zero.
43:46
And we also need to, at the same time, not, of course, carry from and see out.
43:54
Compare of two registers, reloads the registers into A and B,
44:00
and then we're interested only in the carry and not and anything else that's for then skip conditioner operations to be prepared.
44:06
So first we compare A and B, and then you could afterwards, conditionally skip.
44:18
So when we do this, of course, the value is set to a minus B and Kerry needs to be zero and then carry out will be the basis for the skipping.
44:27
And finally, almost finally, one register instructions and then we'll have the knowledge it's the ones who said,
44:38
let's do this very quickly now and you can look yourself in detail here.
44:45
A destination registered pretty easy. We have one cycle. The destination registers loaded from few results, but aliases such as zero out.
44:50
That way, we clear the register increment destination. Register Reload A.
45:00
From the destination register, we have to prepare B to be zero, so we're setting ale you two zero AUD then in the third execution,
45:09
so I could reload destination register from ale, you result and at that moment execute A-plus B and carry in one because we want to increment.
45:17
So we're making April zero plus one sort of overall. We also have to load carry.
45:25
Decrement basically the same principle, we load a we load B this time, whatever we said, a value to minus one out and then we load destination from.
45:32
You result. And, Kerry, from earlier you carry out and we said a just before the alien carrying zero, so basically we're doing a minus one.
45:47
Complement billowed a from the destination register for Willowdale you results and set
45:58
the area to the minus one end and then we do destination registration from the result.
46:06
So this is a view. To a exclusive or be.
46:12
To this complementing. Shift left, we load aid from the destination register and destination registered from the shift, setting it to your shift left.
46:19
And finally return to our destination, we load it from the destination register.
46:30
And then the programme conducted to the return after a call subroutine via the shift of you from from a.
46:37
So we need to shift to an unchanged tool to be able to load what we load into and to programme counter.
46:45
No registered instructions. That's easy. We only have a skip and no opposition member.
46:52
That's OK, skip, we have one cycle. We. So the programme counter or load of programme kind of from programme plus one to skip the next instruction.
46:59
The conditions given instructions could be positive,
47:13
Skip Negative also takes it's one execution cycle and may increment the programme counter depending on the arithmetic carry,
47:15
and the no up instruction doesn't even need one execution cycle and has no associated registered transfers because it doesn't nothing.
47:21
That was a lengthier lecture this time, but I hope it was exciting, too,
47:31
because you really saw how we define an instruction set in or a machine or instruction set.
47:38
And now in the very last thrilling episode, we will be designing the controller to relieve and realise, finally, our full fledged 32 bit processor.
47:44
Hope you had fun?
47:57