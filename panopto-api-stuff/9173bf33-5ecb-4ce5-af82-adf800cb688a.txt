ID: 9173bf33-5ecb-4ce5-af82-adf800cb688a
Title: idb-topic-12-datalog
Category: COMP40007 - Introduction to Databases (Autumn 2021-2022)
Lecturer: Peter McBrien
Date: 08/12/2021
In this topic, we look at the data lock language,
0:01
which is the language of databases that allows you to write logical countless expressions is connected to First Order logic,
0:04
and we would later on in the next topic show can be directly translated into less algebra.
0:12
Apart from giving you a way of writing logical queries over databases, it also forms the foundation for much of the relational database.
0:19
Theoretical work and many research projects and papers are based upon this language.
0:29
First of all, let's look at what is a data log database, and the difference from the normal tabular form of data is that in data log,
0:36
you represent information as extensional predicates that says you have the name of the product,
0:46
which corresponds to the table name and you have the values associated with attributes.
0:53
So we take the branch table, whereas in the relational database, we have sort code be named and cache as attributes.
0:58
We represent them as each tuple, having different values and notice.
1:06
There is actually no way of representing the names of the columns, and the position of the column indicates which attribute you are talking about.
1:11
So taking the entire bank branch database,
1:21
we can represent it as three branch titles representing the free current values of the branch table six account totals and nine movement protocols.
1:24
Then we can define rules as intentional protocols.
1:36
These are statements of that one predicate in the head can be defined as a logical combination of a number of particles in the body.
1:41
And the basic semantics is that if the body is true, then the head is true.
1:51
The head must be limited to be a single petticoat. The body can be any conjunction that is in and expression between a number of printed.
1:57
There are a few rules, and one very important one is that you cannot use the same name for both intentional and extent small predicates.
2:08
The convention, a common convention,
2:17
is that was and will adopt us in the course is that the start of the predicate name will be always with a small letter and the variables will of
2:19
question will start with a capital letter and the variable that only appears once can be replaced by an underscore and become a anonymous variable.
2:28
Let's give some simple examples of how we can write these rules.
2:39
This is the first rule sets that I can define any current accounts as being the accounts which have current the string in the time column position,
2:43
and hence I report back is going to count the number,
2:55
name and source code values ignoring right on the assumption that current accounts do not have an interest rate.
2:58
Most deposit accounts can be defined as four variables taken from the account table,
3:04
where again we are filtering down on the type being equal to deposits.
3:09
To give you an illustration of how we can use multiple petticoats,
3:16
we can define active customers as being a combination of sea name and B name where the B name appears in the branch table with sort source
3:19
code values where that source code value appears in the count table with the C name and the account number appears in the movement table.
3:28
Before moving on this to make sure we understand what is a valid data lock database on knowledge base and in these four examples of attacks,
3:42
not one of them is not valid. So the most popular answer is D, if in fact D is a valid thanks look knowledge base and B is the correct answer.
3:51
BS the invalid case because it breaks the rule that I cannot use the same name for a predicate as both an intentional and extensional relation.
4:08
So particularly here, if you look at mail, we have an intentional rule or intentional predicate that males are defined as
4:18
those where the end appears in the first position of being married to a predicate.
4:27
But also, I have a fact that now is the name Peter.
4:34
So this is an extension of what the first one and the third one is intentional predicate, both defined in the same name and therefore is not valid,
4:40
was D is completely valid and particular is not null, even though I haven't defined it yet is a valid predicate name.
4:49
And it's in fact a built in predicate which will tell you whether the M or F value in this particular case is a no value or not.
4:58
And then to work out the answer to a data query, we have to understand this idea of a model theoretic interpretation.
5:14
First, it seems quite hard once you have, the intuition is fact is very simple.
5:23
The minimum model for a petticoats is some assignment of the variables,
5:29
which has the properties that you cannot add extra ones without proving that they are invalid.
5:35
But also, you cannot add, but you can not add ones which are going to give you a correct answer.
5:42
So let's take an example.
5:51
Let's say I assigned to the number, name rate and sort code just one of one of McBrien five point two, five and six and seven.
5:53
This is not a minimum model because it implies that to count one one nine two two, so this 5.5 with 56 is false,
6:04
but in fact, it is true due to the call for deposit accounts I can define from the fifth line of the account protocol.
6:13
It's here that I have that assignment of variables.
6:22
If I went on and assigns next to one with one to seven and put a Vesalius and 4.5 as an interest rate,
6:27
it's not true because I could remove the last line and its model still be consistent.
6:34
Therefore, I can identify the combination of one two one and one one nine with the associated values is a minimum model.
6:42
Put it another way we simply look at when we go from head to body,
6:52
which instances of the body matching other intentional predicates or in this case, extensional.
6:58
Penticost will give me a true statement. In particular here we've got to posit or not match with the current values held in the second position,
7:04
and therefore it's just account 101 and one one nine that will be returned.
7:14
OK, let's try out a simple example. Finding a minimum model.
7:20
Most popular answer is D, and indeed, that is the correct answer, because if we go through,
7:33
we find our four accounts which have which will match the first printed cut in here,
7:39
that is account one one two three one two seven and one two five, but one two five is not found in the movement table,
7:45
and therefore I'm limited to return just one hundred one to three and one seven.
7:53
Usually takes lock is restricted to only use safe negation.
8:03
And in this course, we would be assuming that we have tightened lock with safe medication.
8:08
First of all, negation is achieved by putting this negation symbol in front of a predicate.
8:14
And that simply means that the predicate does not hold. So, for example,
8:20
I can define a dormant accounts as being any number that appears in the count table where that number does not appear in the movement table.
8:25
And for the current database sounds get back. A minimum model of dormant accounts is number one to five.
8:35
There's also rule about only using negation safely,
8:42
and that means that any variable that appears inside a negated predicate must also appear inside annunciated pentagons.
8:46
So inside this dormant account rule here I've got just a negation of movement with no appearing in sight and negation.
8:54
It does not appear in any other the of the rule and therefore is an example of an unsafe negation.
9:03
Now to try to quiz, to identify where we are using unsafe location.
9:14
And the most popular answer is D. Indeed, that is an example of an unsafe vacation.
9:25
Notice here type. Does not appear in the use of account here,
9:30
and therefore it's not sample of unsafe application because of the variable that appears inside immigration.
9:36
But nowhere does it appear that outside immigration. That's a couple of problems where we off use indication because quite often
9:42
mistakes and days later programmes are due to the incorrect use of negation.
9:53
So let's find out the minimum model for the query. I'm interested in finding out that the values of branch without recent dip in.
9:59
Most popular answer is C, but in fact, the answer is D.
10:14
This is an example of a programme that's buggy lookups.
10:19
First of all, this account with recent debit, there's only one account which matches the case that there is a movement which
10:24
has both a value less than zero and a T date after the 10th of the 1st 1999.
10:32
And that is account one 07. But if we look at this point to up here, this is checking that for each branch.
10:38
Is there an account where it is not true that this thing holds?
10:47
And of course, there would be at least one account found for each of the branches.
10:53
So no account one of seven holds for account for every cent of it.
10:59
The other accounts at source code 56 do not hold and therefore all the branches overturned by a branch without me debit.
11:05
That's try a different programme. And here the most popular answer is C. And now it is the correct answer.
11:17
Because in essence, this programme is now being corrected, such as its name implies correctly, the result.
11:31
So here this will return soap.
11:38
Suppose if there is any account at a particular source code which has had a recent debit,
11:42
so this will hold for just Saltcoats that 56 and none of the others.
11:49
And that means when I go through all the different branches,
11:54
the only one that fails to return is sort code 56 and hence like a huge breach and strand.
11:57