ID: 78e60744-a257-4d84-a41f-adf800cab0af
Title: idb-topic-02-ra-primitives
Category: COMP40007 - Introduction to Databases (Autumn 2021-2022)
Lecturer: Peter McBrien
Date: 08/12/2021
The relation of algebra gives you a way of querying the relational model of data held in the relational model.
0:01
In this topic, going to focus on the five primitive operators of completion algebra,
0:09
the primitive in the sense of the give you everything you need in order to express classical first order logic.
0:14
From a practical point of view,
0:22
you can say that this gives you the capability to ask a very wide range of queries and in particular from these five primitive operators.
0:24
You get to find many other useful operators, which would be the subject of the next topic.
0:33
All the operators take as inputs relations the first two projects and select taking one relation,
0:39
and therefore they're called ordinary operators and the other three Cartesian product union and difference are binary
0:47
options to a process because they take in as input to relations and they all produce a relation as to output.
0:54
And this makes the relation output write eloquent because in essence,
1:02
the output of any operator can be fed as input to another operator with a few caveats which all come onto to later.
1:05
Let's look at the first operator, which is called Project, and is often written as the Greek character Pi.
1:16
And if I've got a table such as the account table, I can remove certain columns and project out certain columns using this operator.
1:25
So I project the number and type from the account table.
1:35
I in essence lose the C name rates and sort code columns and end up with a query
1:39
result from the query as a new table with just a number and type columns.
1:45
When I do projection, it's possible that I will lose inverted commas some rows if I project source
1:52
code for my account because the source code of value is repeated on some rows.
1:58
I will not get repeated values in the output to remember the relation is a set based construct and therefore the
2:04
67 value that appears in the first two rows is returned just once in the output of projects or code from account.
2:11
And the 56 that appears in the last three rows of Account two is again only produced once in the output of projects or code from account.
2:18
The select operator of Mettam of the Greek Sigma character gives me a certain rose from the table, and this requires that I give it a petticoat,
2:30
a mathematical statement that should evaluate to true or false,
2:40
and the select operator will return all those rose or tuples from the account table, which they predict returns truthful.
2:44
So if I select the is greater than greater than zero from the account table
2:54
and go through the different rows is not going to be true for the first row,
2:59
but it is true for the second row and it is true for the fifth row.
3:04
And therefore those two rows are returned as an output from the select operator.
3:08
So Project gives me certain columns and so that gives me certain rows from the table.
3:14
Let's move on to the binary operators in the first of them, product or Cartesian products,
3:23
give his first name, gives me all pairings of the columns from the two tables.
3:28
So let's take the table unaltered and let's take the result of the previous query select
3:34
rate greater than zero from a count as another table and to show the elegance of the index.
3:42
Now I'm now using this as input to the project, the product operator.
3:47
So what this does is gives me all pairings from the two tables.
3:54
So I have three rows in this branch table and two rows in select right greater than zero from the count,
3:57
and therefore I have six rows in the output from it.
4:05
And here you'll notice that 56 Wimbledon and ninety four thousand as a row from the branch table appears twice, once paired with Account 101.
4:09
And once paired with one one nine and simulate.
4:20
The remaining two rows of the branch table appear twice each time, paired with one two one and one one nine.
4:23
The Cossack code appears in both tables.
4:31
Is going to appear here as sort code from the account table of the right and so close to the branch table from the left,
4:33
and I will use the school type method of disambiguate in such common names.
4:42
I'm able to refer to branch to source code to disambiguate that I'm talking about the left hand value and account of sort code to disintegrate.
4:48
I'm talking about the right hand value where I have such ambiguous, ambiguous column references.
4:58
Let's try out a quiz where I'm asking a relational algebra query,
5:07
and the question is which one of these queries are going to give me the names of branches that have deposit accounts?
5:12
And the most popular answer was B when asked previously, though, both C and D were quite popular, but B is the correct answer.
5:27
And C and D fail to be correct because they're using the Cartesian product to find all pairings between branch and account.
5:36
But they make no action or no effort to join the two tables together where the Saltcoats match.
5:46
So I end up with both in both C and D looking at accounts matched or pay it off with branches which do not necessarily correspond with each other.
5:54
Introducing the extra constraint here the of source code equals the branch to source code means are
6:05
only work in that rows where the account actually belongs to branch in order to choose those forms,
6:11
which was type deposit. So I've introduced now three of the relation algebra primitive operators,
6:17
and they form a quite useful subset of the language called Select Project Join Occurring.
6:28
And the basic select from where that will look at in escrow later on, of course,
6:35
are based on implementing these select project join operators and the nature of a select project.
6:41
Join is a former Cartesian product between tables.
6:48
I then select Rose and include some join between them to make sure that the different pros correspond to each other in some way.
6:53
And finally, a project off the attributes that I need for a particular query.
7:02
Well, this is a query pattern to use in relation to algebra.
7:07
So if I want to find branches with current accounts while I form the pairing of branch and accounts and I join them together on the source code,
7:11
the foreign key that goes between accounts and the branch. So I find accounts with their corresponding branch.
7:22
I look at ones which have the type equals current because I'm interested in
7:29
current accounts and at the end I project the attributes that I'm interested in,
7:33
having returned to me as a result. That's now cover the last to relearn how to operate as the first one union does a simple,
7:38
set based union between the values of that found in two locations.
7:50
So let's suppose I've got two Curry's project queries, one of which gives me the count table sort codes and has renamed them to be it.
7:55
So I end up at the table with an idea, a column with six, seven, 34 and 56 the values that they are Saltcoats in account.
8:05
And the second one looks at the account table again, and this time projects the number as I do.
8:13
So I end up with the different account numbers as different values of the idea then is aren't union the two together?
8:19
I get a list of the numbers that have been used as sort codes or as account numbers inside the database.
8:26
For union to work, the relations must be union compatible.
8:33
They must have the same number, name and type of columns in the two tables that are union together.
8:37
So if one table had two columns in the other table had just one column, they wouldn't be union compatible and I couldn't using them together.
8:45
And if one table contained strings for it and that one contained integers, I wouldn't be able to use them together.
8:52
The last operator is asset based difference operator is written minus,
9:01
and it means that I'm taking the contents of the right hand set away from the left hand set.
9:06
So if I projects the account numbers that appear in the account table, I get a list of oldest and account numbers as exist.
9:13
If I project away the number from the protect, the number from movement.
9:21
I get a list of the account numbers for which movements have occurred.
9:26
And then if I do a difference between the two,
9:30
I find that one two five is the only account for which the account has been created and is in the account table,
9:32
but for which no movements have occurred. And just like the union operator, the two tables that I'm using in the difference must match in the name,
9:39
number and type of columns, i.e. they must be union compatible.
9:48
So almost without restriction, I combined together the different relation lounge operators provided, I'm making sure that I obey these two rules.
9:56
The output of a nested operator must contain the attributes required by any projection or selection
10:08
which it appears in and the inputs of a union or difference must contain the same number,
10:15
name and type of attributes to make them union compatible. Now I've got a well-formed relationship to query.
10:21
So this quiz question looks at some queries. And one of those listed below is, well, food.
10:30
And Sea is the most popular answer for in this Quest Quest.
10:44
Quiz questions one before and seasoned deed the correct answer.
10:48
If I look at a B and D, I can show you, I'll tell you why they are not well formed for a I project out the number from a count table,
10:53
so I have from the inner part of the query. A table has just a no column and nothing else.
11:04
Of course, then I'm on air or select type equals current because there is no type column in the output of the project number from account for B.
11:10
I've got a one column in the left hand side of the difference and two columns in the right hand side of the
11:20
difference and therefore the the input is not union compatible and so difference cannot be operated and funded for D.
11:27
Similar to a, the inner query is producing a table where the attributes are missing for the output operator.
11:37
In this case, I produced a table containing correlation containing just type from the inner type from account,
11:43
which I can not then project the number from.
11:50
All right, you have enough information now to perform the first worksheet, which is an exercise in using the primitive relational algebra operators.
11:56