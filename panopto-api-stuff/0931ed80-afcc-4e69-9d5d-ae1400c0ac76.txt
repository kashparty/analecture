ID: 0931ed80-afcc-4e69-9d5d-ae1400c0ac76
Title: K2J - 8 : Java Collections
Category: KotlinToJava
Lecturer: Robert Chatley
Date: 05/01/2022
In this section, we're going to have a look at some of the basic collection types in Java and see
0:05
what similarities and what differences they have with collections in codling.
0:10
So here's a first example, just using a simple list we've seen before how to construct a list in this way.
0:20
So we're using here the list of static method in order to create a list.
0:26
And here we're making a list of strings iterating over the elements and just printing out each one.
0:31
Now, let's see what happens if we add something extra onto this list so we can call the out method on list.
0:47
We can add another name. But then if we run the programme, you'll see that we get an exemption.
0:55
And in this case, we get an exception in the sense that this is an unsupported operation for immutable Connexions,
1:12
we've tried to add something to an immutable creation and it's failed at runtime.
1:19
So this is interesting because it's different from in in and we have a specific type for immutable collections.
1:25
And that meant that it wasn't even possible for us to write this line of code.
1:32
It wouldn't compile, but in Java,
1:36
we can write and compile this line and it fails at runtime because we're trying to apply the ad operation to a collection,
1:39
which is immutable because the list of gives us an immutable list.
1:46
And in fact, you can see here that intelligence is giving us a hint about that immutable object is modified.
1:51
But that's just something extra that intelligence doing for us to help us out.
1:57
The compiler actually would allow it, as we've just seen.
2:01
So let's see how we can make it so that we can actually mutate this list instead of creating an immutable list.
2:06
There's no mutable list of top level function or static method,
2:12
but instead we can create something all the time ArrayList and that should give us a minute to list.
2:17
So this will be an array list of strings. Starts off being empty, and then we should be able to add George to it.
2:24
You can see that the warning has gone away. And now this programme runs, OK, if you want to initialise the list with some initial elements.
2:32
What we can do is to pass into the constructor another collection.
2:46
So here actually I could use that immutable list and then I can pass that in.
2:50
And in that point, then the array list is initialised with the contents of this list, but it's a mutable list and so I can still at George.
2:59
One more thing that you can see here is that now the string in angle brackets has turned light grey.
3:14
This is because Java's Type Conference can figure out that this must be an array list
3:20
of strings because we are initialising it with a list which is called strings in it.
3:25
Therefore, we don't have to specify this explicitly.
3:29
We can actually omit the Typekit can see the intelligence suggesting we might want to replace this with what's called the diamond operator,
3:32
which just says this is a list of a particular type. But I don't need to write what type it is because that can be conferred by the compiler.
3:39
Let's just run our programme once again.
3:47
If you saw this example in some old the Java code, you'd probably have a list of string on the left hand side rather than final volume.
3:56
But the operation is the same either way around. Now, let's have a look at cents.
4:05
So again, we can use set off to create this and immutable sense.
4:22
And again, we're getting this warning that says we can't modify an immutable sex, so let's just come this line for a moment.
4:33
And then if we do want to make this into a immutable set so that we can add extra elements,
4:49
then we can do the same thing by wrapping this image sex in a mutable set using this set of values just to initialise our
4:54
sense that we actually make something of a different type and the most common type of set to use would be a hash set.
5:04
And again, if I want to, I can initialise it by passing in another sense, and then I can change this to a diamond.
5:18
Now, a key property of sex is that they don't contain duplicate elements, so we ask Alice again and then run this programme.
5:35
We'll see that the Senate actually only contains three things rather than four.
5:47
It's also interesting to note that the order that things are printed in is not necessarily related to the order that they are inserted.
5:54
So perhaps that's the iteration order is not guaranteed.
6:03
He will just get an iteration in some order over the contents, whereas for a list, that's an ordered structure.
6:07
The third type of collection that we used in Kopplin was a map, and we can use maps in Java, too.
6:20
So when we have a map, we have an association between keys and values.
6:27
So we might have people's names and their ages.
6:32
So let's make a map of names two ages.
6:36
So if I want an immutable map, then I can say map of and then I'm going to pass in key value, key value.
6:45
So let's say Alice is 22 and Bob is 28.
6:53
Glenn, if I want to retrieve something from the map, then I can use get in passing a key.
7:06
And it's also possible to look at all of the keys so we can get a sense of the keys or all of the values and get a connexion with the families.
7:36
And then I could write a loop over the keys or enter the values.
7:47
If I want to update the map, then again, I need a mutable map rather than this immutable type.
7:56
So again, we would create a new hash map.
8:01
Hash map is the most common type of map in Java, and this needs to type parameters one for the key and one for the value.
8:05
So this one is a map from string to integer.
8:12
Now I have something where I can put into the map.
8:20
And our programme runs this before.
8:40