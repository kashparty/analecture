ID: d1f12007-7899-4ac1-ab07-adee014bbca8
Title: Kotlin - s3e2 - Collections: Maps
Category: Week3
Lecturer: Robert Chatley
Date: 28/11/2021
Another useful data structure that you'll probably use a lot when programming in Kotlin or Java is a map.
0:04
A map is a structure that associates two different sets of values.
0:10
And if you've programmed in Python before and used a dictionary, then it's a very similar idea.
0:14
In Scotland, we have two different types of map,
0:22
as we've had two different types of list and set the Read-Only maps and later we'll see the mutable maps.
0:24
With a read only map, we can think of it as holding a set of pairs of values and it holds an association between them.
0:34
So if we want to construct a map, we use a familiar function call as we have done with other collections.
0:43
And in this case, rather than just passing in a single set of values, we pass in a set of paths.
0:51
And so this is how we form the association between one set and the other.
0:56
So here in this example, we have a set of different student grades.
1:00
We have the totals of how many students got each of these grades for a particular exercise.
1:05
Inside the map, we can consider these to be two separate sets.
1:14
One set of what we call keys and another set of values.
1:18
And because the map holds an association from key to value, if we have a particular key, then we can use that to look up the associated value.
1:24
To do that on a map, we could use the get method and pass in a particular key or the square brackets notation as we've used to index arrays or lists.
1:34
In this case, what that's going to do is to find the key a when it's going to look up the associated value and return the value.
1:45
When we think about the type of the list, we would say this is a list of string to integer because the keys are strings and the values are integers.
1:55
If we have a key that is a string and we use it to look up in the map, we're going to get an integer back.
2:04
As well as the Read-Only Max,
2:14
we have the possibility to use multiple maps where we can mutate the state and update the data over the course of the execution at the programme.
2:15
So as you might guess, by now, we create one of these using a colt immutable map of how we can passing the data in the same way as we did before.
2:24
And that will construct us a map. But when we have a mutable map, then we can have an extra method that we can call,
2:31
which is put, and that allows us to update the data associated with a particular key.
2:38
So in this case, when we put a 42, we're not going to add a new A with a value 42.
2:44
We're going to update the association with the Kia. Keys are unique and so will replace 41 with 42 in this case.
2:51
If we use the square brackets notation and an assignment to say that grades A equals 42, that will just do exactly the same thing.
3:03
If we use the put method or the square brackets for a key that's not currently present in the map,
3:16
then that will add to the map and add a new association. So in this case, the would be added as a key and nine would be added as its associated value.
3:22
And then from then on, we could look up Key D and get back nine.
3:31
Sometimes it's useful for us to be able to extract all of the keys, all of the values from the map and then process them in a different way.
3:40
So if we want to get hold of all of the keys, then the map has the property keys,
3:49
which will retain its assets, and that sets tight will be dependent on the type of the keys.
3:54
So in our case here, the grades map has strings as keys.
3:59
And so when we ask for grades keys, we're going to get a set of strings back and then we could process that like any other set.
4:04
Similarly, we could extract the set of values, and so if we want to get all of the values from the map,
4:15
we can use the values property and that will give us a different set.
4:22
And that set will have a different type because in this case, we have integer values.
4:26
So if we get the set of values, we'll get a set of integers that includes all of these values.
4:30
Sometimes it's useful for us to be able to extract the data from the map in pairs so that we maintain the association.
4:41
But perhaps we want to iterate through all of the paths and process each pair in 10 if
4:48
we want to do that and we can think about it in terms of the entries within the map.
4:53
So the map has a property dot entries, which is going to return as a set of map entries from string to integer.
4:57
A map entry is very similar to a pair, but where a pair has a first and a second element.
5:08
A map entry has a key and a value because that's how we describe the entries in the map.
5:14
Interestingly, and perhaps somewhat confusingly, it's also possible to map a map, so our great map has a method dot map,
5:24
which can take a function which will process the entries in our map to produce a list of values.
5:33
This can be a little bit difficult to get your head around. But here's an example.
5:42
So if we have the map grades and we call the method map passing in a lambda function, which is going to process a single entry.
5:46
And in this case, what we're going to do is to extract the value from that entry.
5:55
So for the entry shown here, we extracted just the value. 23.
6:00
That's the return value of the Lambda.
6:04
So the map function is going to apply this to each of the entries and produces a list containing all of the resulting values.
6:08
So in this case, a list of integers.
6:15
We could also do a transformation here if we wanted to add one onto each of these, or we wanted to look it up and cross-references in another table.
6:19
We could do that during this map transformation as well.
6:27
So when we map the map, we're going to process all of the entries and produce a list of the output.
6:31
Sometimes you might want to process the map and transform it, but producing another map, keeping the association between keys and values.
6:41
For example, if we want to transform the values but keep them held within a map, we can use a map values transformation.
6:50
So our map has a method map values, which again takes a function which is going to process an entry.
6:58
And it's going to produce a single value. And this is going to be a value for an entry in a new map.
7:06
But keeping the key from the previous one. So here,
7:11
if we want to take our 23 people who got an eight star and convert that into 14 percent of people got a nice out by calling the percentage function,
7:16
which we can imagine is defined. And then we want to build a new map, which maps from a star to 14 percent.
7:25
Then we can do that by transforming the grades map by calling map values, providing a lambda function which processes the entries,
7:33
and for each entry, producing a new value and then map values will package that back together into a new map.
7:41
Similarly, if we want to process the keys and transport knows but keep the association to the current set of values, then we can use dot map keys.
7:52
Again, we need to provide a function to transform each entry.
8:02
And we're going to transform, in this case, the value of the key so that instead of a letter grade, we get some comment on how good the work was.
8:06
But we still want to keep the association to the number of people who got that comment.
8:14
So in this case, we're going to map keys. We're going to provide a function that does that transformation on each entry, producing just the key.
8:19
But the Machis method is going to build us a map that keeps the association and keeps the original values, and that will be the outputs.
8:28
So some of these transformations are a little bit more sophisticated and you might not use them every day,
8:40
but they can be very useful in trying to keep a functional approach and build up more
8:45
sophisticated data transformations as we build more sophisticated applications.
8:50
We could also achieve a lot of the same things by writing loops and processing the keys or the values,
8:57
but following the functional approach tends to give us a cleaner and more concise solution.
9:03