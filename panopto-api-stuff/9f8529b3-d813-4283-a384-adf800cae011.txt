ID: 9f8529b3-d813-4283-a384-adf800cae011
Title: idb-topic-06-sql-bags-and-sets
Category: COMP40007 - Introduction to Databases (Autumn 2021-2022)
Lecturer: Peter McBrien
Date: 08/12/2021
In this topic, we built upon the basic idea of how Eskimo influenced the relation eligible to look at
0:01
how a squirrel provides both bank based and set base semantics when executing queries.
0:08
Let's consider an example to make this clear. If I execute the squirrel query, select source code from accounts,
0:16
it gives me an answer which is approximately the same as projects source code from accounts.
0:23
In that it list Saltcoats from the account table, but with duplicates,
0:29
and you'll recall that the Russian algebras asset set language and of course, sets do not contain duplicates.
0:34
In fact, what we have here is a bag answer that is a set and unordered, a collection of items where there can be duplicates.
0:41
If I want to guess an exact implementation of the Squirrel project, you have to implement select distinct sort code from account.
0:51
You might think it quotes the squirrel should not by default, produce a relational set,
1:02
as his answer when is set out from the very start to be an implementation of the array.
1:08
This is because originally a skills developed back in the late 1970s,
1:15
where computers were much slower and also much less sophisticated about analysing queries to determine when and when not to eliminate duplicates.
1:20
And therefore the default behaviour was to make no attempt to remove duplicates.
1:33
To increase the speed of query processing.
1:38
So we have the odd situation to fork behaviour of a squirrel is to produce bag based answers and not set pace to answers.
1:42
In fact, more recent, Squirrel has had it on the ole keyword to make explicit that you want to have a bank based answers.
1:54
But by default, the all is assumed and therefore it's rarely used in practise.
2:02
Now, let's consider a few queries and also work out which one of them requires the use of
2:12
distinct in order to avoid the possibility of a bank based answer being produced.
2:20
And it's important to note if they've got a schema and some definitions of keys.
2:26
You'll notice from the Petersons that deal was the most popular answer, and indeed that is the correct answer for the current state of the database.
2:38
In the examples I've been giving you all for, queries would give answers which do not involve duplicates, but D will not produce a set based answer.
2:48
If there were two branches with the same cache figure because there's no effort here to remove duplicates,
3:01
and it's quite possible that two branches could have the same cache figure at one time.
3:08
If I consider Query A because it selects all the attributes, it will include the key attribute,
3:14
source code and therefore course that cannot be any two rows with the same sort code.
3:20
And so this will not contain duplicates. Select source code, of course, does not contain duplicates.
3:26
This is just the key and select B. Naming cache cannot contain duplicates because the B name is also a key field.
3:31
Now, let's consider solving the same problem where we have a joint involved.
3:42
B is the most popular answer here, and it is the correct answer.
3:59
If we consider what we are returning in Query B, we have sort code, type and right.
4:05
And when we do a natural joint between branch and to count, we can get multiple rows containing the same branch,
4:12
joining on to different accounts and therefore the same branch sort code can occur multiple times.
4:20
And it's possible that you could have the same type of account appear more than once at the same branch without the same rate.
4:26
Again, the current data values you have in the Example database do not produce duplicates,
4:34
so query B, but to be possible, some updates to the database would lead it to produce duplicates.
4:40
Query a because it returns. All columns contains the combination of the keys from the two tables b name and number
4:47
and therefore cannot contain duplicates and query C simply reduces is down to contained.
4:55
So code and number by themselves. The key of the two tables and so in the Cartesian product cannot produce duplicates and
5:02
finally query D at on cache to the two keys and therefore a gain cannot produce duplicates.
5:10
We already looked at select the question here is which of these relations triggers can produce a bank result?
5:21
If the implementation of the operator did not check for duplicates?
5:30
Be here is the most popular answer, and it is the correct answer.
5:48
If I union together to relations, there could be a row in Ah,
5:54
which is the same as the Broken S. And therefore naive implantation of the union would produce an output which had to the same row appearing twice.
6:00
If I am selecting Rose from AH, and if it starts off being set, then of course reducing the number of rows and it must lead to a set afterwards.
6:10
Similarly, taking away as small if we start with an R, not containing duplicates will lead to the result not containing duplicates.
6:19
And if I Cartesian product to things not containing duplicates, the Cartesian product will contain no duplicate rows.
6:29
So this leads to the following options being available in a school.
6:38
There is no distinct associated with the where or from keywords.
6:43
But there is available with the union intersect and accept operators.
6:48
Strangely enough, the default behaviour of Union Accept an intersect is not the old semantics i.e. back semantics, but instead to do set semantics.
6:55
The reason by why this is that by the time these operators were introduced later on in the development of their school,
7:07
the speed of processing had increased sufficiently such that it wasn't necessary to worry so
7:15
much about the overhead of removing duplicates and therefore the natural algebra to thought,
7:20
which is to use distinct, was taken for these operators.
7:28
So you simply need to remember that the default behaviour of select is to give back semantics,
7:32
i.e. to use all and the default behaviour of union except and intersect is to have set based semantics.
7:38
Thus, we lead to the exact equivalence between select from where and the relation Altra,
7:54
we need the distinct keyword to be in place to in general be able to equate between the project,
8:01
select Cartesian product and the select from where statement you can omit the distinct.
8:08
If you know that the combination of the attributes here cover the key or you want to have a bag based answer,
8:15
I see what the same thing appears more than once.
8:23
Let's try out a couple of quick questions involving sex.
8:29
First of all, let's start off with the expression shown on the left to and determine what its the answer is.
8:33
The most popular answer is D and indeed D is the correct answer option B B on here.
8:47
The reason why that is is that when I project the select number for movement, I'm going to take away the account numbers here.
8:55
And of course, each of the movements that appear here will also appear in the account table and therefore I get the empty result.
9:04
Now, this has changed the query to say acceptable. From a previous execution, see was the most popular answer, and that is the correct answer.
9:21
The reason for that is that we now adopt bank based semantics for the select statements and for the Accept statement.
9:33
So considering first of all, 100, we say, appears three times in the movement table.
9:41
So if I take that as a bag, it contains free instances of 100.
9:48
I take away one instance of 100 from the account table and therefore I'm left with two instances
9:52
of 100 in the result from count one two one appears twice in the original measurement table.
9:58
I take away one instance of it on the left with one instance the count one two three.
10:06
It appears once in the movement table, and I take away one instance I'm left with no instances and so on for the other values.
10:12
Now, if enough information to the worksheet on translating between the relation now and ask you out.
10:22