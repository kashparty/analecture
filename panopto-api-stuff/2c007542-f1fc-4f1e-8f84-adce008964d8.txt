ID: 2c007542-f1fc-4f1e-8f84-adce008964d8
Title: L06 - Combinational circuit design (part 1)
Category: COMP40001 - Introduction to Computer Systems (Autumn 2021-2022)
Lecturer: Lluis Vilanova
Date: 27/10/2021
Hello and welcome to our second lecture in introduction to compare systems and
0:08
what we're going to see in this time is more about combinatorial circuit design.
0:13
So remember that we learnt about two stable's billion equations, no maps and how they relate.
0:19
So we know now how we can go back and forth between circuits and truth tables and maps in in any order.
0:26
And what we are going to see is how to put them together in a systematic way so that we can solve problems.
0:34
So we are going to be, again, creating circuits from two tables.
0:40
We are going to use control maps to make circuits,
0:44
and we are going to work through a design exercise that is much similar as what you are going to be doing later.
0:47
So let's start by saying what we know so far, so as I was just saying,
0:57
we know how to analyse and transform circuits using different forms of representation.
1:05
So we know how, given a given how given a circuit we can find, it's true stable.
1:11
And from that, how to get a boolean equation and given a boolean equation.
1:18
We also know how to simplify it. So the whole purpose of circuit design is to bring all of this knowledge that we have to work together,
1:24
so we are going to start with the description of a circuit,
1:36
formalise it by creating a stable and then designing the electronic circuit that implements it.
1:40
And what's important to note here is that the solution of this process is not unique.
1:48
And we will look at some techniques.
1:53
So to reach what the best solution and in this case best is not really defined here because we could say that the best is the one,
1:56
the circuit that would consume less energy or the circuit that would consume the
2:09
occupy the smallest possible area or the circuit that would go as fast as possible.
2:15
So here, when we say best, we have to define what it means.
2:21
Exactly. That's why, for example, people working in circuit design, they will often refer to a formula called energy delay product,
2:25
because this means that they care about both the energy consumed by the circuit and how fast it goes.
2:35
What's the latency of executing an operation? And some other people will look at different metrics.
2:42
Another common one, for example, is what is called Energy DeLay Square, where you are giving the delay part a square more importance in this formula.
2:48
We are going to be using this formula, but it is important to know that when people are optimising or looking for the best circuit,
2:59
they are looking for different things according to their use cases.
3:07
So we are going to define here a methodological approach so that we can create a truth table,
3:12
given a description, there are two approaches that will always work to create a circuit.
3:22
From that, we can synthesise a circuit using mean terms so that we are going to work together all the time in terms that define.
3:29
And I would put this one in the table or conversely or Dualeh, because we can use the symptoms,
3:39
we can synthesise a circuit using the vaccine because we are going to be basically adding together the maximums,
3:48
defining the zeroes in this truth table.
3:53
So let's start by refreshing this, not the heart of sentences via winter, so here we have I have only an equation.
3:58
And also a circuit that implements the same first thing that we are going to do when
4:12
starting from either of these two is built a truth table that we are driving from this.
4:15
So remember, we are going to put all the inputs and columns and then one final column with the output.
4:22
And we just need to do all the possible combinations of the inputs and calculate what the output will be given an equation or a circuit.
4:30
Now, what we are going to do is look for all the possible Mintern, so remember, I mean, term is a term where the output is one.
4:40
So we are going to be looking for all the ones and then we're going to circle them to get all these minimal terms.
4:50
So here we have the example of terrorism defying each of the terms we have, for example, A is zero zero and this one.
4:59
So this would be not A, not B and C, then we would agree with a next combination in combination that gives us one as an output.
5:08
So we would have not A and B and C and so forth.
5:20
And given this, we would have an equation that we already know is not the best one, but it will always work in this case.
5:24
We can implement a chip or we can build it to manufacture it.
5:33
And it would implement exactly the boolean equation that we gave it initially
5:38
from which we built up to stable and then thereafter the canonical minturn form.
5:46
And it will implement exactly that equation. Now, another thing we can do is looking at the mixups,
5:53
so remember looking for the terms we are looking instead of four ones, we're looking for syrup's so.
6:03
Anything any of the input combinations that gives us a zero, we are going to put it on the box there.
6:09
Equation idea. So we take each of the maxims here by identifying all the zeros and again, remember,
6:20
we are looking in this case in Minton's, we were looking for ones like here.
6:27
This is not a and not be seen.
6:34
But in the case of Maxime's, we are looking for zeros. So these would be the case where the output is zero is when eight is zero.
6:38
Or be zero or zero, so A or B or C and A or not B or C, I'm not A or B or C,
6:47
so now we already know how to do the canonical minturn form and the canonical
6:59
maximum for each of which gives us an equation that has one single output.
7:07
R And if we implement this will an equation, we are going to have exactly that functionality.
7:11
And this is exactly what programmable gate the do, so it's a very simple way to implement a circuit using metre and maximum force canonical forms.
7:19
And of course, we already know that this is not the best circuit we can design.
7:34
But this is an interesting way to look at it because it is actually used in the real world.
7:40
If we want to produce a tape that is that the best possible solution, we have to send it out to a foundry who will do it as long as we pay enough.
7:46
And that is usually a really large amount of money.
7:57
So what we can do instead is use what it's called, what it's called, a few permeable Gayathri, which provide something like what we see here.
8:01
It has all the possible inputs, both in its positive and negative form.
8:11
And it has an end in this case for me in terms of every possible combination of these inputs,
8:18
so imagine here that we would have every single one of them.
8:28
Now, what we want to implement a specific canonical mid-term form, the one that we obtain over here.
8:31
What we would do is select each of these possible bands,
8:42
that would be one of the terms in the formula and we will switch it on connecting it out into this or.
8:46
So in this case, by selecting the ones that correspond to the equation we want to implement,
8:57
we are in fact having this kind of generic gates are real gates that we connect together only as we
9:03
as we want on those midterms that we are interested in to implement the logic equation that we want.
9:14
So, of course, this is not as efficient because as we said, there are smaller and faster ways to implement it.
9:22
And we are really very briefly looked at to minimise the circuits.
9:29
But it's a very it's a very good solution when we want to prototype a circuit without
9:35
having to go on the very long and expensive process of advocating for cheap,
9:41
we can just get an FPGA programme to set the street exactly what we want it and then we can run it.
9:47
And of course, this is much more efficient than running it on a general-purpose bill,
9:56
because after all, this is hardware that is very closely following a specific boolean equation.
10:00
So it's an intermediate solution between running a general purpose called the CPU and having a full async design that we send to a.
10:07
And of course, the same we could do with maxims, with the right combination of Skate's.
10:21
Now, I'm going to go deeper into how Burma will work through Burma, will get a raise,
10:29
but it's useful to know that they exist to provide this intermediate solution and they work with the most simple form that we know of,
10:37
expressing a using the economical form. So as I was just saying,
10:45
they are a perfect way to create a prototype designs very quickly and efficiently
10:52
without going through that very long and expensive process of fabricating a chip.
10:56
But however, they lack flexibility, you want to get specific patterns of gains and connexions.
11:02
So if you have many more input signals that it supports, then you have to subdivide the problem into smaller ones and then connect them together.
11:10
You have limited resources in terms of delegates and lawyers and so forth.
11:20
And of course, as I was just saying, using a canonical form means that there is no optimisation that we can apply on speed or circuit size.
11:27
But again, it's a very good intermediate solution for some use cases.
11:39
And if you ever go later into working in chip design,
11:43
you will most probably be using FPGA as an intermediate point in the process of designing a chip.
11:50
So what we also talked about in previous lectures is from minimisation, so that.
12:00
Once we have a stable instead of just generating economical form,
12:10
what we can do is factor out a simpler or smaller volume equation that will still implement these these initial problems that we started with.
12:17
So the general idea here is, again, to get a better circuit rather than just going with the simpler canonical for.
12:29
Now, we are going to be looking at the maps because they are very simple to use visual aid in doing this simplification, but in an industry,
12:41
there's many very expensive tools that apply in different algorithmic methods that will start from this economic reforms
12:52
and will find a minimal circuit in a way that is much better than what we can do with Purnomo that we will be discussing.
13:01
All these are all that we are going to be applying is kind of a minimisation that we have already seen.
13:10
And we will now refresh very briefly and also some additional simplification steps to try to make it to try to make the circuit better.
13:17
But of course, there's much more sophisticated tools, as I was just saying, that are designed to or doing just this one task.
13:30
So what we're going to do with the maps just to refresh,
13:42
is we are going to have all the inputs in rows of columns and then we are going to sit
13:47
inside this table that the output of of that we initially had on that table over here.
13:54
So we are basically. Translating these into these, then circling the wagons in case of.
14:03
Looking for a movie, factorisation, and then we get the final volume equation.
14:13
So just to remember, we are going to be circling here.
14:22
Empowers us, too. So this is the way to and this is to win and then we get each of the factories.
14:27
So what we are looking for in here is those inputs that are changing and not changing inside each of the circle.
14:35
So in this case, A is not changing its fixed way. So we write A and also B is not changing, which is.
14:46
On this one, but we're here, so we write it down in here and in this other case,
14:55
A takes all the possible values so we don't care about how we factor in here.
15:04
And we also take all the possible values on one.
15:11
And the only one that is fixed in this circle is see.
15:15
And therefore, that's right. As the simplified. Colonel result.
15:19
So we would have this equation over here as the result of applying that technique to minimise this.
15:29
And we've already done that, such as being in a circuit for.
15:36
So as I was saying, we can also try minimising using systems and sometimes this will provide better circuit than minimising the midterms.
15:43
And again, like with Maxime's instead of. We are going to be circling in the case of Max, terms of the zeros that like together in this case,
15:58
a member is a group of two that wraps around the table and then this is another group of two.
16:11
So we write them as such.
16:19
And remember that this is an all of the terms and then we are banding together of this intermediate result in terms of each of the samples.
16:23
And as I was saying in this case, this is this circuit is not better or smaller than the previous one using mean terms, but sometimes it can be.
16:36
And these because as I was saying in the beginning, Corona is an approximation to minimising a circuit,
16:48
but it's not necessarily the best solution, but it's most of the case.
16:55
And for what we care about, it's good enough. And that's why this is the technique that we are going to be using in these first.
17:01
So remember that either in terms of our maximums, using crops could yield a better result.
17:10
We never know ahead of time. We have to basically try to know which way is the best solution.
17:19
And also remember that sometimes by rearranging the columns, we could have better monetisations.
17:27
So, again, as I was just saying, all mobs are not promised that we will get the better service, but it's usually a good enough approximation.
17:34
So with this, we reached the end of the first part and what we are going to do in the next one is step by step example,
17:43
using all these tools together. So with this, I'll see you in the next five.
17:51