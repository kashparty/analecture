ID: fb970f47-a1b0-477a-a150-ade700d97a36
Title: Kotlin - s2e6 - Collections: Lists and Sets
Category: Week2
Lecturer: Robert Chatley
Date: 21/11/2021
We've already used lists quite a bit in our column programming. In fact, Scotland has two types of lists.
0:08
Another list we've used so far have been read only lists. Let's take a look at things in a little bit more detail.
0:14
If you want to construct a list like list, either we see here,
0:22
then we call the function list of and pass in all of the elements that we want to contain within the list.
0:26
When we call list of this always gives us a read only list.
0:33
Lists are audit status structures and their elements are indexed so that we can refer to them by number starting from index zero.
0:39
This means we can access a specific element of the list by index. For example, we could call lists they don't get and pass the money to index two.
0:48
And this would refer to the elements T in this case. You'll also quite often see this done using a square brackets syntax.
0:58
This is just a shorthand, and it's doing exactly the same thing as calling their don't get method.
1:08
We can add an item to a list by calling the method plus and passing him the new element.
1:15
But because these lists are read only, we can't actually modify an existing list.
1:22
So when we add something by calling, plus, we're always going to create a new list.
1:27
So in this case, we're going to create List B, which first of all, is created as a list containing all the elements which state contains.
1:32
And then the new element is added to List B, but not a list.
1:39
Hey, we can also achieve exactly the same thing by using another shorthand.
1:42
So in this case, we can use the plus operator. But that's again, just doing exactly the same thing as if we'd called the Dot Plus method.
1:49
The other type of lists that we have in Kopplin are mutable lists.
2:00
And so, in contrast, to read only lists with meat bullets, we can actually make changes to the content of the list once it's created.
2:06
If we want to create lists, see here as a mutable list, then we can call the aptly named function mutable list of.
2:14
And again, just passing the elements that we want to initially put into the list.
2:21
When we want to add something to immutable list, we have some more options. So Amit has a method at which is not available for reading lists.
2:29
And when we call Dot had passing in him in this case, that will actually modify the existing structure.
2:38
So we'll increase the size of the list dynamically and we'll have this new element at the end.
2:45
Alternatively, if we go back to our initial state of history, we can add not necessarily the end,
2:54
but at some point in the middle of the list, there's another variant of add which will allow us to add at a particular position in the list.
3:00
So here we have had an index to this string em.
3:08
And so if we do this,
3:13
what will first happen is that the existing contents of the list will be moved along and reorganised so that we make a space for the new element.
3:14
And then the new element will be added at index to giving us a new arrangement.
3:22
We can also remove items from an immutable list.
3:31
And so in this case, if we ask to remove the element out from this list that will be located as the final element and then removed,
3:34
this will decrease the size of the list. So we always dynamically resize the list according to the current number of elements.
3:43
And this will be reflected in the lists size property. We can still use Dot Plus in the same way as we did on our regional list, and in fact,
3:49
this will do exactly the same thing as it does for a read only list in that we're
3:58
going to create a copy and we're going to add this additional item to the copy,
4:02
not to the original list. So in this case, we would create this deal will be expanded.
4:07
The Element J is added to history at Index four, but List C remains unchanged.
4:15
So when we do that, we mutate the list. But when we do Dot Plus, we're going to create a new list and add to that one.
4:20
We can also see another very intense remove where instead of removing a particular element, we can remove an element at a particular index.
4:29
So in this case, we're going to remove the element at index to enlist, see?
4:37
But there's a subtlety here because we currently have two lists, both of which share an element.
4:42
So we're going to move in from position two of let's see, and then this team will reorganise its indexes.
4:47
So that Element two ability is now T. But all of this time listed remains unchanged, and the string in is not thrown away.
4:56
There remains an element of LSD. We just remove the reference to it from Let's see.
5:05
Let's try some of those string manipulations in code to see how they look.
5:12
So here I've got a list with some strings in it and I can create another list B
5:16
by taking List A and using the Method Plus to add another word onto the Excel.
5:24
And if I bring them both. You can see that this day remains unchanged, but List B contains the new element,
5:37
if I try instead to actually modify this day by calling and then you'll see that I can't do this.
5:50
That's a compiler error, and that's because the type of list is wrong.
6:00
It doesn't have this method. So list listing has type list of string.
6:05
But if you want to be able to add something and mutate that list, we need a mutable list.
6:09
So we'll just change this to be a mutable list of another type of this has changed.
6:13
So this is now a mutable list of string, and now we have this old method.
6:20
And if I run. They will see that this day now contains the new element.
6:25
There are also various ways that I can. It's right over and the process, the elements of the list.
6:43
We've seen some of those already. So I can map a function across the list.
6:48
And print the results. But I could also use a function like for each.
6:59
Which will again process each of the elements, but for each of those, I'm going to do.
7:15
Print line so that we're going to print each word separately rather than printing the whole list.
7:28
I mean, have this results? There are also some operations I can do, like all,
7:36
which is going to check that all of the strings in this list have a certain properties, so let's say that all of them are not blank.
7:49
And then if we print the results of that in this case, we should say that this is true because none of these strings are blank.
8:01
It's true. And if we add a blank string in the middle.
8:13
Then now it should be false. Which is.
8:20
We could say any of the strings.
8:28
Greater than five characters in length. They are about six characters.
8:38
No, none of these words, it's more than six characters little.
8:52
So those are various different higher order functions that you can use to process the list
8:57
and you can explore with the help of a tool to try and find the complete collection.
9:01
And you can find documentation online about each of those if you want to find out the details.
9:06
There are some other ways that we can process the list in a more imperative style that we can use a loop.
9:13
So here I can write a for loop. She's going to say for us in this day, I know I get a new arse for every element.
9:20
So this is a kind of python style for Leap, where I can print it.
9:32
Yes. Completing the blank.
9:37
A up. And I could also say.
9:48
If s. Contains the character who then prints the string, so we're going to print only the words that contain the letter O.
9:55
Alternatively, we can access the elements of the list by numeric index.
10:15
So here I can change this list to be a range so I can say the range from zero up to five.
10:21
And then I think, Prince, this day, and I'll use the square brackets to access it with s, and perhaps he might choose and identify like I for next.
10:33
Now that we've looked at these operations on lists, let's compare it with another data type sense.
10:57
If I just add a few more elements in.
11:07
Then we know that if we print. The list and reprints the lists size.
11:16
We get these expected results. Let's try changing this to a set containing the same words.
11:32
So to do that, we just use set off instead of list of and I'll just rename this to be set and it.
11:42
In this case, you'll see that the Senate has one fewer elements. Only eight, not nine.
11:59
And what's happened is that there's no second that there's no duplicate elements in the Senate.
12:05
And that's one of its important characteristics. So each element can only appear in the Senate once, even if we pass it in more than once.
12:11
If we were to add another that or another brown to the set, it wouldn't change the contents.
12:19
Each word only appears once. The other difference between sets and lists is that lists have an inherent ordering.
12:25
We can start at one end and iterate through to the other, and the elements will always be in a particular order.
12:33
But for since no ordering is defined, we can iterate through the contents.
12:39
And I can print them. But it's not possible to refer to a particular indexed element, so I can't say.
12:53
Set a moment for the Typekit assets.
13:04
It doesn't allow that operation. Just like with lists, we have two variants, a read only set and a mutable set.
13:08
And once we have a beautiful set, I can add things in the same way as I could with the list.
13:23
And I also have a lot of the same higher order functions so I can map over a set or I can ask about
13:33
any of the elements or all of the elements of the set just in the same way as I did with the list.
13:41
So a lot of these behaviours are common and you will get used to using them across many different types of Connexions.
13:46