ID: 5599f8c8-e028-4a0c-ae82-ae2d0148fe84
Title: 7.2 Master Theorem
Category: COMP40008 - Graphs and Algorithms (Spring 2021-2022)
Lecturer: Iain Phillips
Date: 27/02/2021
So let's now make progress towards the general case, ready for the master theorem.
0:01
So let's take our recurrence relation to N equals A Times T and Overbey plus F of N,
0:08
plus the base cases, which we'll see that we don't really need to know what they are.
0:20
The recursion tree will have one plus log to base B and levels because we can divide N by B, log B of N times.
0:25
So here's the recursion tree. So the non recursive work to be done at the base level for input size N is F of N just this.
0:39
And then when we go down a level, we've got a node's, each of them has input size and Overbey.
0:50
So the non recursive work is F of an Overbey using our recurrence relation.
0:59
And similarly, we go down again.
1:04
We get a squared nodes and input sizes and Overbey squared and the non recursive work is F of an Overbey squared for each of those nodes.
1:06
Finally we get down to the base level and obviously the input size is one s and or roughly one.
1:16
We're assuming here that that we that this does actually give us one just to simplify the numbers and the work to be done.
1:25
There is T of one, whatever T of one happens to be in the base case. But notice that this is a constant.
1:34
OK. So if we want to sum up the work,
1:42
we can go level by level as before in when we were doing it in a more special case and we get F of N on the first level,
1:45
we got a node on the second level. The work is F of N over for each of them.
1:55
A squared nodes, level two. And the work is F of Vanover B squared for each of them.
2:00
And finally we get down to the leaf log B n level and the work here is just A to the log be of N is the
2:06
number of nodes and the work is just some constant and factors that we can use our order notation.
2:17
So I notice for the bottom level we just need to know the number of work. Leif says the work for each is constant.
2:24
Well, let's suppose. Now, this is not fully general, but just to make life easier.
2:30
Let's suppose that F of Ania's polynomial end to the C. And then we can see that the ratio as we go down each level, the input size divides by B.
2:37
And so the because F then is end to the C, then you can see that the the ratio we get for the work is going to be the.
2:49
Here. And then this instead of dividing by B will divide by B to the C because of our assumption about F of that.
2:59
So that's our ratio. Ah. And now let's define what is quite important here.
3:07
The critical exponent to be capital E,
3:13
which is log to base B of A wire or equivalent aid log A overlong B which is a bit easier to compute at of course is log base two.
3:16
Well, by arithmetic are this ratio here is bigger than one?
3:29
If and only if A is bigger than B to the C, take logs to base B.
3:34
That says if and only if, log to base B of A is greater than the C.
3:39
And that's just the critical exponent. So that's if and only if E is greater than C.
3:44
So because we need to know whether R is bigger than one or not, because that determines whether the work is going up as we go down the levels or not.
3:49
And so it turns out that if we compare the critical exponent with the with the degree of this polynomial, then that gives us the answer.
3:59
Okay, so that means that we now have all three cases. So if he is less than C, well, then the work is basically concentrated at the top level.
4:10
Also, it's the recursion does not count. So the work is just order F of N just that worked on at the top level.
4:22
If equals C, then the ratio is one. And so the work is spread.
4:32
Even the overall the levels. And so in that case, we can just take the work at each level, which is F of N times the number of levels.
4:37
And it's just the order of that. But then using order notation long to base B of N, the number of levels we can just write log N,
4:46
i.e. to base two, because they just differ by a constant factor.
4:56
So that simplifies things. Finally, if it is greater than C, then the work increases as we go down.
5:00
And so the work is concentrated at the leaf nodes. And therefore the work is just order eight.
5:06
The log to base B of N, which is the number of leaf nodes which can be equivalently written is.
5:14
And to the log to base B of A, which is just end to the E, the critical experiment.
5:21
So those are all three cases. And.
5:30
Generalising from that, we get all this version of the master theorem.
5:34
So here is our general recurrence relation. And now I'm not assuming that F of N is that polynomial.
5:40
End to the C. I just did that to sort of motivate why this theorem would be correct.
5:47
But it can be proved in more generality, as stated here, that I'm not actually going to give the proof.
5:54
So this recurrence relation has solutions as follows where E is the critical exponent log a over log bait.
6:01
So there are three cases. So first of all, enter the E grows more slowly than F of end.
6:12
And that means therefore that the the work goes down as you go down the levels.
6:19
So therefore the work is concentrated at the top level. So this is my way of saying that.
6:24
End to the E is strictly slower growing than F event because the big O notation is like a Lessner recalls.
6:31
They could be growing at the same rate. I want to ask you this. I want to assure myself that and the E is really growing more slowly than F again.
6:37
So I'm going to say that if end to the E plus some small amount Eppstein on greater than zero is bigo of F and bounded by F of N,
6:46
then the work is concentrated at the top level and it's therefore just order F then.
6:56
OK. The second case is where the basically the the work is the same over all the levels, it's evenly spread.
7:02
And our case is just where F of N is order and to the E.
7:12
So they have the same rate of growth. Your order maybe is the equals, as it were, the same rate of growth.
7:17
And in that case, t n is just order F event, time to log n.
7:23
In other words, what we got before, just the number of levels.
7:29
Times the work done at each level, which is F event. Finally we have the case where enter the E really grows more than strictly more than F event.
7:33
So to express that I've expressed it this way and say that F of N is Bago is
7:46
bounded by end to the E minus some small amount upsilon greater than zero.
7:51
So that is saying that F of any strictly slower growing than end to the E.
7:57
And in that case then the work is concentrated at the leaf nodes.
8:02
It goes down. It goes up as you go down the levels and tier and therefore is just order.
8:06
And the E which is the number of leaf nodes.
8:13
So that's the master theorem, there are more general forms of it. But this will be enough to solve the examples that we have seen so far.
8:18
So let's have a look at some examples and see how the master theorem applies to them.
8:27
Take binary search. First, here is are a K equation recurrence relation.
8:31
And so we can see that A is one, B is two, and F of N is just order.
8:37
And to the zero. So it is in fact polynomial here. Well, the critical exponent we can calculate log A over log B, which is just zero.
8:44
And so therefore we can see that they actually grow at the same rate.
8:53
So enter the E and F of N have the same rate of growth.
8:58
So we're in the second case and we get a W of N is order into the zero times log and the number of levels.
9:03
So auto log in. Well, we already knew that for binary search because we solved it.
9:13
Exactly. But we've seen now that we can do it with less work up to order using the master theorem.
9:17
A second example, merge sort. So here's our equation.
9:25
Again, we're just assuming for simplicity, that is a power of two here because we're only solving up to waters here anyway.
9:30
And here a equals to the equals two and F of N is order.
9:38
And to the one. So the critical exponent logger over Lockerbie is just one.
9:45
And again, we can see that end to the E grows at the same rate as F of N.
9:52
And so WVON is order and log n. So more interesting is Strauss' algorithm, I think.
9:57
So the number of arithmetic operations, this is our recurrence relation for it here.
10:09
A seven and B is two and F of An is order N squared.
10:15
Critical exponent is just log of seven.
10:21
OK. And notice that that is bigger than two. So actually, enter the E!
10:26
Grows faster than FFM. So we're in the lead case here.
10:31
And so we get a and is order and the log seven.
10:38
Well, we already derive that by solving this equation. Exactly.
10:43
But notice that what this the master theorem tells us here is that F of N is if we could improve F of n make it better than N squared here,
10:47
you know, reduce the amount of non recursive work to be done here. Then it would effectively not really help with the order of a N at all.
10:59
You can see that once we've got any any amount of non recursive work here, that's less than end to the E in order.
11:08
It is just going to give us this solution for a event and to the log seven.
11:18
So that improving this will not help to get us faster matrix multiplication.
11:25
So any faster matrix multiplication has to attack the recursive work here rather than the non recursive work.
11:34