ID: 10c1c214-d369-4c7d-83fd-ae2d0148fb96
Title: 8.4 P
Category: COMP40008 - Graphs and Algorithms (Spring 2021-2022)
Lecturer: Iain Phillips
Date: 07/03/2021
We can now define our first complexity class. We'll say that a decision problem.
0:02
Do you X is in the complexity class pee standing for polynomial time.
0:08
If it can be decided within time. Penn for some polynomial in some reasonable model of computation.
0:13
Where in here is the input size which we writers modulus of X.
0:21
Well, we've had the invariance thesis that tells us that polynomial time in one model is
0:27
equivalent to polynomial time in some other model or the polynomials might be different.
0:34
Polynomial time is therefore model independent. So it doesn't matter which model we take when defining P here.
0:38
It's quite usual to use during machines to design P.
0:48
But we're not going to introduce Turing machines in this course.
0:52
Well, the important thing to note here is that we're talking about recision problems.
0:58
P is a class of decision problems.
1:01
So sorting a list, even though we can do that in polynomial time, that problem does not belong to the class P not being a decision problem.
1:04
Why do we focus on decision problems?
1:13
Well, it's technically convenient to define complexity classes for decision problems only, at least to start with.
1:15
It makes for a nice, simple theory of reduction and complete.
1:21
Well, you might wonder. We've talked about reasonable models of computation, what models would be unreasonable.
1:27
So two particular things that could would be unreasonable.
1:34
The first would be yes, if we allowed what I'm calling here, super polynomial parallelism.
1:40
If we had a massively parallel architecture where you could carry out more than pother, namely many operations in parallel, in a single step.
1:46
So you had exponentially many processors all operating in parallel.
1:55
Then you might be able to solve exponential time problems in polynomial time and in parallel time, at least polynomial.
2:00
So this model is unreasonable.
2:08
A second the more subtle, unreasonable model would be if we used unitary numbers, obviously not something we would do normally.
2:11
But in usury, five, for instance, would be written out in the sort of Talli notation of five WANs in a row.
2:19
And we don't like that because when we're dealing with numbers,
2:27
we we should not allow the unitary representation because the unitary gives an input
2:32
size which is exponentially larger than the binary or indeed than the decimal notation.
2:37
And that makes an exponential time algorithm appear to be polynomial time.
2:45
So it gives us misleading results about what his polynomial time.
2:50
Let's make that clear with an example. So if we're in unity,
2:55
we can cheque whether a number is prime by looking at all numbers less than that number is M less than N then seeing whether M divides N.
3:01
So that takes and divisions and. Well.
3:12
So that's quite a lot of divisions. But if the input size was N then that would be polla, namely many divisions.
3:16
So this would look like upon the naming Old-Time Algorithm for checking whether a number is prime.
3:26
But actually if we write our number in binary or indeed in decimal, then the true input size would actually be log in.
3:31
If you think about it, it's the number of digits you need to write down the number of binary digits.
3:41
And so actually, in terms of the input size, we're now doing two to the log n division operations.
3:47
And so we really have an exponential time algorithm. And so the unity notation was very misleading.
3:55
In the context of arithmetic operations, it's important to note that addition,
4:04
subtraction, multiplication and division are all polynomial time operations.
4:12
And by that way, I really do mean polynomial. They are polynomial in the size of N being log of N rather than in N.
4:18
So they are all polynomial time operations. Notice I didn't include exponentiation here.
4:27
Well, what can we say about polynomial time functions?
4:38
Well, an important and basic property is that the output size, size of ever X is going to be polynomial is bounded in the input size.
4:43
So we can see that F of X size of F of X is less than or equal to some polynomial in the size of X.
4:53
And what is the reason for that? Well, because when we're computing F,
5:01
part of what we have to do is to write out the output at the end of the programme or while we're computing F of X.
5:06
So the programme has only got polynomial time in which to operate.
5:14
And so any polynomial time in which to build the output. So the point, the output must be of polynomial length.
5:19
Well, another thing to notice is the polynomial time is is a nice class because it's got nice mathematical closure or fairly obviously.
5:30
If you add together two polynomials, the result is polynomial.
5:39
If you multiply two polynomials together, the result is polynomial.
5:44
But we also have this very nice proposition, which will be useful when we're discussing reduction and ENPI completeness.
5:49
And that is that if you compose together to P time computable functions, then the composition is also P time computable.
5:56
So let's suppose that we have F of X computed by algorithm, A within polynomial time.
6:06
P of n n is the input size X. G of Y is computed by Algorithm B within a different polynomial cube of M, where M is the size of Y.
6:12
And we want to compute the composition of the by doing F of X followed by G applied to that output.
6:25
So. Well, what I want to argue is that this is polynomial time computer or perhaps the diagram will help.
6:35
So. So what we're doing is two stages of computation, so we want to compute F here.
6:44
So we're using Algorithm A. So input X comes in, F of X comes out.
6:54
And then we're going to feed that in to Algorithm B.
7:01
Which he's going to produce our actual result, which is G.F. of X.
7:07
Like that. OK. So that's what we want to do.
7:13
So we've got input size of X is in here.
7:17
OK. And we're going to compute.
7:21
We're going to run A to get F of X and then runby to get G of F of X.
7:25
Well, running A on X takes less than or equal to Penn steps.
7:30
So that's because X is. Is equal to and then this is going to be less than or equal to P then steps for doing that.
7:35
Well, how long does it take to run B?
7:47
Well, we've got this polynomial. Q But remember, that is.
7:51
Q In the input size for algorithm B in the input size will be the size of F of X, not the size of X.
7:54
So we need a bound on the size of the of F of X.
8:02
But by our previous argument, because F is polynomial time then F of X must be polynomial bounded in and the size of that.
8:07
And so we could say that size of F of X is bounded by P prime.
8:17
And for some polynomial P and say, okay.
8:22
So that means therefore that we've got F X.
8:26
That's three would be prime. And so therefore, when we run B, then the number of steps here will be.
8:32
Q applied to P prime of N.
8:41
That will be a bound on the number of steps there.
8:45
And then if we want to get the total number of steps, we just have to add these two together.
8:49
But by the nice mathematical properties of polynomials. This is another polynomial P of and plus Q of P prime of N.
8:58
And so we get the result that G Circle F is also E time.
9:07
Computer.
9:14