ID: ccba5eab-d23b-4e7e-a18e-adf800cc4b46
Title: idb-topic-20-generating-normal-forms
Category: COMP40007 - Introduction to Databases (Autumn 2021-2022)
Lecturer: Peter McBrien
Date: 08/12/2021
So in this topic, we look at how to generate third normal form and boys could form schemas, and method is really quite simple.
0:01
You use the notion of decomposing on functional dependencies to turn schemas
0:10
which break Ferdinand will form into third normal form conforming schemas.
0:17
More specifically, what you do is you look at your relation and you spot a functional dependency that is causing it
0:23
to violate third normal form and then you decompose your relation on that functional dependency.
0:30
So that means taking away the attributes on the right hand side of the functional
0:38
dependency that's causing the violation and putting them into a new relation,
0:42
along with the left hand side of the functional dependency leaving behind in the original relation.
0:47
The attributes of the left hand side of the functional dependency, the new table RB will have as its key the X.
0:54
The set of that to be step on the left hand side of the functional dependency.
1:05
And you know that this is a lost of decomposition because the two nations share that set of X attributes.
1:10
And then you project the set of functional dependencies onto the new relations and
1:17
repeat the process until you find you have all the relations in third normal form.
1:22
Let's take a very simple example. Let's suppose I have a relation with three attributes A, B and C,
1:30
and two functional and CS eight determines B B and see very clearly the only key of is the attribute.
1:35
So that is the prime attributes B and C non-Prime.
1:44
But we have the functional dependency B determines C, so that violates third normal Form B's, not a Super K and CS non-Prime.
1:48
So you decompose on that functional dependency that means you leave B behind
1:58
and you build a new relation containing the functional dependency B and C,
2:03
and you have two relations, both of which are in third and perform.
2:08
Now, let's return to our bank database, for example, and recalling the one table form of the bank data data,
2:15
the bank data and the set of functioning dependencies we have,
2:22
we noticed that we can take Saltcoats Terminals B name in cash and see that it is violating
2:26
third normal form because source code is not a super super key and b named cash non-prime.
2:34
Recall that the prime attributes of this relation is just enmity, and therefore I can decompose it into a new relation.
2:41
Let's suppose we call it branch containing source code be named cash, and two division functional dependencies now are covered by that relation.
2:50
And that leaves behind in bank data. All of the original attributes are set for be name and cash.
3:00
This new relation still breaks third normal form because we have the problem of the number of determinants type C named rate and source code,
3:09
and therefore I can decompose on that functional dependency to get a new relation.
3:20
Let's suppose I call this account leaving behind a new version of bank data, which I'm going to call movement.
3:25
And I find that the functional dependencies left on account means it's in third normal form and so is the table movement.
3:33
So have free relations now, branch account movement, all of which are in third normal form.
3:41
You are to ask, which order do I do the decomposition in?
3:52
And to a certain extent, it doesn't matter, but you need to try and preserve all of the functional dependencies,
3:57
and that can lead it to be better to decompose on one functional dependency rather than another.
4:05
Usually, it's fairly clear, as in the previous sample, which one is the best one to choose, but sometimes it's a little less clear.
4:12
Let's just take an example where it's less clear.
4:19
Let's suppose I've got a relation, all with anchovies A, B and C, and I've got the set of things dependencies eight times B,
4:22
B, vitamins C and C determined say in this case, you might say that I do not need to decompose it.
4:29
To get third time will form the rest of suppose after scientists do decomposition and I decide
4:38
to decompose it into relations are a with a b as the attributes and B as B.C. determines.
4:43
The attributes, of course, is permitted because got their which to be determined C.
4:52
Apparently, I haven't got the older the function tendencies present in the new relations because see determines a sounds and neither.
5:02
All right, I'll be. But if I take the closure of the attribute,
5:11
their function depends as I had before and then project them onto each of the wealthier
5:17
nations I find that already contains a determines B and B determines they are B,
5:22
contains B term C and seek the times b. If I take the union of those, I find that I can restore all of the original function dependencies.
5:29
The reason why this is in fact true is because in the original relation, A, B and C are alternative keys,
5:39
and I could express this set of functional dependencies as an equivalent set of functionally
5:48
sentences where eight cents B and B determines a plus B determines C and C determines B,
5:54
and therefore becomes more clear how I can preserve the functional dependencies over this decomposition.
6:00
When you decomposing to third normal form,
6:10
it's always possible to decompose the relation into a third normal form where you preserve all the functional
6:12
dependencies and thus any good third normal form decomposition of relation must also preserve functional dependencies.
6:19
So even if you're asked just to form a third normal decomposition of our nation,
6:27
you should take on board that you need to include the concept of preserving functional dependencies in that process.
6:31
Let's take the example we've looked at before. I've got a relation with six attributes and the following function dependencies,
6:42
and the question I've got here is which one of these decomposition is preserving all of the functional dependencies.
6:50
Most popular answer C, and that is indeed the correct answer in this case, it's quite straightforward, as in most cases,
7:03
to determine the function of term tendencies have been preserved because you simply need to check that each one appears in the relations of Answer C.
7:11
So in particular, he determines B, C and D appears in one c determines d appears to be d determines f appears in are free.
7:20
F determines B appears in R one and b e determines a also person o one.
7:33
So Answer C preserves all of those functional dependencies, whereas one or other of them is missing from A,
7:40
B and D and cannot be restored by taking the other function.
7:47
Dependencies are preserved in those relations. So taking this example, we've had three different quiz questions looking at it,
7:52
one of which was looking at which one identifying which ones were lossless jointly compositions,
8:02
one of which we're looking at which ones the third normal for or not.
8:08
And finally, one which looking at which ones preserve function dependencies and Answer C managed to be a lossless decomposition,
8:13
which preserved third normal form and functional dependencies, illustrating that you can have many different answers.
8:22
So say something preserving functional dependencies or preserve coming into third normal form,
8:29
but that you only sometimes have one answer that can preserve all of these properties.
8:36
Now, let's try a new example to see if we can identify which one forms a third normal form decomposition.
8:45
And you got a hint here that the minimum keys for these function dependencies I see and b c.
8:53
Well, these are not poplars, an over a B and C roughly equally popular, but a is in fact the correct answer.
9:06
And notice, hey, I've been a little bit tricky. The set of functional dependencies that you have here is not a minimal cover.
9:15
And in general, when you asked to solve the problem of working out what is a good third normal form decomposition of relation,
9:22
the first thing you should do is ensure that your functional dependencies are a minimal cover of the functional dependencies.
9:29
This does run through that if we, first of all,
9:38
consider the fact that B C determined Z and E determines D means I can derive that B C determines D I can eliminate that functional dependency
9:41
from the original set to get a new set where I simply say say B C determines e and simply because AC determines C and E determines D,
9:53
i can then tell that AC determines D and so I can eliminate the D from the right hand of a c determines b d.
10:03
Finally, because I know the AC determines B and B C to them z,
10:13
I can derive the AC determines E and therefore I can eliminate the E attribute from the right hand side of the AC determines DB.
10:17
Any was that there's no further simplification I can perform so I can call that the minimum cover,
10:26
and I then notice that it's more obvious y answer a is a good answer because AC determines B and B determines a observed
10:34
in R B B C determines e it's observed in A and e determines the observed in R. c all the relations in the normal form.
10:44
And clearly I've got a lossless decomposition because I share ACP-EU e between RC and R. A. With the functional
10:57
dependency the DS I can do a lossless joined back to restore those two and then I share that b c that determines E,
11:06
which allows me to join our right back into our B and therefore we store the original total relation.
11:19
Decomposition of relations into both long form that takes away, Simpson attacked.
11:31
Now, of course, the rule is simply that we have some dependencies where X is always a super key,
11:36
and therefore we decompose wherever we find a functional dependency that that breaks that rule about the left hand side not being the super key.
11:45
Often you'll find that a schema that is in third normal form is also in Buscaino form.
11:56
But let's take a counter example.
12:03
Let's suppose I have a relation address with the no street town county and postcode as attributes and two functional dependencies,
12:05
one which says I can identify the postcode by taking the combination of the Noun Street Town County and the second one.
12:14
The The Postcode determines what your street, town and county is now trivially.
12:22
This relation is already in third normal form because all the attributes are prime.
12:29
The two candidate keys are no straight town and county and number and post code.
12:33
However, the relation is not in postcode no form because the function dependency postcode
12:42
determines street town and county has a nun key and on super key as its left hand side.
12:47
If I try and decompose on this functional dependency, I end up with a new nation cycle called postcode with postcode street town and county.
12:55
Leave them behind in street number at the number and post code.
13:05
And I do have a Boy Scout number from schema, but I've lost home or have not preserved the number.
13:09
Street Town County determines postcode functional dependency and sometimes the case isn't always the case.
13:15
When you have to compose to boycott normal form, you have to lose a functional dependency.
13:22
With this, you have enough information to do the next worksheet,
13:31
which is about building normal forms and is an exercise about building both boys code, normal form and third number forms.
13:34