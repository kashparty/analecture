ID: 9d0c0d50-4ba4-40cf-8acb-ae1601072248
Title: 2.6 Applications
Category: COMP40008 - Graphs and Algorithms (Spring 2021-2022)
Lecturer: Iain Phillips
Date: 24/01/2021
So I want now to look at various applications of DFS and be IFRS.
0:01
So let's start with the question of whether a graph is connected. So far, we have assumed that the graph to be traversed is connected.
0:07
But we can also transverse non connected graphs.
0:16
And of course, in that case, we will only visit nodes that are in the same connected component as the start node.
0:19
So we can easily either adapt either DFS or DFS to return a list of the visiting nodes coming from our start node.
0:26
And clearly the graph will be connected if and only if this list is the same up to reordering as the complete list of nodes.
0:33
So that gives us a linear time algorithm to determine whether a graph is connected.
0:40
How about the question of whether a graph has a cycle? Well, supposing that a connected graph has got an nodes.
0:48
Then if it has greater than or equal to N arcs, then it will contain a cycle.
0:55
In fact, that's true even if the graph is not connected.
1:02
Because and because we know that a cyclic connected graph will have N minus one nodes so we can use this to cheque easily.
1:06
Whether a graph has a cycle, just count the number of arcs. Well, that method does not actually find a cycle.
1:15
So if we want to actually find a cycle as distinct from detecting that, there must be one there.
1:21
Then we could use DFS. So let's look again at our example.
1:27
And when we reached Node eight, as in this bottom diagram, we did see also that we have seen node one and indeed four already.
1:33
They were already marked, has visited. So that gives us a cycle, if you will, because you can see that if from eight, we can see one.
1:44
So if we backtrack from eight all the way back to watton,
1:55
then if we can just complete the cycle by going to eight by the direct route, then we have indeed got a cycle.
1:59
So as soon as we see a node that we've already visited, that is not a path.
2:06
The parent node, then we have actually detected a cycle and we can complete the cycle by just backtracking until we get to that node.
2:13
And by alternative means. Okay.
2:24
So. So to sum up here, what we've discovered is that if we encounter a node that we've already visited except by backtracking,
2:28
this tells us that the node can be approached by two different groups from the start node and therefore there is a cycle in the graph.
2:36
Conversely, if we already if we never encounter and already visited node, then in fact the graph will be a tree with no cycles.
2:44
Though we have met the proof of that. To just to sort of firm this up and make it a bit more explicit, we can.
2:52
We've got this fact about connected graph. Let me be spending three of the connected graph G.
3:04
Obtained by DFS. Notice this has to be the DFS spanning tree starting at, let's say, node start then if any, if there is any arc in the graph.
3:12
Not necessarily in the tree with points X and Y, then either X is an ancestor of Y or why is an ancestor of X.
3:23
Let's have a diagram. So if we've got on growth here.
3:32
There we are. And here with this, we've come from some staff node and we've got nodes X and Y.
3:43
And maybe they're joined by this. OK, A here. So that's the scenario we have.
3:55
Then the claim is that either X is an ancestor of Y or why is an ancestor of of X in T?
4:02
That's a different colour here. So we've got maybe we came to.
4:11
X first, and then maybe somehow later we came to Y like that, so ancestor here means that.
4:18
It to say that X is an ancestry Y as in this diagram here, that we've got a unique path back from Y to the start within the spanning tree.
4:28
This red path here, an X lies on that path.
4:37
So X is like the parent or grandparent of Y centralism, an ancestor.
4:41
So so that's a fact which is easy enough to prove. But it does depend on this being DFS tree.
4:47
This is not true for spanning trees in general. But I'll let you think about why that's true.
4:53
And so we can use that fact to adapt DFS to test whether Grauwe has a cycle.
4:59
So all we have to do is if when we're running DFS at Node X, we see that I've changed the X and the Y around here.
5:07
But let's look on this diagram here rather than this one.
5:20
Okay, let's come out from there.
5:24
So if that node X, you see Y as a neighbour and Y is not the parent of X and and has already been visited, then in this case there must be a cycle,
5:28
which basically means that by the fact y must be an ancestor of X because we got to Y before we got to X and so we
5:43
can just backtrack from X by using the parent function to Y and then complete the cycle by going to X like that.
5:53
So that gives us the desired cycle.
6:02
Finally, if we want to calculate distances from the start node, then we've seen that breadth first search gives us the shortest path from the start.
6:09
No to any reachable node, while DFS may well give a longer distance than necessary.
6:20
So obviously, we should use CFS to calculate the distance. So all we have to do is record the depth of each visited node in the S tree.
6:26
Just have a separate array for the depth. And so that's an easy modification to make to the code.
6:34
And then also, we don't just get the depth here, but we can also find the shortest path from a node Y to the start node.
6:41
Or I should say a shortest path. There might be more than one, but the same length, I suppose.
6:49
And that can be just read off using the parent function, backtracking from Y to the start using parent.
6:56