ID: 4f9f587c-178f-423c-ac8f-ae1d010846ed
Title: kgk - A Brief Introduction to Website Development - Day 2 - Dynamic
Category: WebDev
Lecturer: Konstantinos Gkoutzis
So this is the sequel to the static of the previous day,
0:06
and today we'll talk about how you can create websites that actually change without you being there all the time.
0:11
Now, in order to do this, we need to start from some basic information,
0:21
so understand the role that the web server plays in this scenario, and then you can write code that runs on that server.
0:25
But I am. I can guarantee guarantee you.
0:34
I'm certain that by the end of this session, you will be completely confused.
0:37
And that's absolutely fine. So don't worry about it. We're just doing this for fun when you have some time, maybe over the weekend.
0:42
Just go over these lines and see if you can replicate the example on your own web server.
0:50
And if you can't just Boston, add them and we'll figure out the problem together.
0:56
So this is just for fun. You won't be assessed. There's no test.
1:02
No exam is just for you to see what you can do with your coding skills.
1:06
Of course, you can make money out of it if you find an internship,
1:12
so it's more likely you'll find an internship for web development on the server side rather than on their client site.
1:15
So, yeah, if you know how to do all of this stuff, just stick around and help others in the chat.
1:22
Hopefully, you have all seen my post and them asking you to pre-install a web server stuck on your computer.
1:29
If you haven't done this, just, you know, watch the slides and go step by step.
1:36
Again, just to recap what we talked about yesterday. Websites are collections of web pages, just files and some server somewhere.
1:43
And these website and web pages, they are created, they're present and using client signed languages.
1:52
It's emergency Assassin's Creed. So everything you see is just these three things.
1:58
Eight. The amount is for marking up data. So it's a Mark-Up language.
2:04
So you say this is a paragraph that's where it starts, and here's some text, and that's where it ends.
2:09
The end, Sue says, is used to stylised these things to give them some personality colours and background sizes, distances,
2:14
etc. And then you have JavaScript to make things smarter to actually make them more usable with some functions and events.
2:23
So that's the combination we saw yesterday.
2:33
In order to build a website, as we discussed yesterday, you need to speak with your customer to define your specification.
2:36
Great. But once you have that, you need to go and buy a domain name for them.
2:45
So that's the pretty name that you see, like a John Smith College, whatever.
2:51
Once you buy the domain name, well, you're actually renting it from a red star.
2:57
But let's just assume that you bought it. You also need to rent space to put these files on the web server.
3:02
If you have your own computer running 24-7, yes, you could put the files there.
3:11
But most people don't have that in their home, so you just rent someone else's server.
3:16
That's the web host. And you put your files there now.
3:22
Then you go and design the storyboards. Create templates. Yes.
3:26
Then you also design a database for that website and you build it and you populating with data.
3:29
So for real dynamic websites, you also need to design a database computing systems.
3:38
You already know how to do this.
3:44
James students hopefully you can audit the knowledge from, say, Ciencia, but we'll briefly go through a few comments on how to do this today.
3:46
When you have all of this going and then you implement the business logic, the actual requirements into the server side code.
3:58
So the magic happens in the background the server side code spits out or more politely,
4:06
generates produces the client side gold, but the server side needs to be based on the specs that you took from step one.
4:12
And finally, if you have a contract and they pay you, you can test and maintain this when it goes live.
4:23
Now then you make more money out of this, and you can keep this going for a few years.
4:29
At some point you may get bored of this.
4:35
But the technologies keep changing so fast that if you stick around for a long time, you will never get bored of the languages.
4:38
You will only get bored of your clients. At that point, you may want a career change.
4:45
I hear teaching is quite fun. So if you want to buy a domain name, you need to go to a registrar.
4:50
You ask them to give you this name, and if it's available, then you can take it for yourself.
4:58
I mean, you're not actually purchasing forever. You have to keep renewing it in a way.
5:06
Let's say that this is the name you want to go for. Let me just convert to a screen pointer.
5:12
My amazing website. Cool. That's just the name part.
5:19
You also need to decide on the extension that top level domain extension if you want this to look like it's a UK website.
5:23
CO.UK. That's an easy one. Com Used to mean commercial websites in the United States these days doesn't mean anything.
5:32
So that's the most popular one. Com But most are taking the popular ones anyway.
5:40
Dot Net is four networks connect like connected websites with other websites.
5:46
You don't really want this unless you have a specific purpose organisation or intuition.
5:54
Same thing goes for org organisation, usually nonprofits or stuff like that, but we have so many new extensions these days, so a few years ago.
6:01
Well, some people need more money, and they agreed on new extensions and they started charging them.
6:12
So X-Y-Z is one of them. There's a whole list you can find of various extensions that you can purchase these days,
6:19
then find the register that supports your theold and they will sell it to you for a price every year in the UK.
6:26
If you are after co.uk that's nominate and then you buy it from them, then you need to go for the web server.
6:35
So that Web server is going to host your files, as we said, it's just files on someone's computer.
6:43
You need some computer that has a very fast connexion to the internet and is also someone is available to fix it when it breaks.
6:49
So if you can't be there, hopefully the company can do it for you.
6:57
So that's the webcast the web hosting service.
7:00
There are a few things to consider while deciding on this how much storage you want disk space basically how much bandwidth.
7:04
So how many data are you going to use up every month?
7:12
Right? Imagine that you are purchases that approaching this or like on a plan if you
7:17
have a mobile phone plan and you have like two gigabytes of data on your 4G,
7:21
right? It's similar to that. That's the bandwidth support.
7:27
Are there there 24-7 if something breaks, if someone releases a new bag, for example, and so on.
7:31
So there are a couple of different types of web hosts.
7:39
You can rent a dedicated server, which means you are virtual.
7:43
You're renting the whole thing. The whole computer is yours. The real physical machine.
7:48
Or you can go for a virtual private server, which means that the machine is broken down into virtual machines.
7:53
And you have one of those virtual machines being yours on that physical machine, which is quite common and cheaper, actually.
8:00
Or you have the cloud server approach. That means that your files are spread all over the world.
8:09
That's the cheapest one. But at the same time, if you if for legal reasons, you are going to be in the specific country only,
8:14
for example, only in the UK, then maybe you want to stick in a UK cloud or a VPNs in the UK.
8:22
Yeah. Now, make sure that your host, your Web host, has external backups,
8:28
because if they don't and someone attacks your website or someone else's website, it happens to be in the same physical server.
8:35
You will lose everything. So one backup is not enough.
8:42
Look at 3-2-1 or alternatives. So your web host needs to have regular backups that are external to the actual site,
8:46
and you need to be able to purchase extra storage space if and when that's needed.
8:55
So if you run out of space, then you can pay them more money that can give you more quarter on their disks.
9:01
That's basic.
9:07
Now, cloud hosting is more popular because with this option, you can have your files offered from many different locations all over the world,
9:09
allowing you to have copies or replicas of your website in many different countries.
9:18
That's useful because if you have users from all over the world, then it's going to be faster for them to access a local copy,
9:24
for example, the copy in the U.K. instead of going all the way to the copying in the United States, for example.
9:33
So some of these cloud hosts are being used by many, many popular websites like CNN, Guardian and others.
9:39
So you can investigate this further. I don't think this is going to worth the money for your personal website,
9:47
but if you work for a customer and they're expecting a real big amount of customers to land on their page at the same time,
9:55
then maybe you want to explore this further. OK, but remember to ask a quick question.
10:04
Yes, sir. I heard that our department have a private cloud platform and also still and do they have a way to like, comply, voyage or something?
10:10
Yes. A dog has their own cloud. It's a it's a cloud, but it's not all over the world, really.
10:22
It's a local dog cloud. And that's the use for student projects.
10:28
You just need to speak with CSC, and they can assign you an account to use that cloud for your projects.
10:32
When you have one, but if it's for, like, personal website, I don't think they will give you access for a personal project, I'm afraid.
10:39
But if you get a euro project or a group project, an individual project, they will definitely do that.
10:47
If you're after a personal project, you can go in one of the online services and rent their cloud for a month or two.
10:52
OK, thanks. All right. So remember, when you're using the cloud, that's basically someone else's computers.
11:01
It's a collection of computers all over the globe. So whatever files you put there, they are there for them to see.
11:09
Make sure you encrypt any sensitive data because if someone grabs a hold of those machines, then they have your data.
11:16
So remember that if you use a dedicated or a VPNs, you know exactly where your files are.
11:24
But in the cloud, they can be all over the world, in many different countries and different countries have different laws.
11:32
So if someone decides to, you know, go and break in your companies a cloud server and grab all the servers, then you lose access to your files.
11:38
This has happened a few times. So, yeah, make sure you when you use the cloud that you use companies that tell you exactly where your files live.
11:49
Now, let's talk about bandwidth. That's how much data you can actually send from the server to your users or your clients over time.
12:01
Now this is measured in bits per second. OK.
12:10
In networking, but really in web hosting, they care about the megabytes they're going to send out or the gigabytes.
12:14
So if you have a website, that's when you store it on the local disk.
12:23
It's a 100 megabytes, for example, then you buy one gigabyte of bandwidth.
12:29
It means that someone can view your entire website old files only almost 10 times, depending on how you measure a megabyte or gigabyte.
12:35
So keep that in mind. Of course, no one is probably going to view your entire web site.
12:46
But even if they do, when you run out of bandwidth, you should be able to purchase more.
12:53
That's the real problem with VPNs and dedicated servers.
12:59
Cloud servers usually come free of bandwidth, depending on the deal you make with them.
13:04
But yeah, and keep an eye out. You don't want to be charged too much for bandwidth if you go for Azure, for example, on your student accounts.
13:10
You will see that you have free access to Azure up to a specific use.
13:19
Said No. So once you go over that?
13:25
Depending if it's days or data, then they start charging you.
13:29
So be careful with that. The charges can creep up really fast, especially with database calls.
13:33
Yeah, so that's an example with 110 to one giga.
13:40
This is an agreement that one gigabyte is 1000 megabytes. Let's talk about this next year.
13:44
Let's not argue now. So if your client can afford this, then that's great if they can't afford this.
13:50
Maybe it's worth storing some files externally. We mentioned yesterday about Houghtaling connecting to other sites to grab your data from them.
14:01
So that's fine. For example, YouTube allows you to do this.
14:11
That's legal. You can upload your client's videos on YouTube and then embed them in your code.
14:16
Of course, YouTube will introduce some ads or whatever they do.
14:22
But yeah, at least you're not spending your own bandwidth when they're watching the videos, you're spending YouTube's and they have plenty to spare.
14:26
OK, so present them with all the options. Tell them that I will save you some money, but YouTube will serve some ads.
14:35
Is that OK? Yeah. Of course, there are the websites you can use like Vimeo, and you can pay them to remove the ads.
14:41
So there's also that. So once you have all this in place, you have a domain name, you have a web hosting you and you have all your files ready to go.
14:49
The webcast will need to add your domain name the one you purchased into its name servers.
14:58
That means when someone taps your domain name, the name server will know that it's stored on that web hosted server.
15:04
I remember yesterday we mentioned that what a name really is.
15:13
It's an IP address, but you can't remember the IP address, right?
15:17
So what you do is your browser. Your web client connects to a name server and asks, Hey, what's the IP address of this domain name?
15:21
And then the name server says, Oh, you know what? That IP address is that web host.
15:30
And that's how you can go to the right server if hopefully.
15:35
So once you do all this stuff and you purchase domain name, hopefully within 24 hours, all the name servers of the world will know that.
15:39
Now your website lives on this web post, OK? This is called the domain name system, the DNS protocol.
15:50
So if you come back next year, four or five or five, I will tell you more about it.
15:57
Great. Now, STPs is a protocol that the web uses.
16:02
But remember that as from yesterday, for secure,
16:08
that's when you know that you have an encrypted connexion like the the key with the padlock on the top of the browser.
16:11
That's because you have purchased an SSL certificate. Now it used to be that you had to pay for it.
16:20
There are web sites that offer it for free these days. One's called Let's encrypt, so you don't have to pay for it necessarily.
16:26
But again, you have to enable it. So once you have the certificate install on your website, your website can use it to be.
16:33
Yes, it's also encrypted. Everything you're sending over that network is encrypted with a specific algorithm.
16:40
So that means it's harder or more almost impossible with today's technology for
16:48
external parties to view your passwords or whatever data you're trying to exchange.
16:53
If you don't have any steps, website that Google may downgrade your website on its rankings.
16:59
So this started happening a couple of years ago, so make sure when you purchase a new website for a customer,
17:06
you also practise and SSL certificate for them or get one for free.
17:12
Right now, you have everything in place.
17:17
You upload your files on the web server. How do you do that? Well, there are a few protocols to achieve this.
17:20
The tip allows you to exchange files with the server.
17:26
Great. There's steps. So if the web host has a web interface, you can use the web as most people do.
17:31
There's NCP. Secure copy is similar to a 60p.
17:38
You can use different clients for this.
17:43
You can also use this to connect to the college network, by the way, then grab your files from there or associates good old associates.
17:46
That's also fine if you can just copy paste the files there.
17:53
Yeah, so that's how you can also connect to your public esteem folder if you want to upload something.
17:57
But instead of connecting to your web course, you're connecting to your folder. Similar process?
18:04
Right? So do you have any questions so far? Is there a size limit to be a to the file that could be sent by GPS in general, you mean or don't?
18:10
Oh. No, there's no limit. The server the web server has limits, but not eight steps.
18:27
So a web server may say I'm not offering files larger than four gigabytes, for example.
18:36
So that's a setting in the configuration file of the server.
18:42
That's different. But CBS itself doesn't have any such knowledge, nor limits.
18:46
And the other questions. And I have a question.
18:54
Yes. So like the example you gave, it was one GB bandwidth and let's say my phone, I mean, OK, so is it like, oh my,
19:01
take any view at most in added time or like and total 10 total until the end of the month when your bandwidth resets and you have another gigabyte?
19:11
Thank you. Yeah, it's tricky, isn't it? It's the same with your data plan, so if you get a mobile phone or an data plan,
19:25
they give you like two three four five six gigabytes of data to spend on 4G or 5G.
19:31
Once this runs out, you have to wait until the next month to reveal to refresh.
19:36
It's the same thing, but we call it bandwidth.
19:41
And once you purchase this before you purchase this, they will tell you how much you can spend if you need more.
19:43
If you run out, you can purchase more. I mean, it's not like they don't have it.
19:51
It's like they're not going to offer it to you unless you pay them more money. So you get a good deal on this.
19:55
Some cloud servers, they don't have any limits to bandwidth. To put our e-mail in the public HDMI folder, which protocols will we use?
20:00
If you're thinking about the public, it's in a folder on your account.
20:11
You can use associates if it's a simple copy paste in plain text files or if it's an image,
20:16
you can use this thing I mentioned being or am right there.
20:22
You can use this win recipe for windows or just recipe for Linux.
20:27
And yeah, you can send images, binary files as well.
20:32
OK, if you want to copy a whole project.
20:38
Yeah, I think the best way then would be ACP. Just copy pasting separately.
20:42
Yeah, just connect to your account via the cell server or whatever.
20:48
Buy it with recipe and then just upload the files directly to your public folder.
20:53
That's the fastest way. OK. Anything else?
20:59
OK, let's move on. Web servers so there are many different kinds of web servers and brands.
21:06
We use a party here a dog, Imperial uses A&Es by Microsoft.
21:13
There's also ending's and many more. You can have a Node.js web service as well.
21:18
So there are a few out there. A party is quite popular and we're using it here where a dock server as well.
21:23
Someone asked me last year, Is there a Haskell web server? And I googled it and I found one.
21:31
So in case you were wondering, yes, you can even have a school based web server at the end of the day,
21:36
just a programme running on a computer that serves some files from the hard drive to users using the steep pinstripes protocol.
21:41
So, yeah, you could write your own if you wanted to. Sure. Just make it secure, right?
21:49
Yeah. So every application you will learn in this next year as well needs something called the port number to connect to somewhere.
21:54
We have a green one. They have agreed back in the day that 8TB uses Port 80 and STPs uses four for three.
22:04
There are many other ports, of course, from zero to sixty five K, but these are the ones that are used specifically for the the web.
22:13
This application of the internet, there are a few other applications of the internet you will find more in here right now.
22:22
Why is this important? Every time your client, your web client, Chrome or Firefox connects to a web server?
22:29
It's trying to connect to its Port 80 of its IP.
22:36
So if you have a web server running on Port 80, that's great.
22:41
It's going to work if you want to run a second web server for some reason on the same server.
22:45
You won't be able to run it in the same port because every port can only be used once.
22:50
So if you want to do web servers, for some reason, you need to have two different computers or two different connexions either way.
22:55
So what happens if you want to websites? Well, you can manipulate this over the name server system.
23:04
You can have the name server point to a different IP address, and the baby and the rest can get you to a different website.
23:10
So there are ways to do this, but let your web host worry about this.
23:17
You're going to run your own web server locally on your machine. Just for today.
23:22
For fun. OK. Don't make this public because it's not secure.
23:27
We'll see why. So just keep it local. Don't access it externally.
23:33
Download Zap if you want to have a few links on and edit them as well.
23:38
And when you do that, you will get a party the web server, a database called Maria MariaDB,
23:45
which is similar to my escrow and you get BHP and Perth and many more.
23:50
Isn't that great? So for today, you're you're fine with this.
23:56
For the future. You may want to invest in a different kind of stunk.
24:01
Now a party is the party hates to be server, which is the web server.
24:08
It runs on any Unix like system and on Windows, it's free and it's open source.
24:14
So that's great. And like, I guess what you have to pay for, it's one of the top web servers, and even though it's open source,
24:19
you will find loads of support out there, both paid and free in order to change its said.
24:27
There's an actual text file that you edit. There's no funny graphical user interface.
24:34
It's just a text file. You open this text file, you change the settings, you save it, you restarted and the settings have been applied.
24:40
So, for example, you can change the port number from 80 to something else, like 90.
24:48
But if you do that, then when Chrome tries to connect to your server at Port 80,
24:53
they want to know that you have moved to Port 90 because the agreement is 80.
24:59
So don't change Port 80 unless there's a specific reason.
25:04
For example, if you're running a test server on Port 88 for fun, sure, no one will know that it's there unless the port scan you.
25:07
You contains other things in there, like where your files live, the document route as it's called the name of the setting.
25:16
So yeah, that's by default in the Hates the Doc folder.
25:23
That's the default on your dock account. It's called public the email, as we said.
25:28
But when you install Zoom, it's it's under HD docs.
25:35
That's another agreement that Zoom has. Yeah, you can change this, however, and you can load modules.
25:39
You can load libraries, add extra features to your web server to make it null and do more things, and we'll see an example.
25:45
Now, if you have sample installed just around the control panel and press the start button, that's next to a party and that will start the website.
25:55
The Apache Web server, you will notice that it's trying to execute the 8TB process, the being the one, right?
26:03
So the a speedy process is the web server. It's going to try to access ports 80 and 443 if they're available.
26:11
It's going to run correctly if someone's using these for some reason on your machine.
26:20
Then it will give you an error message. Hopefully, no one's using them if they are.
26:24
See why they're doing it. Maybe it's a virus. Maybe not. So take a look.
26:29
Right? So to access our own machine, we're going to, of course, call it by its IP address.
26:34
But even if we're not connected to any network at all, it has a special name.
26:40
When we want to connect to our own machine, we can connect to something called a local host.
26:45
Maybe you've seen this somewhere. So when you say local hosts, it's an agreement that means this machine, my own machine.
26:50
Right? So it's not a real domain name. No one has precious. This is just a Stibbe column last last localhost and that takes you to the port.
26:56
80 is implied here to the web server running on your own machine, which is.
27:08
Yeah. And hopefully that works. Someone said, Can you go back to a patsy?
27:15
Yes, over here. Yeah. Do you have a question for this light?
27:22
I think that's straightforward. The port, oh yes, the port one was, yeah, so Port 80 is for plane, it's the P,
27:30
and that's what we're going to be using today because I don't expect you have purchased unnecessarily difficult for your local machine,
27:40
but the for your customers, you will be using four for three because you will be using a certificate for them.
27:47
Yeah. So at is the default one for today and every time you type an address, it's implied eight is implied.
27:54
If you put eight steps in front of it, four four three is implied, you know.
28:03
Now we are now going to add some files in our Web server, so 830 dogs is where zom keeps its files.
28:08
You can find this document with parameter. Um yeah, that's the board with a server is running 18, 44 three.
28:17
That's correct. And when you access that port, you're basically accessing the files that live in this folder.
28:26
HD docs, that's here for Windows, here for Linux and here for Mac OS X.
28:33
So that's where you're going to save your files today.
28:40
And when the web browser tries to access localhost port 80, they're going to end up in here basically in these folders.
28:44
They want to know that they're doing that. The web server is covering this.
28:51
It's hiding this. So just for today, renamed this folder to something else.
28:55
It's the docs old and create a new Ways to Docs folder so that we can put our files there.
29:02
So don't delete it. Maybe you want to see what's in there in the future.
29:08
Just rename it. Create a new one and put your files today in there.
29:12
OK. And if you're in Linux, you need to shut down. Of course, hopefully you can go.
29:18
It's a own machine, hopefully right now.
29:23
Let's talk about a few features of a party. So Dot 8's The Access is a secret file, which arranges the security aspect of a sub folder.
29:28
So when you create this file and you put it in a folder on your iPod, see you can make that folder become authorised only.
29:38
For example, if you do this, a series of commands in your access file and you put this on your public, it's the email folder.
29:48
Then the only people who can access your website on dock are people who have a valid user at Imperial.
29:57
So if you only want students of Imperial or teachers of Imperial for some reason to access your website, then you can install this.
30:05
You can include this file there and that will force them to log in, and they won't be able to see your files unless they have a valid logging.
30:13
Maybe you can use this if you were wondering with Kerberos is it's an authentication protocol.
30:22
That's the way you authenticate at Imperial and Dock, at least.
30:28
So because it uses LDAP, which is a Microsoft one, but Kerberos is the one we're using and to come back next year for more information about this.
30:32
This means that you force the user to authenticate. If you don't include this, then you're not asking them to authenticate.
30:44
Right. I mentioned that you can also introduce some extra modules in your server.
30:53
So if you introduce module rewrite module, right? You can rewrite your URL to make it more pretty in a way.
31:00
So if you have this URL right project SLAs are bytes the HTML, and you don't want people to see the whole thing.
31:10
Don't age the amount you can use module right to make it look like SLAs are fine.
31:17
So when someone types projects are PI, you're a party uses module right to rewrite this on the server side to the full thing.
31:23
And then even though the user sees this pretty little URL, they in fact they are viewing this long thing on the disk.
31:34
So if you want to make your website's clean, have clean URLs, you should use Mojave, right?
31:44
If not, there will be seeing the whole thing the file name inside the sub folder, inside the whatever.
31:50
OK, so that's easy to use, and you can combine this with the access.
31:56
That's where you write these commands to make your website look pretty when
32:01
someone's trying to view it and bookmark it or share the euro with someone else.
32:06
I mean, these days, people also use euro, sort the nurse, and they just take a very long URL and throw it in there and whatever.
32:13
But that's not always very safe because who knows what goes in there?
32:21
So just make your website look nice. By default, it's another file called the robot's text.
32:26
So that's an agreement. Every almost every single website out there should have a robot 0.60 file immediately after they wrote The Root Is this.
32:32
So when you have name dot extension SLAs, this last is the root of the website.
32:43
That's where it begins, right? Anything after this is files, hopefully inside the file server.
32:49
Now, the first files that you should install that it should introduce is Roberts Dot.
32:56
So this is a plaintext file that's being spider that's being scanned by the search engines to tell them what to look for or what not to look for.
33:02
So you can politely ask the search engines not to go into a specific some folder, right?
33:13
So don't think that they're going to respect it. Some do, some don't.
33:19
And some people find these files and say, Oh, they don't want me to go in there.
33:23
That's the first place I will look at, right? So don't think that this is secure.
33:27
It's not just the use this wisely. If you want to hide some folders that have dummy data or unneeded data, then you can use this, but more or less.
33:32
There's no guarantee that it's going to be respected or not. Yeah.
33:44
So if you were wondering, that's true, yeah, it's a nice pointer. All right.
33:48
So do you have any questions so far? Feel free to unmute if you want to.
33:52
No. No question. OK.
34:02
Sure. And actually, I've got a question, yes, sure.
34:08
Yeah. Are you going to teach the teachers how to set up these things on one of those servers, for example, Apache?
34:12
So when you installed Zap, everything has been set up for you.
34:21
So the server is running. You just press a button and you also run the database.
34:26
PDP has been preinstalled for you. You don't need to actually install the yourself.
34:30
And that's why I asked you to reinstall the stock instead of actually install them separately,
34:34
because that would take a whole week to do so correctly and securely.
34:40
But if you install the whole stack like zombie camp or whatever, then you get this done at once.
34:45
Of course, it's not safe and secure enough to be launched publicly,
34:51
but locally you can experiment as a test environment in order to add these files that are mentioned.
34:55
It's as simple as creating a new text file and typing these commands, right?
35:01
This specific one won't work on your local system, but it will work on your aim and public.
35:06
It's folder on our dark web server because we also run Kerberos in the background.
35:14
So if you use this, if you create like copy, paste this into a text file and you put it in the access dot,
35:19
that's the access accessible in your public folder. You will be forcing people to log in before they can view your website.
35:26
So there's nothing else to do. Is just this with Modi, right?
35:33
So that's something you can experiment with on your local implementation on your local jump,
35:38
and you'll need to do some read up there because it's very case specific what you need to achieve.
35:43
But again, it's as simple as copy pasting the command that says rewrite this to that invades the access robots is a plain text file.
35:49
I generally don't worry about this too much. If you end up publishing websites live in, then on the web, then just create one.
35:59
And if you want to use it, use it. If not, just tell it to machine do whatever you want.
36:09
There's a command to say Just scan everything. Yeah.
36:16
I hope that makes sense. Yeah.
36:20
Probably not, but yet, I mean, the answer is that it's out of scope to actually set these up one by one,
36:26
the point is to actually look at the code behind them. Anything else?
36:33
OK. So server side language is great.
36:39
There are a few of them. PSB is popular, has been around for a while.
36:47
CSR, which is a apex the extension, it's Microsoft that Java used to be a thing with GSP.
36:52
But if you want if you really want to use Java these days, just use this spring framework.
37:00
It's it's fine, but it's not very popular, but as popular as HP or HP.
37:05
Then you have Perl by a CDI, so you can even use the prosecution language for this.
37:10
That's what Kate was using and still using Python.
37:16
You can also use Python on your own a public demo on the dock server via Cinzia,
37:20
or you can use the Django framework on your own web server, which is also convenient.
37:27
Just grab the framework can adjust it. Ruby can also be done server side.
37:32
That's what LAPD's uses and JavaScript, right?
37:37
So I think, yeah, with React, we have Netflix and many other websites.
37:41
Facebook users react as well, but you also have Node.js and users and many more.
37:48
Yeah. So a few options to learn. So client versus server client code can work locally in your machine.
37:52
You just double click on the file and view it immediately on your web browser without even having a web server.
38:00
That's great. Server side you need the web server, otherwise the code won't be viewable.
38:06
You need the web server to execute the server side code in order to generate the client side code for you to view.
38:12
And this variation is happening dynamically, hence the dynamic site.
38:19
So it's not like you can generate it once and then you can use client side forever and ever.
38:24
Every time you press the panes, the server side executes that code.
38:30
Unless, of course, it has produced some static interfaces. Now, client side code can be viewed with control.
38:34
You mentioned yesterday. So that's a comment from the original website, as you found out yesterday.
38:42
Right? But server side code, no one's going to see that unless they are actually talking to your web server.
38:47
Hopefully, that won't happen. So that's the benefit of working on the server side if you are the common there.
38:53
They won't see it because that will be hidden. The client side code will not Typekit, and that's the end of it.
38:59
OK. So it's quite essentially the difference.
39:05
Client side Rantzen, the client server side, runs on the server and generates client side output, but you need both.
39:08
All right. If you only use client side, it's not enough.
39:16
Sounds like a very boring web site, and if you only use server side, well, then what are you saying to the client, right?
39:20
So you do need both. If you if you want to create a professional web site CGI, you may have heard those a few times.
39:27
It's a way of converting a language and using it as on the dynamic side.
39:35
So that common gateway interface. Don't confuse this with Computer-Generated graphics.
39:42
So the CGI is what allows you to use Perl or even Python on web server such as the Apache one and Doc.
39:48
So there are ways to to use these languages even on your own web site, even though you can't use be.
39:57
So we haven't allowed you to use that. You can still use CGI, so python via CGI and run that on doc.
40:04
Someone's asking What do you mean? We place this at the root?
40:14
I assume you mean the robot's text file, so the robot's text files should be placed in the root of your web site in the first folder,
40:18
immediately in public esteem, for example, or to docs in the example example.
40:28
So not in a sub folder needs to be immediately in the root.
40:34
Yeah. Why have we blocked certain languages?
40:39
What BHP is quite powerful and a. Most people don't need to be to create a simple website and be it gives you access to the Zen Subsystem.
40:45
We're going to talk about this today with sound gives you insight that enables you to have access to things that maybe you should be accessing.
40:57
So PSB is a security risk, if not set up correctly and not updated correctly.
41:07
And the thinking was worth the maintenance burden for us to allow you to use P2P if you want to rent some webcasts online.
41:14
You will find that they're probably offering PSB or specs,
41:26
but locally a doc you can create your own web site for the purpose of this module for fun without needing BHP.
41:29
What do you mean by interface? So you mean by client side code?
41:40
Is that what you mean? So the server side code sends creates client side codes, and that's what the user sees, if that's what you mean.
41:48
So that's the thing. If you mean this keyword, the interface and common gateway interface, is this a different interface?
42:00
It's what interfaces between your Python code and the actual web server,
42:09
so you're not actually running this directly on the server since the AI intervenes.
42:15
Basically, that's the interface. Yeah. OK.
42:21
So you can build a website, anyone can build a website even without knowing how to build the website.
42:26
Microsoft offers a sketch to code. You just sketch it and it builds it for you.
42:32
Workflow Weebly, I'm sure you've seen all of this stuff, Squarespace, whatever, right?
42:37
So people just point and click and create the website.
42:42
And then when something breaks, of course, they don't know how to fix it, and they pay people to fix it for them.
42:46
So why not just, I don't know, pay them to begin with and have a website made for you instead of using these templates.
42:51
But people make decisions on the fly like they see anade.
43:01
They think, Oh, maybe I want a website. Let's make one.
43:06
And then once they have it, they realised, Oh, it costs so much to update it without knowing how to do it ourselves, and they stop using it, right?
43:10
So, yeah, don't worry, they're not coming for the web developer job yet.
43:19
Maybe in the future where an API is more advanced, but we don't have to worry about it yet.
43:25
Now fronted versus back, and the front end is what the client sees,
43:31
the UI and the UX and we were talking about yesterday, the client side code backend is what happens on the server side.
43:37
That's the magic part. That's where the web developer really shows themselves.
43:45
So servers and databases, you need to know your server into your database.
43:50
Some people speak some SQL interaction, depending on the database you have.
43:54
So that's the backend side. That's the well paid side and full stack is if you can do both.
44:00
So if you can create both the backend and the front end right now, there's this meme that was going around a couple of years ago.
44:07
Like, if you're looking for someone who can write in all of these languages and environments and frameworks, you don't want the full stack dev.
44:14
You are looking for a native department, right? So yeah, that's that's true.
44:22
Don't don't be dragged into something that's Dumont's. If you can do a few of these, they should be paying you for enough for a full time job.
44:27
You don't have to do all of these to get a proper full time job.
44:39
That's a well paid one, right?
44:43
So if you find an internship over the summer or our placement in year three or your first job or at some point as a web dev or something like that,
44:45
don't do everything. Even if you know how to do everything, don't do it.
44:54
Even if they're paying you to do everything you want.
45:00
Have a life. You should want to have a life. OK, so be careful, right?
45:03
Any questions so far? No questions, no nothing on the job.
45:10
And OK, I guess.
45:22
All right, well, that's it for now, let's take then let's come back at three and we'll continue with the good stuff.
45:28
So you then? OK.
45:37
Welcome back. So let's continue to be what does it mean?
45:43
Who knows? Maybe it means be hypertext pre-processor, so that's actually what they came up with besides being the first being.
45:53
B is to be, yeah, you get the joke.
46:04
It's been around inside the Zend engine, so you will soon find that Java Iran's inside the JVM.
46:08
So Peter be also-rans inside an engine, which is called Xend.
46:17
It's not compiled, so it's not like a compiled language.
46:21
It's more of a scripting kind of language, but let's not fight about the semantics.
46:26
Some people consider it like a proper programming language.
46:32
Yeah, it's fine. It's mainly scripting, but you can also call it programming if you really want to do.
46:36
At the end of the day, Zent grabs your plaintext code and compiles it into byte code.
46:42
If you don't compile it yourself, then does it for you.
46:51
And that byte code is then executed by the end. So it's really a scripting language.
46:56
It just looks like a programming language because it's Zend engine compiles it into bytecode.
47:02
I hope that makes kind of sense. Yeah, some people really argue about these things.
47:09
I don't really care. Python does something similar, if you're wondering.
47:13
Now you write your code in Dot BHP farce.
47:19
So it's just plain text files with plain text commands and dot BHP.
47:23
So right now, you can open a new BHP file on your local zombie installation or whatever stock you chose.
47:29
Put it in your HD Docs folder. Call it Index BHP.
47:37
That's the agreement. Remember index, but not indexes the amount that they were going for BHP.
47:41
So index BHP and put it in your AC Docs folder.
47:47
Great. Now in BHP files, you can write both HD email and BHP.
47:51
So both it's fine. It doesn't matter. You can interchange. So this means you no longer need it.
47:58
The email files, you just use P2P for everything. Let let go of the static HDMI extension.
48:04
So BHP right now open this index beats been an editor, and let's begin with this journey.
48:10
When you want to write the amount in the fields before you just write the email.
48:20
That's it. You don't have to put it in anything. It's just like HDMI.
48:25
Imagine if this was an HDMI file. Just start with Dr. ETRADE's the HTML and by the ETC, right?
48:29
When you want to write BHP in the BHP file, you put it inside the special tank.
48:36
This is the less than question mark BHP. You put the BHP cold in here and then you end it with question mark more than.
48:43
So this is a special tag and this is for BHP only.
48:51
So the server the web server needs to be set up with BHP in order for this to work.
48:58
If it doesn't have it, then this is going to be displayed to the user.
49:05
So, yeah, make sure you have PDP set up correctly before you use any BHP coal mines.
49:10
Right? That's how you send this to Zent and then grabs the contents of BHP and composer then runs it.
49:18
Let's do something simple at first, so let's use Echo Echo is a simple command.
49:27
Maybe you've seen it in other places and it just echoes a message.
49:31
Okay, so we open and close PSB and inside we use the Echo function.
49:35
And again, it's similar to how JavaScript RC works. It's parentheses for the sending of the parameter value and then it's a string.
49:40
So double quotes and you put Helloworld whatever you want.
49:49
So this is going to echo hello world wherever you place this.
49:53
So remember when JavaScript had this document dot, right? And you wrote something in the document that's similar to that, but it runs on the server.
49:58
So when you control you, you will only see Hello World.
50:08
You will not see the whole thing because this has been compiled and not put the output,
50:12
gets the email, and this is the only thing that the client will see. That's very convenient.
50:17
Now this page works, of course, but it's as we said yesterday, it's not enough, right?
50:22
It's not enough to just say Hello, world. This needs to be inside proper HCM and tags.
50:29
Luckily, yesterday we spent two hours working on building a basic HTML page, so what you can do is grab your phone from yesterday,
50:36
the whole valley dog thing that we wrote and paste it in your index P2P file and then
50:46
use BHP inside the body to write Hello world in there in the div or the paragraph.
50:53
So that way you combine. Be any symbol in the same BHP file, right?
51:00
And then when the code executes, you're going to execute the BHP path and is going.
51:06
The output is going to be merged with the A.T.M. path and the can only see a simple output on the server side.
51:11
That's where the magic happens. That's the server executes a BHP.
51:19
On the client side, we only see validates the HTML5 code.
51:23
OK. So grab your code from yesterday. Paste it in the file.
51:28
Add the PDP call in there, whatever you want it to appear in a div somewhere around it on the web server by accessing local hosts,
51:32
and you will see the output that looks exactly the same as before.
51:42
So the output will be the same. The client will not know the difference.
51:45
He does know that something things on the backend because based email result is exactly
51:50
the same and doctorate rates they had on the body and some text that says Hello world.
51:56
The client does not know that the server executed Zen and grab this code and converted into white code and run.
52:03
And so this doesn't show to the client. Now, let's use another command to make it more interesting.
52:11
B. It's been four is a function that can help you find out more information about your web server and you'll now see once you run this command.
52:21
Why we don't want you running it's beyond our own servers. This will give you a very wide collection of values about your server.
52:32
Some more useful than others and everything you seeing there you can use.
52:41
So ACB user agent can give you which web client you're using,
52:46
which web browser or script name tells you the name of the page so you can actually use these values,
52:51
call them and retrieve them and show them in your page if you want to do.
52:57
You can say, Oh hi, hello world. Hello, user, I can see you're using.
53:01
Used to be user agent, which converts to Firefox, so you can actually use all these values.
53:06
Now let's talk about methods. How do we access a page?
53:12
Well, the get method is needs to be a command and allows you to get a page.
53:16
You grab that page. So get is the most common way that you use when you access a website.
53:25
When you type the URL in the address bar, you are getting that URL, you're using the get eight step command.
53:32
So for example,
53:40
if you type a step localhost lasting six B and then you have a question mark there and then you have a parameter name equals volume name,
53:40
you are getting this URL with the this parameter, this parameter name in this part of the value, right?
53:50
So that's what you're getting.
53:58
And when you land on this page index, BHP will see that you called it with this parameter and will create the get array, which you can access.
54:00
So you can see that the name of the variable was name boring, but it works.
54:12
So if you say get name, it will give you the value that you sent in the URL in this example, Gareth.
54:19
So when you use this in your code index, BHP question mark naming equals Gerald.
54:27
You will retrieve Gerald in the actual code and you can echo hello.
54:34
Yes, name equals girl. So you will say hello, Gerald.
54:39
Right? And then if you add another one with a number, Sunde country equals trivia.
54:43
For example, you can say, Oh hello there, Gerald from Revere or something like that.
54:49
So you can actually use all these parameters from the URL because they are stored in the jet array,
54:55
because you are using the get method to grab this URL.
55:03
And if you look at Google, for example, when you Google something, you will notice that you are getting Google, you're getting the Google results.
55:08
So you will see that it has a query Q equals and then it has a value,
55:16
which is the thing you typed into Google and you don't have to actually type your query in directly in Google.
55:21
You can just change in the value of the Q of the query in the URL, and that will give you a new year a new query.
55:27
You will change the search text keyword.
55:35
So so far we have the text that that it's the email from yesterday and we have a div, which has a NEG call that says welcome.
55:40
And then we want to append. We want to concatenate the name in the country that we got from the URL.
55:50
So they're stored in the get array. So that will be welcome.
55:58
And we use the dot, the dot in Page B concatenate.
56:03
So we say welcome dot and then get stable name dot off dot, get stable country.
56:08
So welcome Geralt of Rivia, for example, in this if you call it like this, right?
56:19
Basically, local hosts the name and right. So that will actually show a nice message for the user, and they will never see that you use this code.
56:24
So the Dot is the magic pure the magic part. Now get is just one of the methods.
56:36
There's another one it's called Post. In order to use post, we need to use some sort of submission.
56:43
HD Mail has forms.
56:51
Maybe you have used forms every time you press a button on a page, every time you log into somewhere, every time you submit your information,
56:53
you're using an HDMI form so aethereal pages can start to form with this and in the form with S+ form.
57:01
Just open and closed normally do add fields in the form.
57:10
You use the input dog, so input and then you use parameters to define what kind of input.
57:15
If you want a text field, you say type equals text and then give it a nice name so you can access it later.
57:21
If you want a button, a submission button, you say type equals submit and then the volume is what's displayed on it.
57:28
And also, you can give it a nice name if you want to access it, even though you wouldn't necessarily want to access this unless it's very specific.
57:35
But we have given a nice name to the input text field. We call the favourite colour.
57:44
All right, let's keep that in mind. Now we have created a form and that form takes us somewhere.
57:50
The the place where it takes us is the action of this form.
57:58
So the action is where should I take you? What should happen?
58:03
So when you press this submit button, it's going to take you to the action of the form.
58:07
In this case, it's another P2P file, which is the caller.
58:13
So when you press this button, it goes to the action and it submits the entire for the entire information of this form onto that file,
58:17
which means that whatever you have typed into this text field, the favourite colour will also be sent there.
58:28
But how well you can select if you want to use the method of get or the method of post the post the method.
58:36
Unlike the Get method, the post method sends your data on the backend on the server so they're not appearing on the URL on the address.
58:46
Like before they go on the backend from the server side, they're hidden directly to the destination,
58:55
and we want this when we are sending sensitive data like credit card information or passwords or something else.
59:04
If we don't care about the data that we can use, get inside of post and they will appear in the URL,
59:12
but don't use that for sensitive passwords or whatnot. So if you don't care about your favourite colour song in the euro,
59:17
you can say method equals get and that's fine when you press this button and submit, you will be taking to colour.
59:25
Be like this, and then you have the question mark.
59:32
Favourite colour. That's the name of this field that you submitted equals.
59:36
And this blue volume came from whatever you entered on the form.
59:41
So when the user runs this page, they say it's the HTML code.
59:47
They will actually see a form with the single text field in a single submit button.
59:51
If they typed the word blue in there in the press, the submit button.
59:56
They will be taking to the action of this form, which is called repeat B. We are.
1:00:00
And then because we used get this is going to be added with a question mark and then the volume name is here and the value of the property is here.
1:00:05
Great. So this reminds us of Google of a previous example with Gerald and so on.
1:00:16
But that's not always safe if this was a password.
1:00:21
We don't want this operating on the URL, the one this travelling on the back side, on the server side.
1:00:24
So this is the connexion.
1:00:31
Visible, let's try to hide it, let's use post now when the user presses this submit background with Post, they still go to call her PSP.
1:00:36
But the data, the value of blue, they are sent on the server side, so they're not showing on the URL.
1:00:46
And that's what you should do for almost every single form unless you have a very specific reason that you want to get or some reason.
1:00:54
So most forms you're using out there, every single one,
1:01:01
almost almost every single one users post here and the data are still available to you, but they're not in the get table.
1:01:04
They're in the post table. As you may have guessed.
1:01:14
So if you want to echo your favourite colour, you go in the post table, unlike before we went to the get table.
1:01:17
So you still use Echo? You still concatenate. But this time it's post and then the name of the value is trying to access.
1:01:25
Right? Great. And now the data were sent to the colour file and it tells you your favourite colour.
1:01:33
All right.
1:01:40
Remember that anything sensitive and needs to be posted, anything that we don't care about, like search queries that can be get gotten right.
1:01:40
And that's an example with Google I mentioned before.
1:01:51
So if you go to Google to this last search page, which is really written, of course, this nice Modbury right here,
1:01:53
the Q value, the Q properties, the query equals whatever you type, here is your query.
1:02:01
So you can actually bookmark this, and it will always take you to the search query imperial, for example.
1:02:08
That's the the name of the property, the argument, and that's the value of the property.
1:02:16
How many questions so far? OK.
1:02:22
No questions. That's fine. I hope this has been interesting so far.
1:02:31
Now moving on, I mentioned databases, so dynamic websites need databases to store their data and retrieve their data from there.
1:02:39
There's going to be a local database or remote one.
1:02:48
So, for example, in your Zoom stock, you have the Apache Web server running on the same computer as your Maryland database, for example.
1:02:51
But most of the time in real world scenarios, you wouldn't have the web server running on the same server on the same machine as the database server.
1:03:00
You don't want everything crashing at once, right?
1:03:10
It's a database goes down, maybe the website, so it can still be running, displaying some error messages or of some sort.
1:03:13
So ideally, you separate the servers that the Apache and Maria or maestro or boss Chris is running.
1:03:20
So the database is basically a collection of files in a specific binary manner that hold your data and then your PDB
1:03:30
or HP goes there and retrieves those data and returns them in the same format that the web browser is expecting.
1:03:40
And you can also create nice HTML forms,
1:03:49
and the user can add data in the database without you intervening without you having to add the data yourself.
1:03:52
Right? So many popular databases you may have heard of Oracle may ask You Are which now also Oracle Mass Microservices,
1:04:00
your server like popular Postgres, you may have used this last term.
1:04:07
And if you are an imperial student, you should have one for free. MongoDB be quite popular for big data and many more.
1:04:12
Maybe you've heard of ElasticSearch, Redis and the Neo4j. Take a look at these are quite neat.
1:04:20
Depending on our scenario, most databases, not all databases.
1:04:27
You have tables and you put your data in tables and tables have rows, and every row is an entry, a record, basically.
1:04:32
But this is only for relational database four databases that use tables.
1:04:41
Not all of them do. OK. So keep that in mind. If you're a doctor you then you are the database that we use here is post-crash.
1:04:46
You know, you can click here, even if you are a the same scene, you have never used it just for fun.
1:04:57
Just click here and take a look at how you can set up your own Posterous database account,
1:05:02
and then you can create databases there that are stored on our server.
1:05:08
So even if you lose your data, they're still stored there.
1:05:13
Because we have daily backups of our servers. XAMPP that you have installed probably came with its own database, MariaDB,
1:05:17
which is based on my school, but they changed the name for copyrights because Oracle.
1:05:25
Anyway, so MariaDB is one such database so you can go in the control panel of XAMPP now and press the Start button,
1:05:30
and it's going to run MariaDB on a specific port number.
1:05:38
It's three, three or six, if I remember correctly. So that's going to run this service on your machine and then you can connect to it.
1:05:42
But how do we speak to it? I mentioned this yesterday briefly, and the answer is yes, given the structured query language.
1:05:51
So this is not the programming language, it's a computer language. It's a query language, but not a programming one.
1:06:01
So if you if you're writing your CV, don't put oestriol next to your programming languages,
1:06:07
put it separately or just name the whole section of computer languages.
1:06:13
By the end, it's not programming one. It allows you to speak to databases and not just to retrieve data,
1:06:17
but also to store data or even create databases and destroy databases if you want to drop them.
1:06:24
There are a few things you can do with Astro. There's a standard version ANSI, but different vendors.
1:06:31
So Oracle, Microsoft, they have their own add ons on top of the fancy one to add extra functionality.
1:06:36
There are a few different types of astro commands with data definition.
1:06:44
Once you define the tables where you start your data with data on insulations, you manipulate the contents of the tables.
1:06:48
You have data, you delete them with data control, you change the access rights to define who, access who,
1:06:57
who can access your data, your databases and with the transaction control once you organise them and you run queries in boxes.
1:07:03
So that's where Microsoft Nautical have invested most of their power, because why would you choose one over the other?
1:07:11
It's the extra features that they have added on top of the ANSI standard.
1:07:17
Yeah. Today we're going to be using plain old Maria with Plainest Girl,
1:07:22
and because I don't want you to actually learn how to enter data with the user interface.
1:07:28
We're going to use HP both to create a database and to add the table in the records in the table.
1:07:38
Normally you would be doing this from a separate interface, depending on your scenario, of course.
1:07:45
But just for today, I have prepared this file. It's called the query statistics.
1:07:51
It lives on my web page. So if you have the slides from science and this, click here.
1:07:57
You're going to get the file and you can just copy paste these queries in your code.
1:08:02
OK, so hopefully you have enough time to do this, and now we can take these queries and put them in our speak code in order to create
1:08:10
the database and the server and then the tables and the data on the tables.
1:08:18
Now we need to open a beat and write the function that executes queries for us.
1:08:24
If you remember from yesterday, the word function will be used in JavaScript is the same here.
1:08:31
You just have the word function and it starts to function. Give it a nice name.
1:08:37
The parentheses mean it's free of parameters, but that's this c style of writing and the code goes here.
1:08:41
It's just like JavaScript in there. We can define things.
1:08:47
If you want to define a new variable, you just use a dollar sign.
1:08:52
So dollar sign cost is available variable called host grade, whereas the data type we don't have one because it's not a programming language,
1:08:56
it's a scripting language and there's not nothing to be ashamed of.
1:09:06
But just be careful what you put in there and because you can put anything you want in there and just like JavaScript.
1:09:09
So the host is the name of the server, and in this case, we're using our own computer, which doesn't have a name.
1:09:15
We haven't purchased a name. So we're just using the localhost keyword.
1:09:24
The agreement of local host username is the one we're going to use to connect to our database.
1:09:28
Root is the default one set for MariaDB on the XAMPP implementation.
1:09:34
If you're connecting to Postgres on our dock servers, you will need to change your username, your account,
1:09:40
your student account password is going to be using to connect to this server with this username for the default installation of XAMPP.
1:09:46
There is no password. So this should never go live, OK?
1:09:55
The password is empty. That's why it's not secure along with other settings.
1:10:01
So this would never go on the public internet. This is just for you to experiment locally.
1:10:06
And today are going to create a database called the B movies.
1:10:11
So we define the database variable with the value of TV movies.
1:10:15
Great. That's what going to build today.
1:10:19
PDP has a collection of functions to interact with my school, and since Maria is basically my school, they worked out of the box for Maria as well.
1:10:23
These are the function names you can click on them if you want to find out more.
1:10:32
But more or less we have one to connect to the database server. The MariaDB running on our machine.
1:10:36
One to check if we want us to connect or not want to select the database if available.
1:10:42
One to query the database. One to grab the results of that query and want to close the connexion to that server.
1:10:49
So now they're going to use beads, be given the Greater Peace,
1:10:58
be found to create a database on our database server and to add tables and to our data in those tables.
1:11:02
OK. You could also do this with a UI, for example. To me, my admin is most popular when you go to a web host and you buy some space there.
1:11:10
They will probably offer this interface to you, and you can just use this to create a database with this interface.
1:11:19
But you can also write your commands to do it yourself from your code if you want to.
1:11:26
It's up to you. So the first three queries to execute is the Create database, one that creates database called DB movies.
1:11:31
That's a new database on your database server DB movies.
1:11:41
Then we need to select this database. They're going to run the second query,
1:11:45
which is going to create a table called table movies in this database and then
1:11:50
we insert into this table would have created some data with this format.
1:11:55
OK. It's going to be a movie with an idea, a title, a genre and a year of release.
1:12:02
Right? So I'm going to use these queries now, and they should be available in the query file that they set with you on the page.
1:12:08
Now, in order to set this up, let's create a simple setup before.
1:12:16
Now, if you're worried and lost and confused, don't worry this is being recorded, right?
1:12:21
Hopefully, yes, it is, and you can watch it later and go slide by slide and follow the steps and pause while you build this.
1:12:27
So for now, just try to follow the process and let me know if you have any questions at any point you want.
1:12:35
So this setup needs before it's going to run, the queries are going to create a database in the table and populated with data.
1:12:42
So we saw before that this is how we define the variables great for variables.
1:12:50
And now we need the commands that we mentioned to actually connect to the database.
1:12:57
So we say muscular connect and we use the host value, which is local host.
1:13:01
We use a username value, which is root and the password which is empty, and we store the results of this function to my DB.
1:13:07
So this is going to return a connexion to a database to this database specifically, but not a database database, but a database server.
1:13:17
So you are not connected to a database server and database server can have more than one databases on it.
1:13:27
So when you connect to the database server, you can create thousands if your server can hold thousands of databases.
1:13:35
The same goes Yes, please go ahead. Yes. And we need to specify that database.
1:13:42
So we are not at that point yet. At this point, we're just connecting to the server.
1:13:48
So the first step is connecting to our MariaDB database server.
1:13:53
And if this is successful, then that's great.
1:13:58
You want get in this. If if it's not successful, you will get an error message and you will get in this.
1:14:02
OK, let's assume that we were successful and we want to connect to our database server.
1:14:09
Now we need to select the database. So we're in the middle of this, if now.
1:14:14
So we create a query, create database, the B movies and we run this on the database server.
1:14:20
It might be that we got from here. So when we connect the server for the first time, there was no database on it.
1:14:29
The database server was database free. He didn't have any databases.
1:14:36
So now we are going to create our first database, which is going to be called database movies.
1:14:42
So when you run this query, if everything goes well, you're going to end up with an extra database on your server, which is great.
1:14:49
And then you will need to select this database, which is what you ask.
1:15:00
And here we are. We are selecting the database. The value for database came from here.
1:15:05
DB movies, right? OK, so now we have selected this database on this database server and we can start running queries for that specific database.
1:15:11
The first we're going to run is to create a table table movies we mentioned before.
1:15:23
So create table movies and that they will have some columns, some fields, an I.D., a title, a Zandra a year.
1:15:29
And we said the primary key to be the movie I.D. If you don't know what we're talking about,
1:15:38
basically imagine an Excel file, an Excel spreadsheet and you're listing the list of movies in your collection.
1:15:42
So the first column is the idea that you have assigned one, two, three, four or five.
1:15:51
The next column is the title. All your movies, the next one is the genre like action or thriller or whatever, and the last one is the year.
1:15:56
So this is what this is saying and the idea needs to be unique. You don't want to movies with the same idea.
1:16:06
No. That's why we say this is a primary key.
1:16:12
So by running this query on this database that has this specific database selected, we are going to create that they will movies on our DP movies.
1:16:15
And now that we have done this, we should have a table movies ready to be populated with data.
1:16:25
And that's what we're doing with insert into inserting do inserts data into our table.
1:16:32
So we are inserting into table movies, these three rows.
1:16:39
That's the idea. That's a name. That's the general and that's the date of release.
1:16:44
More or less. OK. So we added three movies in our table movies table over the movies database over MariaDB Server.
1:16:48
Great. And now we're done with the server so we can close our connexion. May I ask you like those might be the end?
1:16:59
We disconnected. Great if you could. Just because this is written doesn't mean it has executed it, right?
1:17:05
So if you go to your local hosts last set up, it's B.
1:17:12
That's when it runs. So you need to run it via the web server.
1:17:17
If you just double click on it, it will probably open up in the text editor.
1:17:22
You need to actually run it through the web server. You want a party to use Zent to compile this into byte code and around this.
1:17:27
That's when the queries are going to execute. OK.
1:17:36
So let's assume that everything went fine. Do we know that everything worked well?
1:17:40
Let's try to select the data to see if they're there.
1:17:44
So let's write that an extra query. Let's do it.
1:17:48
Then separate file. Create a new file movies maybe copy your usual structure.
1:17:52
The basic validates the structure that you have, and you can also use some of the PDP code from the setup file.
1:17:59
Let's see how it looks like doc type head. But the body, it's HTML and then you have to be.
1:18:05
You have the host username, password database and then you have the connexion to the database server.
1:18:12
And just like before, the error message is great and then you're in the house.
1:18:17
And now this is where the magic will happen in the house. OK?
1:18:23
In order to select a database, the database server, we normally have to use the selected Abase Command Master and I selected is great.
1:18:27
OK, now we want to get some results now out of this.
1:18:34
My The B movies, for example, how do we do this?
1:18:40
We used the select query select everything from table movies that's going to return some results.
1:18:44
So this time we assign these results into a value, a variable, which is the results in this case, dollars saying results.
1:18:52
So everything that's going to be returned, if anything is going to be returned in here and we need to loop through this.
1:19:02
And you may have seen loops in copying already, so you need to loop through the results to get them to show on your page.
1:19:10
We use a while loop and we say FETs, the array that lives inside the results, and that's the parameter we use.
1:19:20
You can click on it to see why it's there. So fetch the array of the results if there's anything in there and put it in a.
1:19:28
So we go row by row of that array and then we go to the next and the next one.
1:19:37
As long as we have rows to view. So for that role, we echo that movie title of that role.
1:19:42
So where did this come from? Remember, when we defined the table, it had a column called Movie Title.
1:19:51
That's the second one, the name of the movie, right? So in this example, we're looping through the results.
1:19:58
We asked for all the entries, all the records of table movies, and we're just presenting the title column.
1:20:04
We're ignoring the rest one. So this loop is going to echo the movie title and a b, you should remember that's the break.
1:20:12
It enters a new line. OK. And then it closes the connexion.
1:20:20
So if everything went well, if we successfully create a database and a table and the data were added correctly and then we selected them correctly,
1:20:24
then this should have three rows of data that say, then three names of the movies we entered.
1:20:34
And you should be seeing this in your output.
1:20:43
So when you have time to run this, you should be seeing these three titles because these are the ones we had it with our insert query.
1:20:46
Of course, you can play around. You can add whatever you want. But this is just an example.
1:20:55
OK. And that was it's been 20 minutes or less.
1:21:01
Any questions? So is it secure to place the database passwords, plaintext in the PDP code if you are posing to a public gate?
1:21:05
No. So if you're planning on making your code public in a gate somewhere?
1:21:19
No. If this is a private report, then you could potentially put it in a private file on a file system somewhere and make that
1:21:26
file contains the mod access rights and make those readable only by specific accounts.
1:21:37
And the account that's going to access the file is the one that belongs to the specific script that's running.
1:21:43
But generally, we don't put passwords in public places.
1:21:49
You can leave it empty, and people who clone your repo can populated with her own data, but don't actually put your actual password.
1:21:56
There are people individuals who post their passwords as part of their code in public repos,
1:22:04
and you may have seen stories about this where they lose everything because someone funded it and abused it.
1:22:12
Right? Next question What is it?
1:22:20
How would you encrypted for public people? You could encrypted many ways, for example,
1:22:27
you could have a password that is used locally and that password and encrypts a file that is used publicly.
1:22:34
So this is how public encryption works in a way.
1:22:46
So again, you will need to have a private password, though, which means you need to agree on it locally.
1:22:50
If you don't remember it, use a password manager, then write it down on a piece of paper.
1:22:56
So every time you use this, you need to an unencrypted file with a password using your own password.
1:23:01
There are a few ways to do this, but generally speaking, if you're going to put into a public report, you would leave this file out using it.
1:23:08
Ignore. You wouldn't be pushing your password to file publicly.
1:23:18
You and the other questions. No, the benefits of peace that people want, see your cold unless you give them your cold, right?
1:23:23
So they will only see the HDMI output that this code executes and generates.
1:23:33
So yes, you could type a password in there if you wanted to.
1:23:39
Definitely. And they will not see it. But if someone finds your code in some way, legally or illegally, they will have good passwords.
1:23:43
So, yeah, keep that in mind. Right?
1:23:54
Examples of web applications.
1:23:58
Um, every year I ask your classmates who have already created dynamic web sites to present their work this year for the first time.
1:24:00
I never I didn't have any volunteers, which is not great.
1:24:10
Maybe someone who's here would like to speak if they're willing and brave enough.
1:24:15
OK. Well, I'm sure someone has done something.
1:24:25
Um, even if it was for fun or a family member, maybe ask them to do something and.
1:24:31
Yeah, but yeah, um, I can't force anyone to speak up.
1:24:38
Maybe I will share my experience when I was little younger than you are.
1:24:43
I learnt how to code in HTML and there was no says back then and I learnt JavaScript as well and I learnt to be.
1:24:49
And then my skill, I learnt the basics of oestriol. It was only my skill and I create my first website when I was, I think,
1:24:57
15 and a half, maybe or 16, and I got paid and I spent all my money on my first.
1:25:07
See the writer, not DVD writer. It was a c, the writer.
1:25:15
So you know how old I am. Right? Yes. So I got my first C writer with the money of my first website.
1:25:20
Is there a question? No.
1:25:29
OK. So, yeah, that's how it all started.
1:25:33
Thank you, thank you. And I spend a few years as a web developer for many companies and many clients and do at
1:25:40
some point I didn't like it anymore and I stopped doing it and I did something else.
1:25:50
And here I am now. So that turned out great because it gave me money when I used money.
1:25:57
And then when I got bored of it and it wasn't worth the money anymore, I just did what I liked doing, which was teaching my case for you.
1:26:03
It could be web development. You could be a very successful and well-paid co-development if you're working for Facebook or Amazon or something.
1:26:11
Yeah. Um, can you tell us about some interesting WebDAV work you've done?
1:26:20
So web dev. I know you said interesting.
1:26:27
Hmm. That's and it's interesting. Yes.
1:26:32
Hmm. Well, there was a website that I built for the Ministry of, uh, Foreign Affairs, I guess.
1:26:38
And it was just tourism back then,
1:26:53
and it was the website that was we were still using Java servlet back then and mid-length as we were calling them in the day,
1:26:56
and that took a lot of effort. Uh, so it was it was.
1:27:04
Java was the speed was lots of things, and we had to follow specific ISOs because it was a government website.
1:27:09
So that was a lot of effort. And I spent like six months building it and then I presented it and it was
1:27:17
successful and they liked it and everyone was happy and they got paid for it.
1:27:24
They got paid. I got paid my salary and then I asked them, So what happens next?
1:27:28
And they said, Well, we're going to use it for two years.
1:27:35
That's that's the contract. And then and they're going to scrap it and we're going to use a new one.
1:27:39
And that's when I decided that I didn't like that life anymore.
1:27:46
Uh, so yeah, that's when I switched over to teaching.
1:27:50
And I hope that story matches your interesting keywords. Yes.
1:27:54
So what time do you have a web browser?
1:28:01
Yes, you do use a code, specifically this code, to go on Mante dot com and see what you remember from today.
1:28:06
So. Name servers offer records as part of which protocol necess and the mess seems DNS.
1:28:20
And of course, there's only one right answer, hopefully, you know, it's DMs A.S. is that survey you answer every year at the end of your studies.
1:28:34
So, yeah, l'OMS is learning management systems are nothing to do with that seems it's content management system.
1:28:43
Again, nothing to do with that, but you could build one, and the nurse is the actual protocol slash service next to one.
1:28:50
The eight stops padlock appears because of which certificate.
1:29:02
The msss, the SSL, the CSX or the VMS.
1:29:08
And the answer is Cecil VRMs, who was the visual, I think it was virtual machines or something, yes or not, this one.
1:29:15
SSL is the one that you need to purchase, which is also called TLC these days.
1:29:25
But yes, SSL certificate is what it's known as.
1:29:31
Next question. Which Web server does Doc use?
1:29:37
Hopefully, you remember this from yesterday and today Zampa has Haskell a Patsy Wamp.
1:29:43
And there's only one right answer, which is our Patsy Nussbaum is the stack is the patsy Maria,
1:29:50
the B B it's b pearl stock that you installed locally on your machine dock specifically uses a patsy, whereas imperial uses.
1:30:01
Yes. Next question.
1:30:12
BHP stands for.
1:30:18
Well, Iran's inside the Zend engine is not compiled by the user, is compiled by Zent into bytecode, all the other answers are correct.
1:30:24
So you should remember today BHP is not compiled directly by you.
1:30:35
It runs inside the Zent engine as bytecode, which has been compiled by Zent, so all the answers are correct.
1:30:41
And last but not least.
1:30:52
And Cisco allows you to. Eco art put in a Web page format, content of a Web page.
1:30:58
All of the above. None of the above. So these are the quizzes that you're going to get bored of next year if you pick up networking with me.
1:31:07
Yeah. So Eskil does not echo output. That's the command of BHP or the document write of JavaScript.
1:31:17
It doesn't format contents that see us says so. Not all of the above.
1:31:24
It's none of the above. Yeah. Always read the question.
1:31:29
If you care about numbers well done to William, I believe yes, a very close one with Clippy there.
1:31:33
So William. Yay. And I'm switching back to the slides to wrap this up.
1:31:39
OK. So to summarise, you can purchase a domain name for your website or for your clients websites as long as it's available,
1:31:50
and then you will need somewhere to host it.
1:32:01
Web hosts then you will need to write code for the backend, which also means that you're writing generating code for the frontend.
1:32:04
So you can't say, Oh, I only write speak, for example.
1:32:12
No, you also need to know it's the email. CSF sends our script, even though you can have a separate line of work so frontend versus backend.
1:32:16
It's quite common that you're going to end up doing both things. B2B is a powerful server side language for dynamic websites.
1:32:25
Some people don't like it, and they prefer speaks with Cesar, for example.
1:32:33
And that's fine. Python is also quite popular, so you can use that as well.
1:32:37
And databases are essential if you're going to have a dynamic web application on these days, so you will need to know some basic skill as a minimum.
1:32:43
Now you have, you should have WhatsApp installed or something similar on your machine.
1:32:53
Create your first dynamic website on your machine locally and play around with it.
1:32:57
Or you can add some dynamic features in your doc website using CGI and Python, for example, or just using JavaScript.
1:33:02
That's also fine. So you can also take your CV that we talked about yesterday and add some extra pages to its CSX converted to bootstrap.
1:33:10
Make it nice and fun. It's up to you. Just enjoy it.
1:33:19
That's the important part. Or get well paid for it, whatever you prefer.
1:33:23
I prefer enjoying what I'm doing, but you need to start from somewhere.
1:33:28
Right now, here are some books that many tutorials online feel free to explore.
1:33:34
And any last questions at this point. Yes, I got a question.
1:33:39
Yes, go ahead. So what do you mean by saying that she is bound by a judge so for students?
1:33:47
So you mean, and what do you mean exactly, like you said, like we are not allowed to use free of charge?
1:33:56
So are you a student on our server or on our dock Apache server as a students?
1:34:05
So in your public AIDS themed folder, if you are the PDP file, it won't be picked up by Xend.
1:34:11
It will just remain there as plaintext. That's because it has been turned off, basically.
1:34:18
So what about if I write something like Bean Bean binary code to like, is there a level like called?
1:34:26
Binary code US CGI, even if you execute the PSP on your own Web server and you somehow pick up the binary output of Zent,
1:34:35
if you put it in our Apache server,
1:34:45
it will not execute because our Apache does not have descent that can translate the byte code and run it into or hates the email.
1:34:47
So that's on purpose. What you can do is use CGI, which has been enabled and then combine it with some language like Perl or Python after you.
1:34:56
And yeah, you can still do that if you wanted to. OK, so.
1:35:05
All right. Can we ask you questions about our personal web project?
1:35:10
Well, you can try me. What what's the question? You can also speak if you want to.
1:35:15
Oh, when you have one, yes, I mean, sure, I'll be happy to help if I can.
1:35:19
I mean, I haven't created the website in a few years, but I stay up to date as much as possible.
1:35:24
When you start working on your own website, feel free to use edits them to ask others about your questions.
1:35:31
But if it's a very specific one, feel free to email me as well and maybe I can help out.
1:35:38
That's absolutely fine. Yes, go to it whenever you want to, whenever you have the project running.
1:35:43
Great. Well, thanks everyone for attending and for joining us today.
1:35:48
I hope you found this useful. I will upload the video on Panopto and then you can spend some time if you want to experimenting.
1:35:54
And I'll see you next week with Dapper Labs. Take care.
1:36:02
Bye bye.
1:36:07