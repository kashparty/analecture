ID: 319709da-0479-4a96-b5ff-ae1400bef013
Title: K2J - 5 : Lists and Entry Points
Category: KotlinToJava
Lecturer: Robert Chatley
Date: 05/01/2022
Now that we have points and circles, we're ready to go ahead and build the rest of our radar.
0:05
So let's create a new class for radar. And in this class, we want to create two fields, one of which is going to hold a list of points.
0:12
And the other is going to hold a circle, which will be the current field of view.
0:27
So let's start with the list of points. So in this case, we can define the type as list of point just in the same way as we did in Scotland,
0:32
where the angle brackets show a type parameter that's going to specify the type of the elements of the list.
0:43
We'll give it a name.
0:50
And now we need to initialise it in this case, I'm not going to use a constructor, I'm just going to initialise the value of the field in line here.
0:53
In Scotland, we do use the list of function to create an immutable list, but as we've seen, there are no top level functions in Java.
1:03
But in place of that, we have a method called of which is a static method of the class list.
1:12
So we can say list dot of and then we can pass in the elements that we want.
1:18
So this is pretty much equivalent to using the list of function and copying.
1:23
So let's just create a few points. OK, now we've got the list of points, let's create the other fields, which is the field of view.
1:27
Private final circle. Field of view.
1:57
And this is a new circle, and that circle is centred at a point, which is that three four.
2:04
And it has a radius of three. Now, in order to run our application, we need a main method.
2:12
But because we can't define a top level function, we have to define main as a static method of a class.
2:22
So in this case, it seems reasonable to put the main method inside radar as that's the main class of our application.
2:28
So here I'm going to define the main method so we can actually run our programme.
2:36
The signature for main in Java is public static, because this is something that is effectively a top level function.
2:40
We're just putting it inside the right class, Boyd, because it doesn't return anything.
2:48
Main, and in Java, Maine always takes an array of strings as an argument for command line arguments and the way we specify that is like this.
2:55
So this is a very common signature that you'll get used to using public static void main.
3:08
And in fact, intelligence has a shortcut to generate this where we can type B m for public static void main and Press tab,
3:14
and it will complete this method for us. We just have to fill in the body. So now inside this body, I can create a variable rate on.
3:22
Which is a new object of this type. And then perhaps I want to print the current state of the radar.
3:33
What we did before was to have the printing of the radar just to show the points that are currently in the field of view.
3:40
So like in Scotland, I can call print line, but print line again is not a top level function.
3:47
I have to call System Dot out, stop replying.
3:54
And we saw this a little bit when we were looking at input and output in Scotland.
3:58
So I called system out of print line. I can pass radar here.
4:03
So we use print line exactly as we do in Scotland. It's just that we have to prefix it with system dot out.
4:08
Now, if I run this programme, we should see, maybe we'll be expecting that the string representation of radar is not very useful yet.
4:15
So let's implement a two string that's going to actually determine which points are currently in the field of.
4:24
So we'll add a two string method to out.
4:30
This is going to be a public method. It's going to return a string.
4:35
It's going to have the name to string and it's going to have a black body and we're
4:40
going to override the default implementation to give us something a bit better.
4:45
Let me write this method in Scotland, because we had a few steps to assemble the string,
4:52
we used a string builder and we can do the same thing here so we can have a string builder.
4:56
This is a jam packed line string builder, so it's from the Java Standard Library,
5:02
but it works just like a cotton string builder that we've used to for.
5:05
I want to make a new one, so I use the new operator to instantiate the class, and at the end of the method, I want to return as B dots to string.
5:09
Then in the middle, we just have to append the relevant values to the string builder.
5:20
So first of all, let's append. Points in view.
5:25
And then make a loop over all of the current points in the points list and check for each of them,
5:37
whether or not they're in view and if so, append them to the string builder.
5:43
So again, we can use a follow up. This is pretty similar to how we used it in Scotland, right?
5:47
But the only thing that's different is that I have to declare a type here.
5:53
So this is four point point in points.
5:56
And then for each of those points, we can say if the field of view includes the point.
6:04
Then what we should do is to append that point. The string builder.
6:12
So that works just as it did in Scotland. The only difference being that we have to specify a Typekit.
6:20
So hopefully, if we run the programme now, that's going to give the desired results.
6:29
OK. And it's good. And now what we want to do is to be able to scan the radar across the field of view by moving to the left.
6:35
So let's try something like this. And again, this is a method of radar that doesn't exist.
6:48
We haven't created it yet. This will be an instance method because it's called on a particular object of typewriter.
7:01
So we'll add it here. This method doesn't return anything, so it will be void.
7:08
So this is public void. I mean, if left, it doesn't take any parameters.
7:15
We define the block for the body, and all we want to do in this method is to translate the field of view by minus one and zero.
7:21
Then hopefully, if we. Add a few more lines like this.
7:33
Then we should see the effect of the scam. So that's shown adding a main method to a class to give us a point of entry where we can start
7:43
our programme and demonstrated the common main method signature public static void main.
8:04
And we've also shown how we can use a string builder just in the same way as we did in Scotland and
8:10
a full leap in almost exactly the same way as we did in Scotland to iterate through a collection.
8:16
And we looked at constructing a list.
8:23
In this case, this is an immutable list by calling list dot of in the same way as we would have used the list of top level function in Scotland.
8:25
And that's going to create a type list of point and then we can use that in a familiar way.
8:34