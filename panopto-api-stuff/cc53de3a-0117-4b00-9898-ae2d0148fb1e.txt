ID: cc53de3a-0117-4b00-9898-ae2d0148fb1e
Title: 8.5 NP
Category: COMP40008 - Graphs and Algorithms (Spring 2021-2022)
Lecturer: Iain Phillips
Date: 07/03/2021
Now going to talk about the class ENPI. Let's start with an example.
0:02
We already know the Hamiltonian path problem, which is given a graph.
0:08
Does it have a Hamiltonian path, which is a sequence of nodes which gives us a path all the way around the graph visiting each node exactly wants.
0:14
Let's remind ourselves with the diagram. So if we have a particular graph.
0:26
I think we had one like this one over there. Case here.
0:38
Here we are. One, two, three. Well, then, here is a Hamiltonian path.
0:42
One, two, three, four, five. Okay, so this graph does indeed have a Hamiltonian path.
0:50
And but in general, this can be quite a hard problem because if we have an nodes, then we've got an factorial different orderings.
0:58
Now we know that we can improve. We can get an algorithm which works a bit better than N factorial.
1:09
And we can go to two to the N n squared order that algorithm.
1:17
But we don't know how to solve that in polynomial time.
1:25
But if we are given the path as a sort of guess where if we guess that path, then it's easy to cheque whether that is a path or so.
1:29
If I give you the one, two, three, four, five, then it's easy for you to cheque.
1:39
That one is adjacent to two is adjacent to three. Three is adjacent to four.
1:44
Fourth adjacent to five. And so you can verify easily that it is a Hamiltonian path.
1:48
So you just need to cheque that we have a permutation of the node, some tree, and the successive nodes are in the path or adjacent.
1:56
So it's pretty clear that we can carry out these tracks in polynomial time.
2:05
So Hamiltonian path from being quite a difficult problem. High complexity, apparently not polynomial time.
2:10
If we don't know, the path becomes an easy on an normal time problem.
2:18
If we guess the path. And another way to look at this is thinking that the Hamiltonian Path PI acts as a certificate, that G has a Hamiltonian path.
2:22
So as a yes instance of the Hamiltonian path problem. Well, of course, guessing is not so easy.
2:34
And we might guess wrong. So if we guess the path and we discover that it's not a Hamiltonian pulse of G, then what do we know?
2:42
We're none the wiser because it might be that G has a different Hamiltonian path.
2:51
So if I guess one four, five, two, three, let's say, then okay, it's then that one works out as a Hamiltonian path.
2:56
But we can also guess one five three to four.
3:07
That isn't a path. Or I can guess one one five two four six.
3:12
And that is not a permutation of the notes. So we can make wrong guesses.
3:18
And they don't tell us anything because there might be a different Hamiltonian path or there might be no Hamiltonian path.
3:24
But it remains the case that if he has a Hamiltonian path, then some guests will prove correct.
3:31
And if we do find a Hamiltonian both, obviously we have a yes instance of the problem.
3:38
Well, OK. So we can now define a problem associated with Hamiltonian path, which is the verification problem, verification, verify Hamiltonian path.
3:48
And that is as two inputs to it rather than than a single input g.
4:02
We've got a graph G and a list of nodes pi.
4:06
And the verification problem asked, is PI a Hamiltonian path of G?
4:11
And what we've seen is that this verification problem is in P.
4:16
This is polynomial time desirable. And also we have that G has a Hamiltonian path.
4:20
If and only if there exists pi such that verify Hamiltonian path g pi holds.
4:27
So we can now generalise from Hamiltonian path and define the class in P.
4:35
So we'll say that a decision problem D of X is in N.P. and P stands for nondeterministic polynomial time.
4:43
If there is a problem e, x, y, the verification problem which is in P and a polynomial P of N, such that we have this property D of X.
4:50
If and only if there exists a Y. In other words, a witness or certificate E X, Y, which is just the property we have with the Hamiltonian path.
5:02
So the Y here is the PI in our Hamiltonian path example.
5:13
And the second slightly more subtle property is that we want E to be polynomial imbalanced.
5:18
So if E, X, Y, then the Y.
5:25
The second argument, the certificate or witness is polla, namely bounded in X.
5:29
So the length of Y is erson or equal to some polynomial in the length of X.
5:35
And why do we want that property. Because why is the thing that we're going to guess.
5:40
So we're we're going to do the problem in two stages.
5:44
We guess the Y and then we verify using E in polynomial time that Y is a correct certificate that proves that X is indeed.
5:47
So of course, the guess here must also be done in polynomial time.
5:57
And so therefore the gas has got to be polla, namely bounded in the size of X.
6:02
The original input because guessing Y is part of what we do.
6:08
So it's called non-deterministic here because in terms of Turing machines, we can use nondeterministic Turing machines to guess the why here.
6:13
So the non-deterministic part is doing the guessing, if you like.
6:23
But after that, the E they're verifying part is all done deterministically.
6:27
Well, so does Hamiltonian path belong to ENPI?
6:33
Well, yes, because we've already got the verification problem,
6:37
which is our problem e and the polynomial bounded is pretty obvious because
6:40
obviously any Hamiltonian path must just have end nodes where G has N nodes.
6:46
So therefore, the Hamiltonian path, the size of that is obviously polla, namely bounded in the size of the original graph.
6:52
Well. So we've got quite a nice contrast between all to complexity classes.
7:01
P is the class of decision problems which can be efficiently solved.
7:06
So you take an input and run an algorithm in polynomial time, which will give you either yes or no.
7:09
Deterministically, NVP is the class of decision problems which can be efficiently verified.
7:15
So once you've guessed the certificate, then the rest of it can be done efficiently.
7:21
Deterministically in polynomial time. The verification that certificate is correct.
7:27
One that proves that the original input was a yes for the problem.
7:33
Let's see another famous example of an MP problem, and this is satisfy ability or set for short.
7:41
So I'll just remind you of a bit of logic here.
7:49
So we're talking about propositional logic here and a Formula five propositional logic is said to be in conjunctive normal form CnF for short,
7:54
if it's of the form, a conjunction of disjunctions of literals.
8:03
So the literals here, the IJA is are either variables or negated variables.
8:10
So those are the laterals. And in the jargon, the disjunctions here are called clauses.
8:16
And then we just take a conjunction of some number of those clauses.
8:24
Good could. Just as a simple example of something that's in contract, in normal form, so if we have X or Y, not said.
8:29
So that's a clause. And if we take not X or not said.
8:43
Okay. And then more X or not W.
8:51
So there would be an example of formula in conjunctive normal form.
8:59
And so the satisfied ability problem is given a formula in contract in all form is phy satisfy bill.
9:05
By which we mean is there a truth assignment that we can make to the variables of PHY which will make phy true.
9:13
So in this case, what we are asking is can we assign truth values to the to the variables here to make these formulas true?
9:21
Well, obviously if I make. X, true.
9:29
And if I make will, that will satisfy the first formula.
9:35
I can't make X false for this one. So let me let's say that Z should be false.
9:39
That will help with the second formula and the last one.
9:46
X is true. Will work for that. So then any other values I can give to y I can make that true and I can make w true as well.
9:49
But clearly there's more than one value that will make this formula.
10:02
True. Well, it seems that.
10:07
SAT is not desirable in time. Why is that?
10:17
Because it would seem that in general we would have to try all possible truth assignments to see whether we can find one that satisfies the formula.
10:21
In our example, we just had four variables, so we would have 16 assignments in general, if you have M variables.
10:33
There are two to the M assignments and you might have to try all of them to show that the formula was not satisfied.
10:40
For instance, if we let the size of PHI be the number of symbols in PHI,
10:46
which was a reasonable choice and the size of the V to be just the number of variables, the size of the domain of A.
10:52
Then we notice that M here could be quite large.
11:03
It could be a similar size to the size of the formula itself, because every litoral could be a different variable.
11:08
But what we can't so say it is not desirable in polynomial time, but it does belong to N.P. fairly obviously,
11:16
because all we have to do is guess a truth assignment V and then verify in polynomial time that V satisfies PHI.
11:25
So this is a very simple cheque to do to just replace the literals by the constant.
11:33
True or false. And just evaluate the formula. So that can be done in polynomial time.
11:40
Indeed. For a very low polynomial. So let's sort of set this up more formally in terms of our definition of N.P.
11:45
So we say that the verification problem for satisfy.
11:54
But as he takes the two arguments, namely the formula and the original input plus V, which is the truth assignment.
11:58
And that holds if PHI is in CnF and V satisfies that formula.
12:05
And then pretty clearly fire satisfy ible. If and only if there is some satisfying assignment.
12:14
If and only if the there is a V such that verifies that holds for Phi and V.
12:21
We also need to cheque of course that the size of V is poller, namely bounded in the size of Phi.
12:29
But that's fairly true from the fairly obviously true. In fact, just the size of the is less than or equal to the size of five.
12:35
So that works out. Well, we've got our two classes, what is the relationship between the two?
12:43
So pretty clearly if a decision problem is in P, then it is an MP.
12:54
So actually a class P of decide all problems is contained in the class in P.
12:59
But let's actually prove that according to the definitions of P an MP.
13:07
So let's suppose that a problem D is in P. We want to show that it's in ENPI as well, obviously.
13:11
So the idea intuitively is to verify that D of X holes.
13:18
We don't need to guess certificate Y. We can decide D of X directly.
13:24
So what we need to do is to set up a dummy certificate. So let's define E, x, y.
13:32
If D of X holds. And just let Y be, let's say, the empty string.
13:39
Just some sort of dummy guess that tells us nothing. And so basically E of X Y is just telling us the same as D of X.
13:44
And that's fine because D of X is already in polynomial time.
13:55
So E x, y is Paul the name only to signable.
13:58
And we have this property that D of X if and only if there exists y, e, x, y, namely Y being the empty string.
14:02
And of course the size of Y is namely bounded in the size of X.
14:11
Just take P to be the identity polynomial.
14:16
Well, so we know that P is contained in N p.
14:22
Of course, then the question is, could P be the same as n p?
14:27
And that is unknown.
14:31
Despite many researchers attempts to solve this problem, I think it is certainly the most important open problem in computer science,
14:34
and it's arguably one of the most important open problems in mathematics.
14:44
In fact, the Clay Mathematics Institute has offered a prise of one million dollars for a solution to this, and you can solve it either way.
14:50
You can either prove that the equals ENPI or you can prove that they are not equal.
14:57
Obviously, in that case, P will be strictly contained in M p.
15:03
I think it's fair to say that most researchers believe that P is not equal to ENPI because they have tried
15:07
to find polynomial time algorithms for these problems like SAT and Hamiltonian path over many years,
15:15
and they have failed to do so. So I think most people believe that they should be different.
15:21
And indeed, at certain forms of public key cryptography depend on P not being equal to ENPI for the security of those crypto systems.
15:28
So there's also, I suppose I hope that P is not equal to P as far as that's concerned.
15:40
On the other hand, of course, it will be extremely revolutionary if P was equal to N.P. and we had false solutions to problems like satisfy ability.
15:45