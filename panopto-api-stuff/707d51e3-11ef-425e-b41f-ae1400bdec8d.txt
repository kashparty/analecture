ID: 707d51e3-11ef-425e-b41f-ae1400bdec8d
Title: K2J - 3 : Static Methods
Category: KotlinToJava
Lecturer: Robert Chatley
Date: 05/01/2022
The next thing we want to do is to be able to calculate the distance between two points, so let's write another test for that.
0:05
And you'll remember that the way that we did this to begin with in Scotland was to define a
0:13
top level function that would calculate the distance between two points that it was given.
0:17
So let's define it that way to start with. So if we make two points.
0:21
Then the distance between these two points should be five, so let's say it equals.
0:46
5.0, because this should be a double because we need to do a square root.
0:53
The distance between. P1 and P2.
0:59
So this is a function which doesn't exist yet. So let's see how we would create that.
1:10
So if we were to create a top level function and column, we would write it outside of the class, something like this.
1:16
So this is a public function that returns a double. I use a primitive type double here with a lowercase D.
1:22
And it takes two points. One.
1:33
Empty, then we can find the X Delta.
1:39
So let's create a local variable, the X, this is an interstate.
1:45
So again, a primitive end because we don't really need an object here. P one x minus p two x.
1:49
And then we can calculate the distance with Pythagoras.
2:06
So here again, we can import a square root or function from the standard library, in this case, the Java Standard Library rather than the library.
2:22
And this is a function which is in Java at Lang Dot Maths. So let's just input our.
2:30
Then I need to return distance and then we probably don't need this local variable, so let's.
2:38
Do this now, the trouble here is you'll see that this doesn't compile.
2:48
That's because we've defined this outside of a class. And in Java, all code has to be inside a class.
2:52
It's not possible to define a top level function outside of class.
2:59
So we need to put this into the class. So we need to put this function in a class where we have something that in Katrina,
3:03
we would define as a top level function, which just works on its arguments.
3:13
It doesn't manipulate the state of an object. But we need to put it inside a class because all things need to be in classes in Java.
3:17
We put it in the class where it seems to fit best. So in this case, this is a function that works on points.
3:26
So we're going to put it in the point class. So I'm just going to cut it and put it in here.
3:31
But in this case, because this is a function that would normally be a top-level function,
3:38
we define this as being static and so static means that it's not going to operate on a particular object as the receiver,
3:43
we're not going to call this as a method on a point. We're going to pass in all of the objects that we need as parameters.
3:51
And so this method doesn't reference any of the fields of this class.
3:59
It works only in terms of the parameters, so it doesn't need to be called in the context of a particular object.
4:05
We don't call it as a method. It's just part, of course, point because it's to do with points.
4:12
And so when you see the key word static on a method definition, that means this is effectively a top level function.
4:20
It's not an instance method that we're going to call with an implicit receiver.
4:27
When we come back to our test now, we see we should be able to call this function, but we need to specify where it is so we can put the.
4:33
Point cloths in front of it. So this isn't an object, this is the class thing that just this this function is in this class.
4:43
So this is points distance between function.
4:50
You'll see that static methods are written in italics, so that intelligence giving us a clue that this is a static method.
4:53
And if we want to, we can actually statically import this method.
5:00
And that means that we can call it as if it's a top-level function because it's imported into the namespace.
5:06
And that point, we have this kind of import what's called a static import.
5:11
So rather than importing it type, we're actually importing a static function.
5:17
And so that's where we have import static.
5:22
And you can see that's actually the same thing that's happening for a set equals a set equals is a static function that's defined in the class assert.
5:24
And so that is a public static void function that takes some parameters and does some operations, so that's just the same thing.
5:37
So here we have the static imports of methods. And here we have the inputs of types.
5:46
One thing we just need to fix up here is you can see that this asset equals has a line through it,
5:53
and it's saying this version is deprecated and therefore we shouldn't use this version.
5:57
The reason it's complaining about this has been because we are comparing doubles.
6:03
But because of the way the doubles are implemented, we should actually give a margin of error.
6:06
So we're going to give a little delta to check that the results of this calculation is within 0.01 of five.
6:10
So now let's run it. And it passes.
6:19
But if we think back to what we did in Scotland, then actually in the end, we decided to convert our top-level function to an instance method.
6:31
And so we could do the same thing here. Let's see how that would look. So in that case, we'd want to say that this, in fact, was p one dot distance.
6:39
To. Peter, you said now this wouldn't be a top level function.
6:48
This would be an instance method of the object point.
6:54
Which takes a single other point, so it's going to operate on the receiver. And one argument rather than two arguments.
6:59
So if we go to the implementation. We can see that this now is not going to be a static function.
7:06
This is going to be an instance function, an instance method.
7:13
So we're going to call it with an implicit receiver of P one.
7:17
And this is going to be the other point. So wherever we have to be, too.
7:24
That's right. Other. And where we had P one, we want to specify this.
7:28
If we had kept this function as static, you'll see that this is not allowed,
7:41
we can't reference this when we're in a static function because it's static function doesn't have a receiver.
7:45
It's just a top-level function. It's not being called in the context of one particular object.
7:52
So there's no this. So when you have static, you can't have this.
7:57
So in order to make this into an instance method, then we're going to remove that and then we just need to change the name.
8:02
And remove this old import up here. So now we have two methods to string and distance tape, and we saw how,
8:12
first of all, we could define distance to you as effectively a top level function.
8:26
But because we can't define functions outside of a class, we had to put it inside the cross.
8:31
So we defined it as a static function inside.
8:36
But then when we convert it to an instance method, we didn't declare it as static anymore because we wanted it to refer to a specific instance.
8:39
That's the one referred to by this when we call it on a particular instance.
8:47