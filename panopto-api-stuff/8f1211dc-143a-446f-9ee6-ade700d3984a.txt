ID: 8f1211dc-143a-446f-9ee6-ade700d3984a
Title: Kotlin - s2e3 - Mutating State
Category: Week2
Lecturer: Robert Chatley
Date: 21/11/2021
In the previous segment, we looked at adding methods to our circle on point classes in order to give them some behaviour as well as just state.
0:07
But all the behaviour that we added to its calculations based on the initial state of the objects, but never changed any of that state.
0:16
In this segment, we'll look at how we can when we need to take the state of an object and how this can be useful.
0:25
So previously, we were looking at whether or not two circles would intersect and we had a couple of circles that we were working with.
0:34
But what happens if we want to be able to resize or move these circles around?
0:42
In the example that we have here, we have circle one, circle two that don't intersect.
0:49
But what if we wanted to scale up, say, circle to by a certain amount and then see if it intersected?
0:55
So what about if we did circle to scale by a factor of two?
1:03
I mean, did this test again?
1:14
So we'd like to define a method scale by which is actually going to change circle to and update its radius, multiplying it by two in this case?
1:18
So let's see how we can add this method. So again, this is a function we call it scale by.
1:30
It's going to take a scale factor. Which let's start off with just being an inch, Jeff.
1:44
And then what we'd like to do in this function is to take the radius and assign a new value that is actually the radius multiplied by the Fatah.
1:57
Now, when we do this, we see that we have a problem.
2:11
And if I just mouse over here, you'll see the intelligence reporting that vowels cannot be reassigned.
2:14
And so this is actually an important characteristic in that all the objects that we've built so far,
2:21
we've used vowel properties and vowels cannot be reassigned once they've been assigned, once they keep that value for the rest of the programme.
2:27
And this is generally a very good and helpful property,
2:37
but it's not very helpful here because we really do want to change the value of this property in order to change the state of our circle.
2:39
So the way to overcome this is to change our Radius property from being a vowel to being a vowel.
2:48
And so with a small change, we denote that we can now reassign to this property many times during the execution of our programme.
2:56
And by doing this, we can update the state of the circle so it can start out with a set and radius.
3:05
And then it can change over time by calling our scale by method to grow will shrink the circle.
3:11
So having done that, let's see what effect it has on our intersections.
3:19
And you can see that stands out, not intersecting, and then after we do the scaling, it does intersect.
3:29
How about if we wanted to do a different kind of transformation,
3:41
maybe we want to translate the circle, we want to move it from one place on the plane to another?
3:44
Maybe you want to say see to. Translate and we would give it and Delta for its X and Y,
3:51
so perhaps we want to move it by one in the next dimension and minus five in the Y dimension.
4:00
So this is going to be a similar kind of method where we're going to try to update
4:10
the state of the circle based on the arguments that are passed in to translate.
4:14
So let's create the function translate. This is going to take two parameters.
4:19
An ex delta. And a white answer.
4:31
And in this case, what we want to do is to update where the centre of the circle is.
4:37
So we could say that the centre is reassigned with a new point which is going to be at centre x plus d x centre y plus d y.
4:41
And we have the same problem where because centre is currently defined as a vowel and cannot be reassigned so we can change it to a vowel.
4:58
We see that change reflected up here and now we should be OK.
5:08
Let's see what happens. So we start off with the circles not intersecting.
5:22
We scale up the circle so that it's bigger. It does intersect and then we move it away so that it doesn't take.
5:29
One thing that's interesting to note for these two methods that we've just written is that they don't return anything.
5:39
Instead, what they do is to update the state of the current objects,
5:45
but they don't return a new value and hence we don't specify a return type for them.
5:50
They do have a return type and that return to these units.
5:56
We could put that in and you'll see that if we do do that, then intelligence tells us this is actually redundant.
5:59
And so it's not necessary. And in fact, it would be normal not to put in the return type.
6:06
The way that we implemented the translate method was to reassign centre by generating a new point based on these translated coordinates.
6:15
But perhaps we would be better to do this in a different way where we move the logic for how to translate a point into the point class.
6:25
So in fact, maybe we could just say that the centre should be translated by D X and D Y, and then we could create a method of translate.
6:33
On the cost points, which again, takes the X of Typekit.
6:50
And we could do something similar here. Now we have a similar problem to what we had before with things on vowels and cannot be reassigned.
6:59
So if we change this this way, then we can have a translator method like this.
7:16
And in fact, if we do it this way, then because we aren't reassigning centre, we just changing it state internally, but we're keeping the same point.
7:22
I can actually put this one back to being a vowel.
7:31
There's one other way that I could do it, which is that the translator method on points rather than moving a point could generate a new point.
7:36
So we could say that this translator function returns a point and that point.
7:47
It's specified in this way. And then we would reassign.
8:01
Encircle.
8:12
And if we do this, then we can put the two properties of point back to being routs because we don't ever mutate the state of a certain point.
8:19
If we ask a point to translate, then it's going to give us a new point.
8:28
But it's going to leave the original one unchanged. There's no one true way to solve this problem, but each of these has different pluses and minuses.
8:32
I think I would favour keeping point as something that is immutable.
8:45
It feels like conceptually a point stays in one place and a different point on the plane is a different point.
8:51
Whereas it feels like we should be able to change a circle and move it from one centre to another or scale it up while it is still the same circle.
8:57
So I would try to keep the vowels for point so that whenever we create a point, it stays in its original state.
9:06
And anything we do to transform it creates a new point us for the circle.
9:13
I think that it's okay to have a van because then we can change the centre or
9:17
change the radius of a circle without changing the identity of that circle.
9:23
It's still the same circle. It's just that we've resized it or moved it around in the plane.
9:28