ID: 09fddfbc-0b71-4fde-8061-ae29017d32e2
Title: Lecture 4: Computer Architecture (copy)
Category: COMP40005 - Introduction to Computer Architecture (Spring 2021-2022)
Lecturer: Wayne Luk
because that was described last term in your introduction to computer systems course.
0:09
But but there would actually be. New ways, new ideas,
0:20
because we will describe in particular how this you would be able to support instructions for the MIPS architecture that you saw before.
0:26
OK, so let us start with something straightforward. So I think you all know to compliment numbers, the range, what you might not be,
0:42
perhaps remember, is this idea of signing extension, and that is very simple.
0:55
We all know that if you add zeros to a number, well, it has the same value into its complement format if one replicate the most significant bit.
1:02
If the most of the impetus zero, then you put most zeros is most that of companies.
1:15
Once you add more ones to that number, you still have to save that, OK?
1:18
And that is co-signing extension. You don't believe me.
1:25
Try it out. OK, now we also want to define what overflow means.
1:29
And again, that is straightforward because if you add two numbers.
1:35
But what we did add to positive numbers, but the result is negative because the most radical bit is one, right?
1:41
Remember that in a two government format, if the most that is going to be this one, it is a negative number.
1:50
OK, so if you add to positive numbers, you get a negative result.
1:58
Or if you get two negative numbers, but you get a positive result, then overflow happens.
2:07
OK? In MIPS, there are various instructions like S.A.T.s, LTI and so on that would make use of two's countrymen.
2:16
There are other instruction that will cover unsigned numbers.
2:27
OK, well, maybe if I ask a quick question.
2:33
Could well, there are many ways that one could describe numbers of assign,
2:42
so to complement is one reason one way another way is simply what is called Simon or two.
2:50
So we just have the magnitude of a number and then we use a special sign to show whether it is positive or negative.
2:58
So does anybody know why? We usually use tools complement, but not this similar to representation.
3:07
Yes. Right.
3:17
Yes. So there are two zeros. And also, it has a it has one number less than two.
3:21
OK. But but the real reason is. Well, when you have plus zero and negative zero, that makes life a little bit more complicated.
3:33
So logical operations. So how can we do shifting to?
3:44
Well, it turns out, but. If you look the outright instruction.
3:50
This actually exists near the end. Which is called shift amount.
3:58
So that is the. Area, or they sometimes called the field of the instruction that we could use to specify the amount of shift.
4:05
OK, so we could shift last week, shift, right, and then we could also do this operation when we have 10s and O's and so on.
4:17
So if we look up a few building blocks.
4:34
And are the obvious Boolean operators like the Boolean and in or.
4:40
Inversion that would turn to one and one to zero and then another very important one,
4:49
which is the multiplex up because that is just supporting conditional statements, if then else in hot weather.
4:58
OK, so you could see in this particular block, depending on the value of T, if it's zero, then they will connect to the output.
5:09
If this one, then B will connect to the output.
5:19
OK, so hopefully that is all obvious.
5:23
Now, we could end this lecture very quickly, because the highest level description of any clue is just shown on the bottom of this flight.
5:27
OK, on a single value as a way to support different matic and logic operations as its name suggests it.
5:39
OK, so you could imagine that there would be a bloc that correspond to an ad that
5:52
would correspond to having all gays and a bloc correspond to end gays and so on.
5:59
So the two inputs would be replicated to the inputs of the other, the ends and all.
6:06
And then one would simply select the outputs of these blocs using this multiplex.
6:16
And that's it. OK, so that would be an clue, and indeed, you'll come across something like that in your heart into computer systems,
6:26
cause I think that is the diagram privacy.
6:42
But. What we try to do here is can we derive a more efficient way of doing this?
6:50
So what you see there in that diagram could be seen as a specification of the behaviour of the scale you.
6:59
But what we want with your eyes is an efficient implementation. Of that description.
7:09
OK, now, of course, when you look at this level, it is very obvious where the inefficient sea comes from.
7:16
But we will have a look at that when we look at the internal structures of the urns and all the others.
7:25
OK, so we look at the end.
7:34
Well. That is not very complicated.
7:38
You could see a row of end days. OK, nothing wrong with that.
7:43
But. What might be the source of inefficiency is the fact that when we have multiple pits going into this block,
7:49
then obviously one need to interleave the wires.
8:02
As you can see in the. OK. And then if you look at the multiplex.
8:07
Well, the same is true. OK. Well, with just in the defence of lawyers, well, what was the big deal?
8:16
Well, if you actually try to design a chip,
8:24
you'll find the long wires solving that you really want to avoid because it turns out that these days the delay of a date.
8:28
Might not actually be the most Typekit.
8:41
You might still be. But lawyers, especially long lawyers themselves, could also become a source of delay.
8:45
OK, so what we want to do is to find a way to make this into leaf areas as more as possible.
8:56
Now, obviously, we might still need to leave it at the very input or so on, but we really want to do that.
9:07
As little as possible. OK, so let's see how we are going to do it.
9:16
Well, let's look at the edifice. OK, so hopefully you all remember that if we build an error, we will start from what still gets a half eta.
9:22
So there is the blockage and that contains an engaged and an old gate.
9:36
Sorry, engaged and exclusive. OK, exclusive.
9:43
OK would provide some input, whereas the end would provide the Carrie output.
9:48
And in order to put together a few other which can then be replicated multiple times, we need to have others OK?
9:57
And the. Kerry, output of the two Harvard harvesters would be all together,
10:08
and that would produce the overall Kerry output of the weather and the sum output is given by the one of the few others,
10:17
uh, some output, as you could see from there.
10:31
OK. And some of you may know that the overall sum output of a whoever corresponds to exclusive all of all the free inputs.
10:36
OK, now that's also a name of of the function of the overall terry output of a few other.
10:58
Does anybody know? OK, so if you look at the output of the all gates.
11:08
Of the other, as you could see from the overall Kerry output of the sweater.
11:20
That's a name for that function. Yes.
11:26
It's overflowed, no, it's it's well,
11:33
it's only when you have a row of letters and the most eloquent bits in the overflow right, as defined in the previous slide.
11:38
But if you look at a single forever. OK, that's the name of is it Curry Gate, sorry, curry gate.
11:50
Uh, no. OK, now.
12:03
If you call the free inputs. To the full other state, B and C.
12:09
What would be the. Logic. Expression for the carry out.
12:17
Everybody knows. Well, if you work it out, it would be a times B and B, all ANC or B and C.
12:26
OK. Now, and anybody know the name of this thing.
12:46
But this for input function with a B plus a C plus b c.
12:54
Yes. Well. It's called the majority.
13:04
Function because. If two of them are one, they'll put this one.
13:12
OK. So so he's calling maturity function.
13:19
OK, so if you look at the weather, so again, you see the same pattern appearing,
13:25
which you have a row of weather stuff, but then you have this rather annoying interleave of why.
13:33
OK, so well, how can we avoid that now before we do that?
13:39
Just to check that you also know how to do subtraction?
13:45
Using this array of edits, OK? And that is pretty easy to derive because you have this number and the ones complement of this number.
13:51
OK. So you know that the ones compliment of a tool, some of the number is simply turning zeroes into one and one two zero.
14:05
OK, so if we have a number.
14:17
And is an add to one's complement. OK.
14:22
That means the result would be a number containing all ones in there, right?
14:26
OK. And you probably know that a number that is all woven into accompaniment is the number.
14:34
Minus one. Very good. OK. OK. So that's an example here, right?
14:48
So if zero one zero one plus one zero one zero equals one one one one minus one in the.
14:53
OK, so and therefore, if this is minus one.
15:04
OK, so if that minus.
15:13
If amnesty is the same as a plus the complement of B plus one because B equals.
15:21
Plus, one issues Wolf, the one to the other side and so on, you get money as this thing is the same as this thing.
15:39
OK, so what does it mean is that we could calculate subtraction by negating each bit of B?
15:50
And then you need to add one to it. OK, now you might say, OK, you know, turning be inverting is simple.
16:01
Well, but how can we add one to it? Well, we could do that by the carry in from the left, most simply.
16:10
OK. So the left closing over there, if it turned that into a one bed correspond to the plus one.
16:20
All right. So we could do a subtraction by this address.
16:28
One. OK. OK, so now let us stop building up our efficient ALU, and we will do it step by step.
16:34
Excuse me. So, yes, somebody asked a question on on the last line is to be similar as a minus B.
16:45
So can you can you explain why XOR is how it is related to subtraction?
16:56
Well, if you look at that example, right, you have a number, which is zero one.
17:05
If we add that to one zero one zero, they would give us one one one one.
17:12
Yeah. And that is minus one. OK.
17:18
OK, so so it means that if we minus something.
17:24
OK, so you can imagine that you look at the equation.
17:29
This minor thing in here correspond to moving this.
17:38
Number two, the right hand side. OK.
17:43
And that corresponds to this swing plus one, I guess I should use the.
17:48
Let's see whether this thing works, and we'll take a.
17:59
All right, uh, so, uh, so this.
18:07
So. Can you see that on the screen?
18:18
I guess you could see it on the sly as well, right?
18:26
Yes, yes. OK. So.
18:29
So if we move this thing to the right hand side and minus one over here.
18:38
OK, so. This expression becomes.
18:46
Minus something, and that corresponds. To this thing over here, right?
18:55
So it's minus expression on the bottom line is therefore the same this thing.
19:04
Yes, that you have to have that. OK, so if you are still 100 percent happy, I'll try to explain more at the end of the lecture, OK?
19:12
Or you will come to a tutorial. Yes, I think it might be adding more.
19:23
Yes. Oh, how do we get one idea? So the end is.
19:29
Change that to a one. OK. And that would become minus.
19:41
And also, we will need to.
19:47
Put inverters if you want to.
19:54
It's a this is b OK, if you want to do a minus fee, then we need to have these inverters to invert B and at the same time put a one over here.
19:57
All right. Happy with that. OK. Oh, oh, oh, oh, okay.
20:12
Well, we want to do is to group them together to start forming a more efficient you.
20:22
OK, so from the left hand side, I could transform it to the right hand side of the diagram,
20:30
so you could see that instead of having was replicating just to enter into it once at the input,
20:40
as you could see on the right hand side and then each of the block now contain and end an.
20:49
OK, so in other words, instead of separate blocks of a set of blocks of a single block, each unit would contain just an animal.
20:59
All right. OK. And then we could do the same if you want to put the other in there,
21:09
so you would go to the bottom to a diagram so you could see that I could have a larger unit.
21:18
It would contain this al our plot and our block is so cutting and end and all.
21:29
OK. And then the other side we would have before other in that.
21:35
All right. So in other words, we are building a bigger block such that its unit would contain an iron ore and a few other, and we just replicate that.
21:41
OK, now you may say, well,
21:54
are we really improving anything because we still have the awful beauty of the interleave at the very output and the very input?
21:56
Well, that would still be an improvement over the bank verification on the left hand side because now you could see at least within the block,
22:07
we only have very short distance. OK. And actually, for the overall report's alternative to the overall opus inputs,
22:19
we could actually try our best to avoid those interleave if we arrange that to join them to some previous blocks before we left.
22:30
OK now so we could start to put together.
22:44
This ale you file moves architecture. OK, so one other question is that, well, obviously we need to support both at and subtract.
22:50
OK, so we cannot just invert B, because sometimes people are not wanted, but that's OK.
23:06
So obviously one possibility is to replicate be such that we invert one of those and then we select the output by multiplexing,
23:15
so we could obviously do that. The other possibility.
23:28
Is simplify that, and you'll find that one could actually just use a single exclusive arcades, as you could see on the top of the right hand side.
23:33
You see that exclusive, OK, great. And that corresponds to having the effect of a multiplex for B.
23:48
OK, so so it turns out that if seven's equal to zero, then you would have be.
24:00
If you go to one, then you have inverted the OK, so that if we look the truth table of exclusive four and you'll see what I'm saying is correct.
24:09
OK? So we use exclusive for us a programmable inverter that is controlled by the CEO at the
24:24
top and then that will be fed into this as block as we show in the previous slide.
24:36
OK. So the RSA block is this one, and it contains these things.
24:47
OK. OK. And then the.
24:56
Output, so we're almost there.
25:01
OK, so the output of this assay will need to be selected by some multiplexes to give us the overall result of the review.
25:03
So the control to this multiplexes are given by the block on the left hand side of the block diagram on the left.
25:18
OK, near the bottom. On the left, you'll see that we have a block with the dotted line, the label.
25:30
OK, it is. L Block will initialise the.
25:41
Input to the control in such a way that depending on the value of PISA and the one,
25:47
you will select the correct output so that the air output at the bottom there.
25:57
Will give you either the addition or subtraction or Bitwise or Bitwise.
26:08
OK, well, that is given by you see on the bottom, you'll see the value through this one.
26:16
OK? If you see what you want is zero zero, that will give Bitwise 10 is Bisciotti.
26:23
One is zero one. It will give Bitwise all.
26:33
If that is one zero, it will give at one more will give you. OK.
26:38
And then you could check that that is indeed the case by looking at this 081 in that diagram and see what the effect to the horizontal lines in there.
26:43
I won't go through that because, well,
26:59
that you could look at that step by step and you'd be able to see that if the just the right output both at the bottom and also
27:01
initialise the four others in such a way on the left so that you're doing up the left hand input to the few others would be zero.
27:13
When you do or subtract the left, most input would be a one. OK.
27:27
Because studies remember, we need to initialise the array of others to be either zero or one to do addition or subtraction.
27:32
OK. You know, of course, there's one other thing that you need to do, and that is to indicate when overflow has happened.
27:43
OK. And we're, although for all would happen, would depend on the most difficult bits.
27:57
So remember that if we add to positive numbers and the result is negative, OK, then overflow has happened.
28:07
OK, so the overall detection, we need to look at the inputs and the output of the most significant bit.
28:21
Because the most that it would tell us whether that number is zero or one.
28:31
So it will tell us whether the number is negative or positive. Okay.
28:36
So using that block, you say, able to tell with the overthrow happens or not, and it gives you something to think about.
28:41
For this, we can how we could do something that is not very complicated.
28:55
OK. So that is the the basis of the subject and then also the goal ready to follow instructions.
29:01
Well, let's do something slightly more exciting and that is this safety instruction.
29:12
OK, so remember, Sochi is set on less than and what it meant is if a smaller than B, then the output is the one.
29:19
Otherwise, there is zero. OK. Well, one of the things that you need to remember is that when it is a one,
29:32
that means that the least a little bit of a fully fit, no is the one OK, because one in the 32 bit number is the least.
29:45
A little bit is the one. The rest would be zero. Yeah.
29:58
OK. And obviously, if it's zero, then all 32 bit would be zero.
30:03
No. So what? What does it mean? Well, it simply means that the output would always be zero four one two 30 one of the output,
30:10
because whether the LP is zero or one is only determined by the least a different bit.
30:25
Happy with that. OK. Well, the other thing is that you also need to remember or figure out that the.
30:32
So in this case, in that diagram, the most incomplete is on the right.
30:49
OK. MSPs on the right in the least, a little bit is on the left.
30:55
OK, so that might be a little bit different from what you're used to.
31:03
But this is kind of an easy way to draw this diagram.
31:08
Sure. OK. And remember that?
31:13
All the outputs are zero.
31:19
OK, except the list dip open output, because if it's zero, then the whole thing is zero.
31:24
If that bit is the one and the output would be a one, everybody happy with that, right?
31:31
OK, so now all we need to do is to find a way of figuring out what the least a different bit of the other output should be.
31:39
All right. Well, if you look at that, it sets, if there is more than be it, the output is the one zero.
31:51
So obviously you might say, well, what do we do the comparator?
32:01
Well, obviously the result could be achieved by using a comparator. But then we need to design new hardware.
32:06
OK, so can we make use of the current value to do that?
32:13
Well, yes, we could do that because if a smaller than B, then obviously a modesty is more than zero.
32:19
Everyone happy with that. Yeah. OK.
32:28
And we feel, though, that immodesty is smaller than zero.
32:32
And we know that a negative number in twos complement first is mostly live compared to Bill one.
32:38
So all we need to do is to get the ACLU to perform a subtraction and then we look at the most significant bits of the output.
32:47
So if that is the one that we know is the negative number, if that is a zero, then we know the result is positive.
32:59
OK. So if it is negative, then we know the alpha or alpha should be a one.
33:09
OK? So what we simply need to do is to find a way to get that value, to be put.
33:16
To the least, Evgen, output of the overall thing.
33:27
If unhappy with that. OK, well, how do we do that?
33:31
Well. If this were a little bit indirect, but actually all we do is we take the output of the motor a bit,
33:35
put it all the way to the least difficult and just put it to the top and insert a line from the top.
33:52
So that it could also be fed to the multiplex on.
34:05
OK, so we need to get it free of the multiplex up. Because, well, we only select this line, but we think with this instruction.
34:09
Right, because we would still need to have the possibility to support air support, whatever.
34:19
Yeah. So we only need that output when we are dealing with the safety instruction.
34:27
OK. So that's why we if you look at the AUP bush block on the right,
34:33
you'll see that the major difference is that I have and this additional line from the top.
34:42
That all it does is to go through another multiplex up so that whenever we select the instruction, we will select that output.
34:50
OK, so we're asking you to zero that correspond to selecting the instruction, and I want that output there.
35:02
OK. OK. So the least a different good bits of this overall thing is simply the most significant bit of the subtraction output.
35:12
OK. Well, how about the rest? Well, the rest, you could say that.
35:26
If you look at the input to the the left most import of this ALP AUP test, you will see that I put zeros in there.
35:33
OK, so that means that all the other block, except at least a different block.
35:45
That log would be zero. OK, so the output of that will be zero because we know that all the outputs of this instruction would be zero.
35:53
And it's only the least in this bit. With the term would be determined by the most of bit of the subtraction output.
36:09
Everybody happy with that. So this is probably the.
36:21
Most complex description notices out the instruction, but if you look at this a little bit carefully, it's actually not very complicated.
36:26
So if you are still not 100 percent happy, I would suggest other talk to me after the lecture or we could talk about that doing that you tolerate.
36:40
OK. Of course, look at the textbook and the notes.
36:51
All right. OK, so this is so to.
36:57
Well, we'll do one more. And that is what is called zero detection, which is useful for the P, Q and B any instruction.
37:03
So what we are doing is we could test whether A is the same.
37:13
OK. Now, of course. Rather than deciding on the piece of hardware to do this comparison will just.
37:20
Use of tractor again, OK, because if I use the same ISP, then a modest equal to zero.
37:33
So we just need to try to see what the output.
37:39
Of this obsession is zero or not.
37:47
OK. Well, the way to do that, we do need an extra logic gate, which is an engaged such that one of the input is inverted, assuming they're OK.
37:51
And the overall output is, as you could see, have this zero value on the right hand side.
38:08
OK. And that zero output when it is the one that corresponds to everything is, is this the same as otherwise?
38:20
Not. OK. So again, you could double check that the logic is right by looking at how it is initialise.
38:34
And also if we now fit the right values into the three bits.
38:47
OK, so final value, which is this one?
38:57
It contains three input on the left, and these three inputs corresponds to selecting.
39:04
The function of the ALU. OK, so but this three input is still one one that corresponds to the instruction set or less than if it is one 00, it is 10.
39:15
One through one is four and so on. OK.
39:30
So again, let's try this out. OK.
39:34
And you could tell that when you put these numbers in, then they say, Oh you, we will give you the expected output.
39:39
OK. So let's end by finding ways to do things faster.
39:51
So how to estimate performance? Well, you'll see the logic gates.
40:01
We assume that there is no loops that connect the output of a logic back to the input because if that happens, you pull an oscillator.
40:07
OK. We don't want the oscillator in the system.
40:19
So basically the speed of the computation, which is determined by the cycle time and obviously the shorter cycle time,
40:23
the faster the clock frequency could be and therefore the faster the computation.
40:35
OK, well, but we want the cycle time to be long enough to allow the signal to call through the longest path in your system
40:40
because we will need to wait for one signal to get to the output before we could send another signal even.
40:54
Otherwise, the two, though, could interfere with each other and give you something unexpected.
41:01
OK. And this longest path is often the career path in the system.
41:08
OK, so the culprit is the reciprocal of the cycle time, which is determined by the longest publication delay or the delay of the slowest part.
41:16
OK. And diverse assumptions and so on. But don't worry about that if you want to know more.
41:32
Look at the appendix as shown on that slide there.
41:39
So we'll end on figuring out how to do First Edition.
41:44
Again, the idea is. Not very complicated. OK, so remember that the speed of error is limited by the Sharipov.
41:52
OK, so how can we do Kerry faster? OK, so.
42:06
Well, there are various ways. One way is when we have multiple bits.
42:13
In email system, what we can do is we could chop this long array of others.
42:22
OK, so let's say we have 32 with a Toby Hall, which becomes 16 or these days we could have six obese or even 128 bits.
42:32
OK, so we could chop that into half. OK.
42:42
And then think about. The following, so.
42:46
It is low because we need to wait for a signal from the least a difficult bit to go all the way to the most difficult.
42:54
So that is the slowest path now. But how about if we try to be clever?
43:06
We know if we turn into half and we just look at the top half?
43:13
OK, so. The idea is instead of waiting for the signal to go from the least difficult bin to the middle and then stop the signal flow at that time.
43:20
Can we do that in parallel? OK. Well, how can we do that in parallel?
43:35
Well. The binary arithmetic save us because we know that.
43:40
But very. Can either be one or zero, so we're totally into it.
43:48
I mean, look at the caring input to the upper half upper.
43:56
OK. It doesn't matter, we don't need to wait for the video to propagate because we know that video could either be zero or one.
44:03
So what we can do is, as you can see from that diagram, we just try to possibilities at the same time.
44:14
So we have the upper half, which means the most significant, most a little bit for a and b's.
44:24
To do the addition, we have almost zero input from the left or the one input from the left, so we cover both possibilities.
44:35
OK. And then we use the multiplex to select which of the output when the least a little complete edits already.
44:45
OK, so that Vudu would then be used to select the the two outputs for these two edits so we could see the basic principles are pretty straightforward.
44:59
OK, now you might say, Well, let me do the selection, but there is still some complication.
45:12
Well, that's only a piece of wire. So whereas in the other?
45:18
Remember that there are some tape delays in there. OK, so if Kane delays the main reason for the delay of your system, then this carries that out.
45:22
Architecture would what will. OK.
45:38
And actually. Can we do even better, right?
45:42
So we chop this into half. Well, we could chop it into quarters and more.
45:46
OK. And therefore, we could do this parallel computation more often.
45:55
So instead of just sort of doing it a lower half and upper half, we could do it more frequently.
46:03
But of course, as you can see that the major disadvantage of this method is that if it will be in the half, then you need 50 percent more resources.
46:12
OK, so you could see that we are exchanging resources of time.
46:26
So changing space and time? OK. You can make it faster, but we need more resources.
46:33
If we chop it into final bits, then again it would be faster.
46:39
But we also need more resources, and the control could be a slightly more complicated skill.
46:47
OK. And there are other possibilities, such as Kerry, look ahead and conditional some and so on.
46:53
So if you're excited by arithmetic, then we'll look it up and see what what they do.
47:00
OK, so, so much for edit and subtract and so on.
47:08
The next lecture, we will look at multiplication and division.
47:14
OK. All right, so see you on Thursday for the tutorial.
47:20