ID: 2c892655-0bae-4844-bf5f-ae2d0148ff05
Title: 7.3 QuickSort
Category: COMP40008 - Graphs and Algorithms (Spring 2021-2022)
Lecturer: Iain Phillips
Date: 27/02/2021
So now I want to talk about quicksort, another divide and conquer algorithm.
0:01
And so let's first of all, see how quick thought works and then do the analysis.
0:08
So let's the way Quicksort works is that you select the first element and then you split the list around that element,
0:14
by which I mean that we split the list into those elements in the list, which are below the value of the first entry.
0:22
And those which are above. So in this example are seven is the first element here.
0:33
So I'm going to split the list into those members, which are below seven.
0:40
In other words, three, two and one. And those which are above seven, which in this case are 12, eight and 10.
0:44
And I'll leave seven in the correct place in the list.
0:53
In other words, between the ones which are below it and the ones which are above it.
0:57
So notice that seven is in the correct place in the list.
1:02
And what I can do now is just recursively sort the left side, the three to one and get one, two, three.
1:06
And then I can sort there right. And side the 12, eight, 10. And I get eight, ten, twelve.
1:15
And now in that case, the whole list is sorted. So that in other words, what I do is I, I do the splitting that takes work takes comparisons.
1:20
And then I recursively by quicksort to the left and the right and sublist.
1:32
And then I recombine. But the recombining takes no work at all because everything just naturally falls into place.
1:39
So the in this we can see that the split is going to take N minus one comparisons because I take all the elements from two up to eight.
1:48
In this example and I compare them with the seven. Okay.
1:59
So let's actually see how this split works. So the split is quite clever because it's actually all done by swapping in place.
2:04
So we don't actually need any extra space outside the list.
2:13
So let's see, you were at work on our example. OK, so here is our example, we've got seven to ten, twelve, three, one and eight.
2:17
OK, so I'm going to select this element to split around.
2:35
Okay, so there is the seven like that. And now I'm going to work along the list here and compare them.
2:40
And so the first comparison is between the two in the seven and I see two is below seven.
2:48
So let's leave to there. Okay.
2:52
So now what we know at this point and the seven of course, remains is that these elements here are both less than or equal to seven here.
2:55
Okay. And then the next one is ten, but ten is greater than seven.
3:04
So I want the ones which are greater to be off the right hand and to the left.
3:11
So let's swap the ten with the right hand one in the list. Whatever that happens to be.
3:15
So I'll swap 10 over and I'll move the eight down and then everything else remains the same.
3:19
So I've done a swap there. And what I know now is that this 10 is greater than seven.
3:27
Okay.
3:34
I don't know anything about the eight because I haven't looked at it yet and I haven't certainly haven't looked at the 12, the three and the one.
3:35
So that's what I know at this stage. And I've done two comparisons to get that.
3:41
Okay. And so the next one to look at is the eight, cos I'm working away from the left here.
3:47
The eight is come from there, but this the next one to look at. So age is bigger than seven.
3:56
So I swap it over, but I don't want to interfere with the ten so I'll swap the age with the one.
4:01
Yes. So that means that one comes over here and that's another comparison.
4:06
Okay. And now what I know is that this region is above seven and I know that this region is below seven.
4:11
And I know nothing about these three elements. And the next one is to look at is the one that that happens to be below seven.
4:21
So it can stay where it is. That costs me a comparison.
4:30
So I don't do a swap, but I have done a comparison and now I've got three here which are below less frequent, a seven.
4:35
Over here, the eight and the 10. Like that and the next one to look at would be the twelve.
4:43
But that's bigger than seven. So I'm going to move it into the right hand region by swapping with the next one in the unknown region here.
4:52
This middle region, which is the three. So. Then they swap over.
5:00
And now I can extend this region here to include the twelve.
5:07
OK, so this region is bigger than seven region. This is the unknown region in the middle.
5:11
This is the less than or equal to seven region. And finally now I need to look at the three.
5:17
And that happens to be below seven. So that means I can now extend this region out here to be the whole thing from seven to three.
5:24
But I'm not finished yet because here I've got all the ones which are less than or equal to seven.
5:36
Here I've got the ones which are bigger than seven, but I want seven to be in the middle.
5:41
So what I do is I swap it with, in this case, the three.
5:46
So that's the final stage here, is to move the seven over there and move the three into position here.
5:50
So I get the three to one. Then here is the seven in its correct position.
5:56
And here is the 12. Eight. 10. Like that.
6:01
So that's how to do the split.
6:06
And we saw that he needed definitely six comparisons because I did the comparison three and seven, then each of the six remaining elements.
6:09
Now, the number of swaps obviously depends because I only swap if the element is is in the bit on the and larger than set.
6:19
And then I then I do a swap. So the number of swaps, various here, but the number of comparisons is fixed.
6:28
Well. So the split algorithms a little bit complicated and subtle.
6:36
So I put the code on here. So let's explain the code in the general case.
6:43
So let's move this up so we can diagram for the general case.
6:51
Kay. So here is our algorithm for splitting.
7:03
So we've got a whole array and its index from left to right.
7:08
Because we're going to apply this to some portions of the array.
7:14
So rather than the whole array, we're looking at the slice between left and right here.
7:20
OK. Now, the first thing we do is to set these to be the value here.
7:25
So D is the value in the list at the left portion.
7:30
So that is the so-called pivot and we'll set I to be here.
7:34
Left plus one and we'll set J. To be equal to right.
7:40
OK, so. And the invariant is going to tell us that first of all that left is less than I is less than or equal to J plus one.
7:44
OK. And we can cheque that. That's true initially.
7:58
And J is less than or equal to. Right. OK. And we get the more interesting is the let's move into the general case now.
8:03
So let's take out. I and Jay and put them in more general position, so here is I.
8:13
And here is Jay. Okay, so what the invariance going to tell us is that if you're below, I.
8:24
So you're in this region here. Then we are actually less than or equal today.
8:31
So within this region, we are less than or equal to D.
8:39
So that means that we've looked at these elements and we've seen that they are less than or equal to D.
8:42
And so they stay over there. On the other hand, the second part of the invariance says that if you're above J.
8:47
So you're in this region here, then you're actually greater than D.
8:55
So that is the right and portion that we've looked at.
9:00
And then this portion in the middle we don't know about yet because we haven't done the comparisons.
9:04
So this is the use of ideas are we're not sure whether they're less than or equal to D or bigger than D,
9:09
then what the code does here says while I is less than or equal to J.
9:17
So while we've got something to look at in this middle region here, then if there are two cases,
9:21
if our eye is less equal to D than it's in that it should belong to this left portion.
9:28
So we can just extend out the left portion. It's different colour so we can just extend the left portion out to here.
9:33
Okay, so that means that we can increase the size of the left hand region.
9:41
And I increments or else we look at this element here and we see that it should belong to the big portion.
9:48
And in that case, what we do is we swap it over.
9:57
So this value here has to swap with the one over there.
10:01
And in that case, we can actually decrement J basically.
10:05
So we can increase this region here on the right portion with the values that are greater than D like that.
10:10
Of course, that means brings a new unknown value from this, the right end end of the unknown region into position here,
10:20
which is the position where it will next be looked at for comparison with with D.
10:28
The pivot. Okay, so that's the swap case. And notice that we make progress here each time.
10:33
So this procedure will terminate because either I goes up or J goes down.
10:43
So the size of this region here decreases strictly by one.
10:50
Each time we iterate the while loop.
10:56
Okay. Well, then at the end of that, then we've actually looked at everything.
11:00
So we get into the scenario where we've got basically you've got these values which are less than or equal to D.
11:05
We've got these values which are greater than D. And then the final thing that we do is to swap over the pivot here in into this position here.
11:15
And then we end up with the pivot in the middle.
11:26
Greater than D here. And the less than or equal to D.
11:31
Over in the left here like that. And then we apply quicksort recursively to the left and the right hand portion that's before.
11:38