ID: fb633da5-f5c4-4e96-8339-ae2d01490132
Title: 6.3 Insertion sort
Category: COMP40008 - Graphs and Algorithms (Spring 2021-2022)
Lecturer: Iain Phillips
Date: 20/02/2021
So now I want to do for sorting algorithm what we already did for searching.
0:01
And first of all, I want to measure the time, complexity of various sorting algorithms.
0:08
We're going to look at insertion, sort merge sort quicksort and heap's sort.
0:12
And I want to obtain lower bounds.
0:18
The amount of work required to actually sort a list so that we can see where there are sorting algorithms are indeed optimal.
0:20
And the techniques we're going to use, where we're going to use recurrence relations,
0:28
just as we did for binary search, we're going to use decision trees, though slightly different from the.
0:31
Decision trees we use for searching.
0:37
And we're going to need to talk about orders or functions because we're not going to get the things to align up exactly as we did for binary search,
0:40
which was optimal. Exactly. We're just going to get algorithms which are optimal, allowing up to the same order.
0:50
So let's start with insertions. Sort of.
1:01
The idea here is that at some stage in the algorithm, you've got a sorted portion of the list off to the left from zero up to minus one.
1:05
The first AI items. And then you got an unsorted region.
1:12
And we take the first element in the unsorted region and we move it into its correct position within the sorted region.
1:17
That's the insertion. And in that case, obviously, once that's been done, then El's zero up to AI is sorted.
1:25
That slice. How do we do the insertion? Well, insertion sort precedes by just doing local swaps.
1:34
So you can swap adjacent elements in the list.
1:43
You can swap random they within the within the list.
1:46
So we let the L. I. This item to be inserted filter downwards by successively swapping it.
1:51
If it's less than the ie minus one element.
1:57
Then we swap the two over. And we keep moving the IE down until we can see that it's in its correct position.
2:02
Because the next element down is actually less than or equal to the thing that we're trying to insert.
2:08
Well, how many comparisons should that take? Well, you can see that in the good cases where we see that I's ally is already in its right position.
2:16
So we don't need to move it at all.
2:27
That's one comparison. The worst case will be where the ally has to move all the way to the left of L. Zero.
2:31
And in that case, we would have to do IE comparisons. And then once we've done the insertions for I equals one, two and minus one.
2:39
Then the worst case we can see will just be get got.
2:49
By summing up all these comparisons.
2:53
Here we're counting the comparisons rather than the swaps and we get W of N is just the sum from I cause one to N minus one of I.
2:56
The worst case number of comparisons. Well let's see. Insertions sort of an example.
3:06
So let's take a list like. Could we will have, let's say, two, three, six.
3:15
Or let's say zero and as well, just to make things interesting.
3:28
And what I want to do is to have a look at the number of comparisons.
3:33
And so what the first element here, the two that's in position, their positions in the list would be the indexes will be one, two, five, six.
3:41
But the actual list is as shown. So the first.
3:57
Position, the two is already sorted. So the first thing we have to do is insert the three into the sorted ocean.
4:04
So we compare them and we see that they're okay.
4:11
So we don't need to swap. But that takes one comparison. Notice we haven't changed the disc.
4:15
But we have it's cost us one comparison. Next is to put the one in position.
4:21
Well, then the one has to swap over with the three. So that's one comparison.
4:26
Then it has to swap over with two. And we get one, two, three, which is now sorted.
4:31
But that took us two comparisons. Then the six can be compared to the one, two, three.
4:38
And that only takes one comparison. So that's an easy case.
4:46
The five, we have to compare it with the six and they swap.
4:51
And then the five is compared with the three and.
4:58
They don't swap because five is now in the right positions were that took us two
5:03
comparisons for the five and the four has to be compared with the six first.
5:07
And it swaps over. Then it's compared with the four and it swaps over sort of with the five and it stops over,
5:13
and then we actually now have the first six elements correctly sorted.
5:23
Well, that took us three comparisons to do this, because the four ways compare with the six, the five and the three and then the five.
5:29
Sorry, we've now got the four has been inserted.
5:41
So that leaves us with the zero and that has to be compared with everything here and swapped over.
5:46
So to get that into position and we get.
5:52
This is our final list. And that took us six comparisons.
5:55
So if we compare that with what I will be in these cases, let's write I down here.
6:02
So I is one, two, three, four, five, six.
6:09
We can see that we've got worst cases, some some of the time, but sometimes we do better.
6:17
So we did one here, which is the best case. And sometimes it took us fewer comparisons.
6:24
And then this zero was a bad case as well, where we had to do all of the possible comparisons.
6:33
Okay. So that gives us this formula for W of N.
6:41
So how can that what is that? Well, that is just an arithmetic progression.
6:45
So we can sum that up. And it's a well-known fact that this sum of up TRM I equals one to end of I is N times and plus one over two.
6:53
We could prove that easily enough if we just.
7:04
So if we've got our sum from. I cause one, two ends and it's right down.
7:12
One plus, two plus. Loss in minus one.
7:19
Loss and so that saw some. Well, let's write it down in reverse and plus and minus one.
7:26
Loafs. Nose to nose. One.
7:37
And then add the two sides get to us is equal to N plus one loss, adding these two together.
7:42
And last one loss all the way down to one loss and last one.
7:52
Well, how many of these are there, obviously? And so that's equal to end times.
8:02
And plus one. And so this is equal to end times in plus one, over two as in the fact so.
8:08
Well, the reason I showed you were that were so that if you forgot that fact, it would be easy enough to reconstruct it.
8:16
And so therefore, obviously, the worst case here is going to be w n is N times N minus one over two.
8:23
When could that worst case arise? If we go back to our example.
8:33
We saw that the way that you get a worst case is when you have to.
8:39
All right. When you have to move an element all the way down from the right to the left hand end.
8:46
And if the list is in reverse order, then you'd have to do that for every single element.
8:53
So that will be a worst case. So it can actually be obtained. Attained?
8:57
Well, w n is just order N squared. So this algorithm is quadratic.
9:03