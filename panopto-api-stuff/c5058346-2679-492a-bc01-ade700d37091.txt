ID: c5058346-2679-492a-bc01-ade700d37091
Title: Kotlin - s2e2 - Defining Methods
Category: Week2
Lecturer: Robert Chatley
Date: 21/11/2021
In functional programming, we define functions and data types separately, but in object oriented programming,
0:06
we put them together so that functions that operate on the state of an object are defined where that object properties are defined in its class.
0:11
And we call these functions methods. And we've already seen how we can call methods on objects like strings.
0:20
So, for example, if I have a string. Like this than I can call a method to convert it into uppercase, for example,
0:26
and I call the method using this dot notation that we've used a couple of times.
0:39
So let's see how we can define methods for our own types. Defining a method is just like defining a function, except that we define it within a class.
0:45
So let's define a function for circles that we'll be able to calculate the area.
0:55
So for example, I'm I want to print something. Like this, but at the moment, this doesn't work because this method doesn't exist,
1:01
so let's create the method in close circle so that this code will compile and run.
1:17
So we'll go to the definition of Cross Circle. I'm going to add a pair of braces.
1:24
And this defines the cross body. And inside this body, we can define methods.
1:29
They're going to want to define the method. I just write a function. This function doesn't take any arguments and it's going to return a double.
1:35
And then I can write the body of the method and the body can make use of any of the properties of the circle.
1:48
So to calculate the area, we need to square the radius and multiply it by PI.
1:55
And we can import pie from our college maths library. So having done that, hopefully I can run the name and see the result.
2:07
Here we are. And if I do the same thing full circle to.
2:22
We should get some different values. The area.
2:33
Now, let's add another method that can calculate the circumference of the circle.
2:53
So again, I'll start by thinking about how I would use this.
3:00
And then again, it doesn't compile, so we need to create a method we have that also within the body of the classical.
3:13
So we have a function circumference.
3:21
Again, it doesn't take any argument because it's going to act upon the circle object.
3:27
It's going to return a double. And this one is two times PI, times the radius.
3:33
And if we try it out. Rob results.
3:49
So one thing we could do is we could change the implementation of the area method to call the
4:04
circumference method and use the calculated circumference value in order to compute the area.
4:10
So in that case, we would have.
4:17
This kind of cool here, so in this case, when I call the method from within the class, I don't have to use a dot notation.
4:24
I just call it as if it was a regular function because it's acting on the same object.
4:31
And so within the class, I can just call circumference as it's another function within the class.
4:36
Let's just run everything again to check that it's working. And we still get the same results.
4:45
So this isn't necessarily a better way to implement it,
4:56
but just to show you that you can call one method from another method inside the body as if it was a local function.
4:59
Let's write a slightly more complex method now that's going to determine whether a certain point is within the circle or not.
5:11
So if we were to define a new point. At 11 five.
5:23
And we could ask. Whether or not he is within circles, he too.
5:36
So maybe we would say see to include pain.
5:47
So this is another method that doesn't exist, so let's try to write this one.
5:59
So this time our method needs to take an argument because we need to pass in a point in order to check whether or not it's within the circle.
6:08
So that's just like a regular function arguments. And then we can do the calculation.
6:16
In this case, I'm going to give a block body because I think we might use a few steps to calculate this result.
6:28
So to determine whether or not the points within the circle,
6:35
we need to calculate the distance from the point to the centre of the circle and see whether or not that's less than the radius.
6:38
So let's calculate first DMX, which is paid up X minus on X and then D Y.
6:47
In the same way. And now we need to calculate the distance.
7:03
Which we can do using Pythagoras. So we'll say the X times x plus d y times d y and then we want to take the square root of the whole thing.
7:15
We can import Collins square root function, but it actually gives us an error at this point because there's a type mismatch.
7:32
Collins square root function would like to have either a float or a double.
7:41
And we've got an integer because we've just multiplied together these integers so we can convert this.
7:47
And in fact, intensité will give us a hand with just fixing this problem.
7:54
So we want to convert this expression to a double in order to make it compatible with square root.
7:58
And what we see is that this actually causes us to call a method on the integer.
8:03
So we put brackets around our integer computation and then we've called a method to double on the resulting integer to convert it into a double.
8:10
So this shows that even the introduced we've been using objects which have methods.
8:19
Now that we have this distance, we can return, whether or not the distance is less than the radius.
8:27
And at this point, I got another error. This is because I forgot something, I forgot to specify the return type of this function.
8:37
And so the co-pilot doesn't know what type we should be returning.
8:46
It doesn't think we should be returning anything. So now I can fix that by specifying the return type and the compilers is happy.
8:50
So having the compiler run all the time in the I.T. gives us good feedback when we slip up and forget something and allows us to fix things quickly.
8:59
So now I can run the main function again. And it says that this point is within the circle.
9:11
And if I try a different point, which is further away, let's try this one.
9:22
Then it's not so that seems OK. In writing this motion, we went through two steps of computation.
9:34
Firstly, we calculated the distance between two points. And then we checked it against the radius.
9:45
It seems like calculating the distance between two points might be some useful functionality that we could use elsewhere.
9:53
That's not explicitly to do with circles.
9:59
So maybe we could write a new function that would just be able to calculate the distance between two points and then use it here,
10:03
but maybe also use it in other places. So I can write that as a top level function, just like the functions we've written before.
10:09
Is the distance between. One point.
10:18
And another point and then I can take this quote that we've written already.
10:26
Just adapt it. And returned this results.
10:39
And again, I forgot to specify all return type. And this one should be a double.
10:50
Now it's happy. Then I can simplify the code that we have here to be the distance between the Centre and Pete.
10:58
And in fact, I could even take this code and replace it here.
11:18
And then given that we've only got one line, maybe I'd convert this into an expression body and things start to look a lot nicer.
11:26
Let's run our functions again just to make sure that everything's still working. This one's false.
11:37
This one straight. Let's do one more method in this case, let's try to work out whether or not one circle intersects with another circle.
11:53
So this is similar to what we did with includes. But instead of checking a point, we're going to check another circle.
12:06
So I might like to write, speak to intercepts, see and again, this is another method that we haven't written yet.
12:22
So let's start writing this one. And this time the argument is going to be another circle.
12:36
So let's call it other. And it's a one time circle.
12:44
And again, this is a brilliant method and try to remember to put in the return tight this time.
12:50
And so then we need to define the body.
12:55
And so in this case, the two circles are going to intersect if the distance between their centres is less than the sum of their radii.
12:59
So we can reduce the distance between function that we just right,
13:09
and we want to check the distance between the centre of the circle and the centre of the other circle, which we can do like this.
13:14
And we want to check that that is less than the Radius Plus.
13:24
The other radius. And so hopefully that's all that we need.
13:30
What's interesting to note in this case is that we call the method on one object.
13:52
We call that the receiver and we pass in as an argument, a different object.
13:57
So for the receiver, we can refer to its properties directly. We just say the centre or the radius and those correspond to the receiving object.
14:03
But for the other circle, the one we pass in as an argument, we have to use the dots notation to get hold of its centre or its radius.
14:14
One more thing to look at here, when we defined the function distance between,
14:27
we did it as a top level function and we've separated it from the data types that it works on, so we've moved it away from points.
14:31
It's just a thing on its own. A more object oriented view on this would be to include distance between as a method of point,
14:41
so that a point would have the ability to calculate its own distance to another point.
14:50
And then, rather than calling a top level function, we would call a method of one point to calculate the distance to the next point.
14:57
So we can easily do that by adding the prices to expand the class body of point,
15:04
taking our function distance between copying it into points and then now we want to change the signature.
15:11
So we're not comparing two point three percent of arguments.
15:24
We're going to compare one point, which is the receiver with another point, which we're passing is an argument.
15:28
And in fact, maybe it makes sense to rename the function to distance to rather than distance between.
15:37
So now, if we just make a couple of changes. This has now changed into a method of point which calculates the distance to another point.
15:47
And so here we can change. Instead of calling this function at the top level function, we can do centre dot distance to PE.
16:05
And here we can do centre dot distance to.
16:20
Other centre. So now we've defined this function as a method of point.
16:29
Our code looks a bit more consistent as we've moved all the code that deals with points into the cost point.
16:36
So as well as using the class as a template to stamp out new objects, we can use it as a way to group together all of the code that works on points.
16:42