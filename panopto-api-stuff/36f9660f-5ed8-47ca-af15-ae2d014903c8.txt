ID: 36f9660f-5ed8-47ca-af15-ae2d014903c8
Title: 4.3 A* algorithm
Category: COMP40008 - Graphs and Algorithms (Spring 2021-2022)
Lecturer: Iain Phillips
Date: 07/02/2021
So now I want to look at a different algorithm for the single shortest path problem.
0:01
The ace star algorithm, which is due to heart, Nelson and Rafaelle.
0:07
So we'll assume for this that we have extra information in the form of a heuristic function H of X,
0:12
which underestimates the distance from any node to the finish node.
0:19
So if we were dealing with cities on a map, this heuristic function H could be the Euclidean distance as the crow flies.
0:24
So if we imagine that this is our destination. And we are over here then the shortest path.
0:34
Might be that, but of course, as the crow flies, we can just theoretically we could go along that dotted line.
0:46
So the and the heuristic function for this value here.
0:56
So let's say that this is node X here.
1:03
So a two X. So let's say that the red distance is 18 here, let's say, and the real shortest path might be 25.
1:08
Let's say then we want the heuristic function to be something which underestimates the distance to the finished programme.
1:21
So we could take H of X, just be 18 like that, because we're never going to be able to get there faster than just going on a straight road.
1:31
As the crow flies. So that would make it therefore easy for us to create here to calculate the heuristic values.
1:42
If we're trying to deal with a map of cities and roads.
1:52
So let's have a look at an example to see the.
2:00
A star algorithm in action. So here we have an example graph.
2:05
We got a start node A, we've got a finish node D and we've got the weights on the arcs, as usual.
2:09
And the extra information we have is the heuristic function values which are shown in red.
2:19
Notice that I have chosen those values such that they are in every case less than the distance the of the shortest path to the finish note.
2:25
So in the case of C here, the juristic values three. But the true shortest path is four.
2:39
And similarly, for all these other nodes that you can see that that is the case.
2:46
And so, OK, so we could solve this problem using Dijkstra's algorithm,
2:52
but we hope to do better with the extra information that the heuristic function gives us.
2:57
And in particular, we want to try and direct our search for the shortest path so that it is going in the right sort of direction.
3:03
We don't want to be searching over here. We want to be searching on these arcs here for the shortest path.
3:10
So that's what we hope this juristic function will encourage us to do.
3:18
So.
3:23
And if we did Dijkstra's algorithm, it would turn out in this case that we would have to compute the entire shortest path tree before reaching node.
3:25
Because these notes here are actually closer than the finish node.
3:36
So we have to Dijkstra's algorithm forces us to compute shortest path to all of these other nodes.
3:40
And of course, Dykstra's album does not use the heuristic information.
3:47
Right. OK. So let's say we go with the Istar algorithm now. So we start as with Dykstra's algorithm and put the start note into the tree.
3:54
And then we have candidate talks to all the neighbouring nodes.
4:04
And now we compute a new value here, which is going to be value F, which is the sum of the shortest path found to that node.
4:10
Plus the heuristic value that will effectively give us an underestimate of how far it is to the finish.
4:27
So in the case of B here, we add the three here, which is the shortest path from A to B that we have found, plus the heuristic function value seven.
4:33
And we get ten. Similarly over here, two plus 10 is 12.
4:43
And here we have three plus eleven is 14. And here we have eight plus five is 13.
4:49
So these values are only defined for the nodes that are, in this case, in the fringe, or they would be defined for the tree as well.
4:57
OK. And now if we were doing Dijkstra's algorithm, then we would choose one of these with the least values, either this, OK, or this OK here.
5:06
So we would in H or K. But now we're a bit more directed because we can see that this value here, the ten is is the best value out of these four five.
5:18
Sorry. And so we're going to choose the ten. So actually this OK will be the next one to add add to the tree.
5:32
And that shows already we're getting some success from this method in that we're directing our search in towards the finish.
5:39
So let's add it in. There it goes. And that means.
5:46
Now, as usual, that we can update information for all the neighbouring arcs.
5:50
Now, this neighbouring node over here, a journey of seven here, plus the ten will be worse than what we got already.
5:55
So we don't update. OK. Now, this is still the candidate arc and the value is 12.
6:03
The value of F. And over here we can add see now into the fringe.
6:10
And the distance is eight plus the horrific values of three.
6:18
So we get 11 here. So C now has a value of eleven. So now we can look amongst all the values in the fringe.
6:24
And we've got a 12 here and eleven here, 13, 12, 14.
6:31
So it looks like 11 is going to win. And so we add C in already.
6:36
This is again, this is looking promising, is taking us in the right direction towards the finish.
6:42
And that means now that the finish node actually joins the tree.
6:47
And the distance here is of course, twelve plus the juristic value of zero.
6:53
And this node adds joins the tree as well.
6:58
And it's got a distance of eleven plus heuristic value of two.
7:03
So he gets a thirteen. So you might think well we're, we're ready to finish now.
7:10
But actually we've got a two Twelve's over here.
7:15
So if the Ahlgren if we're unlucky with the algorithm, given that these probably all are implementation,
7:20
might favour these because they got to 12 before this one got to twelve.
7:26
So therefore, we might have to add that one in.
7:31
OK. And look to see whether we should up date here.
7:35
But but no, we don't need to. And if we.
7:42
And also then this one here. Perhaps. Perhaps. Which means also that these values here have to be calculated.
7:48
But now we haven't found any. And now this one really is the least on here.
7:58
And so now we can finish off. And the finish node has joined the tree.
8:03
And we have computed the shortest path along here.
8:09
And so that's the end of the AIST, our algorithm.
8:13
And this is a success compared to Dijkstra's algorithm, because if you were running Dijkstra's algorithm,
8:17
we would have had to find the shortest path to all these other nodes before we got to the finish node.
8:24
And in this case, we managed to avoid doing that. Okay, so let's define a heuristic function to be consistent.
8:29
If for any adjacent knows X and Y, we have that H of X is less than or equal the W of X, Y plus H y.
8:39
Let's have a diagram for that. So a consistent function is going to.
8:49
So this is R X. And here is all Y.
8:58
And we've got the finish over here. And what we what we want to know is that H of X is less than or equal to W of X, Y plus H a Y.
9:07
So here, for instance, is the arc, the W of X Y.
9:21
Could be that distance there. And then what?
9:27
If we were using the Euclidian metric.
9:32
Then there's we've just got the straight lines joining these not very straight sorry, but they're meant to be straight lines.
9:37
And he has a straight line joining this one here.
9:44
So pretty obviously, the distance between X and the finish as the crow flies is less than or equal to these two red dotted lines.
9:47
And this red dotted line is less than or equal to.
9:55
So age y is just this idea here. So that's h of y.
10:00
H of X is just the start, you're here so we can see that age of X is less than or equal to W, X,
10:06
Y plus H, Y, given that W of X, Y must be at least as great as the the Euclidean distance from X to Y.
10:13
Okay. And also we say pretty obviously that H of X a H of finish.
10:24
Sorry, should be zero. So those conditions can be satisfied, as I say, by the Euclidean distance.
10:30
So that's a sensible definition.
10:39
And we have this proposition that says that if H is a consistent heuristic function,
10:44
appears a path from NUEDEXTA knows why, then H of X is less than or equal to the length of that path.
10:50
In other words, adding up the weights of of all the arcs in that path plus H of Y.
10:56
And that just generalises this to general. So you could prove that easily by induction on the number of arcs in the path
11:03
that this item one here is just the case for a path of lurve with one arc.
11:11
Get it. So and what we can also define a heuristic function to be admissible,
11:15
if for any node X we have H of X is less than or equal to the weight of the shortest path from X to the finish.
11:23
Okay. And it is easy to cheque.
11:32
Can I leave that as an exercise that if H is consistent, then H is admissible.
11:36
So consistent is a stronger condition. OK, so now I'm going to present the star algorithm.
11:42
And so it's very much the same as Dijkstra's algorithm.
11:55
And I've highlighted the differences in bloom. So the input is the way to graph the start and finish nodes.
12:03
And this extra heuristic function, which we will assume is consistent, as in the definition on the previous slide.
12:10
And so, okay, so in it we start by putting the start node into the tree.
12:22
And we set F off start to be G of start plus H of start and G of start is just zero.
12:27
So G here is basically the Dijkstra, the calculation of the shortest path from the start.
12:36
So this is this is just the Dijkstra calculation. H is of course a heuristic function.
12:42
So we are actually going to minimise on the some of those two, which is F now the F, G and H.
12:48
Here are conventional notations that are sort of standard for doing up or writing the Istar algorithm.
12:54
And then we look at the all the axes which are adjacent to start.
13:01
We put them in the fringe and we set G of X to be the weight from start to X.
13:07
This is just the same as in Dijkstra's algorithm. And we said F of X to be G of X plus H of X.
13:13
And this part, again, is pretty much the same as Dijkstra's algorithm.
13:23
While you've not found now, Finnish has not joined the tree, so we haven't yet found the shortest path.
13:27
And then we select a French node such that F of X is Midem.
13:34
So the difference here is instead of putting G of X here, we're putting, as we would in Dykstra's algorithm,
13:37
we're putting F of X to be minimum and we move X from the fringe into the tree.
13:43
And then we do our usual updating. So we have the same kind of diagram that we had for dealing with just.
13:51
Show you the same diagram that we had with the Dijkstra's algorithm here.
14:08
So we look at everything, which is.
14:12
So this node F is as join the tree.
14:17
And we look at all the Y's which are adjacent to it. And then if they're in the fringe, then we update the values of G and F.
14:21
So here. So this is the same as in Dykstra's out.
14:32
Then we look and see where the G of X the shortest path.
14:36
Sorry, the G of X plus. So X is is F in this diagram here.
14:40
And we see where the G of X plus the weight from X to Y is less than the current value of G.
14:46
For this node here. And if so, we update it by making it smaller.
14:57
G of Y equals G of X plus W x y. And then we update the F function by because that will have reduced as well.
15:01
And we said the parent of Y to be this note here rather than the one it was before.
15:15
Otherwise, we're dealing with an unseen node y problem in this diagram here.
15:22
And so we simply said, gee, this is just the Dijkstra calculation.
15:27
G of Y equals G of X, but slowly X, Y, and then we assign f Y to be G a y plus h y.
15:32
And at the end here, then the wants finish has joined the tree.
15:41
Then G. Here does compute the value of the shortest path.
15:48
So I emphasise that this algorithm is really computing the true shortest path.
15:53
I mean, it uses a here mistake, but it is guaranteed to give correct results.
16:00
OK, so. Remarks. First of all, as a bit of terminology, the set of tree that we have talked about,
16:07
tree nodes and fringe nodes to be consistent with our Prem's algorithm and Dykstra's algorithm,
16:19
etc. The tree names are often called the closed set when dealing with a star and the set of Fringe knows is the open set.
16:26
If we were to say it, H of X equals zero for all nodes, then it's easy to cheque that that is in fact a consistent function.
16:36
And then the a star algorithm would just collapse to become Dijkstra's algorithm.
16:43
And a consequence of item two is that the running time for a star will be the same as for Dijkstra's algorithm.
16:50
In the worst case, though, we do hope to do better on average, depending on age.
16:58
So it depends on how good our age is as to how much better we do than than Dijkstra's algorithm.
17:03
Now, the version of a style that I have presented here is assumes that we are using consistent heuristics.
17:09
This is for simplicity and also because it's very close to Dijkstra's algorithm.
17:17
Now, if we if we assume that it's consistent,
17:21
but there is a more general version of a star which is guaranteed to give the correct solution for admissable heuristics,
17:25
this rather weaker assumption and the difference there is that you might have to re-examine nodes that are already in the Clover's set, i.e. the tree.
17:31