ID: 2dfdb2cf-2881-4ddf-b4d8-ae16010721aa
Title: 2.7 Topological sort
Category: COMP40008 - Graphs and Algorithms (Spring 2021-2022)
Lecturer: Iain Phillips
Date: 24/01/2021
So for our final application of DFS and VFX, so I want to talk about top logical sorting.
0:01
So here the problem is that we have a list of tasks to be completed, let's say, and sometimes have to be completed before others.
0:10
So we can view these precedences as a directory graph.
0:17
So here we have an example graph on the left. We have seven tasks to do.
0:23
And the Red Arrow tells us that one has to be done before two and two has to be done before seven.
0:28
And clearly, this dependency graph must be a cyclic.
0:35
Or else we can't find an order in which to complete the task.
0:39
Because if one has to be done before two and two has to be done before one, then it's impossible.
0:42
So the problem is, given that I directed a cyclic graph such as the one in the example or Dagg for short G with end nodes,
0:49
find a total ordering of the nodes X one up to X n, such that for any I and J, if J is greater than I, then there is no path from x j to X I.
1:02
So if J comes later X, J comes later in the list then we can't have a dependency from.
1:15
That means that x j has to be done before X I which comes earlier in the list.
1:24
So in such a total ordering. On the Dagg is called the top logical sort of G.
1:30
And we could write it down as a liquor store, as an array of nodes. So in the example diagram there are lots of possible top logical sorts.
1:38
For instance, we might just regard doesn't those as being three layers. So obviously we can do one, six, three to start with.
1:46
Then we do two and four. And then we do seven and five.
1:53
So we get the order. One, two, three, two, four, seven, five. That's a valid top logical thought.
1:58
Or else, though, we could start with six. And then we can't do two yet.
2:06
So let's do one. And now we can do two. And now we can do seven.
2:12
Because. And we can then. Well, we can't do five until we've done three and four.
2:18
So let's do three, four, five. To complete the top. Logical thought.
2:25
Okay, so Dag's are all connected with Persch partial orderings, given a Dagg G.
2:30
Let's define X does not equal to Y. If there is a path from X to Y in G,
2:41
then that we can cheque easily is a less than or equal or weak partial ordering its reflexive X less than equal to X transitive A. symmetric.
2:47
That says that X less than equal to Y and Y listen equal to X implies that X equals Y because of the acyclic property.
2:59
Conversely, if we taken any partial ordering on a set X and we can turn it into a directed graph by just adding an arc from X to buy,
3:08
if X is less than equal to Y, and then that will be in a cyclic graph.
3:20
So we could say that a top logical sorting of a dagg amounts to a linear ization of a partial ordering,
3:26
i.e. finding a linear order which extends the partial order. OK.
3:32
So how can we do that using depth first search? So the idea here is that when you're finished processing a node X, after you backtrack to X,
3:39
after looking at all its neighbours and performing the DFS, then you must have finished with all the nodes which are reachable from X.
3:49
They must also have finished being processing. Now all those nodes which are reachable from X must come after X in the sorting.
3:56
So that means that once you're finished processing a node X, you can add it to the sorting list sorted list.
4:05
So we're going to create the sorted list starting from the top end and build it up backwards, as it were.
4:13
So the in this example here, then it must be either the seven or the five.
4:21
That must be the first thing to be added into the sorted list, because those are the only ones that don't have any successes that depend on.
4:28
OK. So let's see how we might work this in our particular example using DFS.
4:40
So let's suppose that we go in numerical order.
4:47
So let's start at one. So just let's arbitrarily say, well, go in numerical order.
4:51
So we'll start with one and two DFS at one. So we work forward on, as usual, doing the DFS.
4:56
But we work backwards in terms of adding things to the sorted list.
5:03
So here we go from one that we get to. And then we go up to five.
5:10
And then to backtrack to two and then go to seven.
5:16
OK, so. And then, of course, we need to start again to get the rest of the node.
5:21
So we'll start a DFS at three next go to four.
5:28
Then there's nothing new to visit.
5:33
And then finally we'll start one at six, which looks at two, but doesn't go there because there's nothing left to visit.
5:34
OK. So that gives us the entry order. One, two, five, seven, three, four, six.
5:41
Assuming that the adjacency lists are given, as usual, in numerical order.
5:48
But what we're interested in actually is the exit order.
5:52
So what order do we exit the notes in? Well, we start at one, we go to two, then to five, and then we start back.
5:57
We backtrack from five. So that means we've exited five. So five is the first one to be exited.
6:04
Then the next one is not two, because from two, we go up to seven and then seven.
6:10
We've got nowhere to go. So we backtrack. So seven is the next one to be exited.
6:17
And then two can be exited because we've we've finished processing everything that comes after two.
6:21
And then we backtrack to one. So that gives us five, seven to one.
6:29
And then similarly, we start again at three. We backtrack from four.
6:33
So four is the next one to be exited. Then three and then finally six.
6:37
So this actually is the top logical thought in reverse order.
6:42
So all we have to do is swap this around and we get a top logical thought.
6:48
Six, three, four, one, two, seven, five.
6:53
So here now we can actually give the code for doing this top logical sorting.
7:00
So let's assume that we've got a directed graph G with N nodes.
7:05
And what we want to do is to return a top logical sort of G as an array T.
7:11
S for top logical sort of nodes. Provided that G is a cyclic so r code, we'll be able to cope with the fact that G is not a cyclic.
7:16
And it will discover that and abort. So as in the usual DFS, we need a recursive procedure.
7:26
We'll call DFS T. S with parameter X.
7:34
So we've got the entry code here. We will mark X as being entered and then we look at all its neighbours in the adjacency list.
7:39
We see whether they've if Y has been entered but not exited, then that's a bit strange.
7:48
That means that there is a cycle here. So we should abort in that case.
7:54
But otherwise. And if that means that Y has not been entered in the LS code here then.
7:59
So why is fresh. So we can therefore mark the parent of Y to be X and recursively perform DFS?
8:09
Yes. Why. And then once we're finished processing all the neighbours of X, then we it's time to exit from X.
8:18
So will mark X as exited and then we'll add it to the top of logical thought starting at index,
8:27
a position index which is going to work down from the top of the array.
8:35
So the Raffo code for this is that will first initialise index is N minus one, and then we'll go through all the nodes in the graph in turn.
8:42
And if they have not been entered.
8:55
So we haven't already pressed started processing them already on some from visited them from some other know that we already processed.
8:57
Then we'll run DFS. Yes. At that point.
9:06
So just to re-emphasise, what we do here is we add the notes to the array as they are exited, not as they are entered.
9:11
And correctness follows from the following proposition, which is that when you're performing DFS on a deck,
9:20
when you exit A. X, then it must be the case that you have already exited all the nodes which are reachable from X.
9:28