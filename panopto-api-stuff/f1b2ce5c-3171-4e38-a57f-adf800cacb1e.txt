ID: f1b2ce5c-3171-4e38-a57f-adf800cacb1e
Title: idb-topic-05-sql-ra
Category: COMP40007 - Introduction to Databases (Autumn 2021-2022)
Lecturer: Peter McBrien
Date: 08/12/2021
Having introduced the which were in our previous topics of now,
0:01
look at their our practical implementation of the relational to which you can use in database applications,
0:05
the relation module and algebra were proposed by C.J. called way back in 1970, and during the 1970s,
0:15
IBM developed a prototype system called System ARM, which had with it a language called Structured English Query Language or sequel.
0:23
Later sequel was renamed. But the term sequel was quite often used by people when referring to Eskimo.
0:33
Various commercial implementations of escrow launched during the late 1970s and early 80s deep to Oracle and Sybase
0:42
been some of the major first examples in Esquibel World are two principal components the data definition language,
0:50
which is to define the relational schema and populate it with data and the data manipulation language,
0:59
which is the implementations of relations now and also allows you to update the database.
1:05
Let's start with the Doodle to create a new table you simply in, say, create table,
1:12
and then you list the attributes that you want to have in the table along with their data type and whether you can set null values or not in them.
1:20
Strings are supported by either having characterise or variable characterise.
1:30
A VAR char is something that can hold up to, in this case, 20 characters of data or less.
1:35
Whereas if you set it to be a char 20, then it be a fixed length string of 20 characters.
1:41
We should always be padded out with spaces if you stole something smaller than 20 characters in no, so you can support fixed precision arithmetic.
1:46
So, for example, you can define a decimal with 10 duties, two of which are off to the decimal point.
1:56
There are, in fact, a very wide range of data. Types are defined in the Eskil standard and supported by most platforms.
2:03
Notice that a new floating point numbers are defined as being real and you have double precision to support 64 bit numbers.
2:11
Integer gives you a 32 bit number and you don't have long.
2:22
You have begins to have 64 bit integers. Keys are important concept in the relational model and you to find them in
2:25
school by adding things called constraints onto the database and naming them.
2:38
So for this example here, if I want to make sort code the primary key of the branch table, I had a constraint.
2:45
The name of it is optional, but I recommend that when you create databases,
2:53
you always give them a name because it means when you have errors being reported about the key being violated.
2:56
The name is reported rather than some system generated, meaning the string.
3:02
You can also define foreign keys in the cadences or types of constraints.
3:09
The name is getting optional, but very useful for reporting when the keys violated you to find which column or columns in
3:13
your table are going to be pointing at the foreign key and then you reference the remote table.
3:22
And if you are referring to the primary key, there's no need to give the attributes specifically of which you are pointing to.
3:28
So in this case, because I reference the branch table and in the branch table, I have a primary key, which is sort code.
3:37
This sort code value in the account table will be referring to the source code value in the branch table.
3:44
In the relational model, the alternative keys for a table are called candidate keys.
3:54
The notion of primary key has no logical significance, but in issue well,
4:02
what it does is automatically create an index which allows faster access to the data via that index.
4:06
All other keys are called secondary keys. So, for example, if I for some reason not added a primary key constraint to a table when I created it,
4:15
I could always add it later by saying auto table and then tap the constraint that I had to find when I originally created the table.
4:25
If I wanted to find a secondary key, I create a unique index on the table, given the field or fields that I want to make a secondary key.
4:34
Notice without the words unique, I'd still be correct and index, but it wouldn't ensure that there are distinct values for the columns named,
4:46
and therefore you would not be defining a key simply a method of access and table more speedily.
4:54
To insert data into your database,
5:04
you simply use the insert into statement and follow it by values and topples that you want to add it in modern Eskimo.
5:08
You can have a comma separated list of values to insert multiple typos at once.
5:16
If you have a slightly older version of Eskimo, you can only insert one tuple at a time.
5:22
So you'd need for this example, to have multiple insert into statements to insert these six different toppings.
5:27
You can update a table by using the update statement.
5:34
This example here is they update the account table and change the time to be deposit where you have the number equals 100.
5:39
So because number is the key column.
5:47
This will only update one row to one which has no equals 100 and change the type from being current before to deposit now and then.
5:51
If I don't fight side two, I want to delete that row. I say delete from where where I name the table wants to delete arose from.
6:00
And again, like if a predicate which defines which row or rows I want to delete.
6:09
So here, because number is a key, amending and deleting one row is the one that matches a number equals 100.
6:13
So you see the change tables now change to no longer have account number 100.
6:20
Now, let's turn to the data depletion language of the query language part,
6:30
and the principal component is the select from where statement, which corresponds almost precisely to a project select product.
6:34
The from part is to finding a Cartesian product between a number of relations that's followed by the where clause,
6:47
which is just finding the select process that you go over that Cartesian product.
6:56
And finally, the project passed the query. So is which column or columns you want to have produced as a result?
7:01
So this structure gives the Esquibel way of implementing projects that joint queries of the relational algebra.
7:08
So for example, if I take this particular joint query which is joining,
7:16
then sort code between the branch and account tables, and I want to produce those just with I have a type of account.
7:20
I have a where clause, which means the two parts of the select predicate will have the Cartesian product account and branch.
7:28
And at the end I am projecting out the branch name and account number.
7:37
They spend a little bit of time looking at how you have to or can name columns miscue out.
7:43
It's always susceptible to fully disambiguate each column name.
7:50
So in the example I gave you of joining the accounts and branch tables,
7:54
I have named Branch to be bounced up by name and to count to source code to subsequently identify the different attributes.
8:00
I can not simplify it to just be named source code because the source code attribute will become ambiguous as far as the school is concerned.
8:09
Despite the fact it's being equated in the way of class and therefore it doesn't matter which one of the two tables you are referring to.
8:18
So I must disambiguate the source code value,
8:26
but I do not need to discipline Figure eight to be named or indeed to type because they are only found in one of the two tables.
8:30
Be name is found in the branch table and type is found in the account table.
8:38
I can use star to say select all the queries. I perform no projection of two or I can say I want all the columns from a particular table.
8:46
So Branch Total Star Comma Number means I want all the columns from the branch table sort code B9 and cache plus number from the account table.
8:54
OK, let's look at a quiz question,
9:10
and the question is what Eskimo query implements this natural join between accounts and branch with the selected projects and done afterwards?
9:12
Most popular answer when run before was seen, indeed, that is the correct answer.
9:28
You should notice BP is doing a Cartesian product between accountant branch and performs no join over it at all.
9:34
D is flawed in that it tries to join to suckers,
9:43
an account they aren't of the same domain and therefore we won't get a sensible results coming out for this and of course,
9:47
a sorcerer in a Cartesian product between accounting branch and not joining the tables together.
9:55
The basic select from where statements near can be connected, together with a set of binary connective operators,
10:06
union accept and intersects and Union does its namesake in the IRA, as does intersect, except is the Eskimo implementation of the.
10:15
All right. So if I want to perform the I.R.A. expression,
10:25
select no from account minus select number from movement to find those accounts which have had no movements,
10:30
I would say select no from account except select number from movement.
10:37
So far, I've been showing you the classic skull drawing syntax, which is to do the analogy with the primitive operators of the.
10:48
That is, when you want to join two tables together,
10:58
you form the Cartesian product and then name how you want to compare the columns between those two tables.
11:00
In more modern eskew, well, there is a Pacific Join operator where I can state I want to join branch and account together,
11:08
and that must syntactically be followed by an own statement to say how I.
11:16
I'm joining the two tables together. You might argue it's a matter of taste which one you use, but in fact, I would recommend and many people,
11:22
other people would recommend to use a more modern syntax because it forces you to always join tables together where they need to be joined together.
11:32
It's very easy where you have a large scale query involving joins between, say, five,
11:41
seven or 10 different tables and most real type of scale queries in database applications
11:47
often involve multiple way joins to forget to join two of the tables together,
11:53
and then you end up with a Cartesian product being executed.
11:59
And if you say have two large tables, one containing 10000 rows and another a million rows,
12:03
you end up generating a very large data sets, which might force your database system to run out of memory.
12:09
Whereas if you use the modern join on syntax, you're forced to always consider every time you mention some tables to consider how they're
12:17
going to be connected together and avoid such accidental Cartesian products being generated.
12:25
For this particular query, because it's joining the two tables together in a net to join the IS in Modern Eskimo, a natural join operator,
12:32
and the one of the example I've shown you here is equivalent to the ones above
12:42
because notice above to achieve the elimination of the duplicate source code.
12:49
I've had to persistently name the attributes from the account table, omitting the source code in order to know how to code columns in the output.
12:54
But for a natural joined the elimination of the two sort codes coming from branch and the account is automatically done for me.
13:04
And another syntax, which is a sort of halfway house between Nectar joined and natural joins, is to use the using operator.
13:13
And that means to join these two tables, equating that to sort code attributes.
13:22
You might argue why don't you have this using syntax when you have natural join?
13:27
But in fact, the using syntax is a little bit safer than natural joy.
13:32
It's very easy for you to define a database and acquire associated queries where some time they naturally join together correctly.
13:36
And then later on, you might add a table and an extra column to one or other of these tables,
13:47
which then get included in the natural joint because it happens to be a column of the same name in the other table.
13:53
For example, if you had a colour associated with both type with one table and then added colour as a column to the other table.
13:59
It would then be included in this natural joint, but wouldn't be included in the using syntax.
14:07
So here's an overview of the correspondence between the relation algebra balsam small issues,
14:17
which I need to go through in the next topic is that the projection is implemented by a school select selection is implemented by Wear and notice.
14:24
The trick there that select is not crucial in the Russian output does not correspond to select in school.
14:35
Cartesian product is done by having two tables in the from clause and in not necessarily as a specific host.
14:42
Joy you can use instead of two seven to the of their natural join can be
14:50
implemented by stating natural joined as the connectors between the two nations.
14:55
A general feature joint is achieved by having the two tables joined with an instinct afterwards
15:01
and then exit union and then set implement a difference union and intersect in the right.
15:07
There are some cases where you want to be able to join or to another operator with a table and itself,
15:16
and that leads to me needing to introduce the idea of aliases in skill which allow you to rename a column or a table.
15:23
Let's take a practical example to illustrate how this might be used.
15:34
Let's say I want to compare the account table with itself to see which people have both accounts and deposit accounts.
15:39
So what I'm looking at now is where I've got a count table entries,
15:48
where the C name value matches and one of them of the account table entries has a current account and the other one has a deposit account.
15:52
Now you won't be able to achieve this using just a simple select form where query because the where clause can
16:02
only refer to one row at a time as the query is processed and so you will not be able to compare between rows.
16:08
So you set need to do a joint between the account and itself and to disintegrate which account is which you alias them with the statement.
16:16
So I can say the account has current account and account as deposit account so I
16:26
can refer to the original county was either current account or deposit account.
16:30
And because in this case, I want to join between them,
16:37
I'm going to create the names and ensure that the type of the current account is current and the type of the deposit accounts these deposits.
16:39
And then for the sample database, I've given you the full I've got the query output illustrated here.
16:50
Of course, the number filled is now called who's now appearing twice,
16:56
once in current account and once and deposits account too slow to disintegrate that.
16:59
So don't end up at the table with two number column headings.
17:05
I can rename one of them to be current account number and the other one of them to be deposit account number.
17:09
The important thing to think about when you have aliases on the table names is that you're forming a logical copy of the data.
17:16
So this query has in essence generated two new logical copies of the data one called current account that one called a deposit account,
17:23
which exist only for the duration of the query. They're not physically copied in memory.
17:33
It's just a way that the database system can refer to the original data under new names.
17:38