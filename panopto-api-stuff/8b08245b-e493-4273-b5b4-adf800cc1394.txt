ID: 8b08245b-e493-4273-b5b4-adf800cc1394
Title: idb-topic-18-fds-and-keys
Category: COMP40007 - Introduction to Databases (Autumn 2021-2022)
Lecturer: Peter McBrien
Date: 08/12/2021
In this topic, we look at how the notion of functional dependencies is very closely related to the notion of keys in a relational database,
0:01
and then look at how we can record sets of functional dependencies as being equivalent to alternative sets of functional dependencies.
0:10
First of all, let's introduce the idea of keys,
0:20
so if we have a set of attributes in relation that function to serving all the other attributes of our nation,
0:23
all we can say that X must be a super key of the relational.
0:30
And then if it's not possible to remove any attribute from this set of that actually
0:35
is X to form a new subset Prime and X primed to serve in all the other attributes,
0:40
then we can say that X is a minimal key of the relation arm.
0:45
And generally, when people talk about keys of a database,
0:50
they're talking about minimal keys of the database and not super keys only use the term super key.
0:53
When I need to talk about a super case, and otherwise I'll casually talk about keys.
0:59
Let's talk now, find how we can determine the keys of a relation.
1:05
Suppose we have a table branch, so code B nine in cash and we've got the functional dependency centre.
1:11
That sort code determines the branch name branch and then determines the source code and the branch name determines the cash figure.
1:17
So, so code and be named together is a super key of the relation because source code and B name together will
1:25
determine the cash figure and therefore I have determined all the other attributes of the relation.
1:33
Have a code and B names, not a minimal key. Since I can determine from source code above B name and cache i.e. source code by itself is still
1:40
the key and b name by itself can determine source code and cache and therefore by itself is a key.
1:51
So we can say the source code B name is a super key, but not a minimal key, but clearly source code and B name was a single attribute must be minimal.
2:00
Case was I cannot remove anything can still determine any attributes.
2:09
I try out a couple of quick questions on this. Let's look at how we can derive a minimal key from a set of functional dependencies.
2:16
There's popular answer is that. And that is the correct answer.
2:33
Notice from B, I can determine A and C, and therefore I have A and C directly from B.
2:38
Once I have a, I can determine from a e a transitivity e is determined from B.
2:48
So I've got now b determines a C, and the note is also C determines D and therefore transitivity B determines D and so B by itself
2:55
will determine all the other attributes of the relation and therefore B is a minimal key.
3:08
And therefore, I know that B C and a b can not be minimal keys because they have more attributes.
3:14
They have things set that includes B. They might be a alternative minimum key,
3:22
but I notice from a I can determine e but then from E determine D but not go any further to get either a b or C.
3:29
So A by itself is not a key of any type.
3:40
Let's go in the opposite direction, let's say we're told that we've got a relation, ah,
3:50
and we've got the minimal keys AC and B C as alternative mineral keys of a nation which functional dependency does not necessarily hold.
3:54
Given that I have that statement. The most popular answer is C, and that is the correct answer.
4:04
Notice from the fact that AC is a minimal key, I know the AC must determine all the other attributes and from the fact that B C is a minimal key.
4:17
I know that B C must determine all the other attributes and therefore determined d e by themselves.
4:27
And therefore, if I take a B and C together, I know that I can still determine all the other actors with just some AP or just some b c.
4:34
And therefore this functional dependency must hold by itself.
4:45
But there's no way I can infer that to determines anything from the statement that A and A and C and B and C minimal keys.
4:50
Now want to look at properties of sets of functional dependencies and how I can analyse sets of functional dependencies,
5:05
and for the basis of that, I first need to introduce the idea of a closure of a set of attributes,
5:13
and this is really just formalising the notion we've already been using to find the set of attributes
5:20
that is determined by a from a particular set of attributes via some functional dependencies.
5:26
So the closure of a set of attributes, all right has been the set of scripts with a plus.
5:36
And we start in finding this closure by setting the closure to equal just a set of attributes.
5:42
And then we continuously try to apply the functional dependencies by looking at each FTE I have in my set and looking at the left
5:49
hand side and seeing if the set of functional attributes in access is a subset of the attributes I've already found in the closure.
5:59
And then I'm looking for Wyse, which are not already in the closure, and I'm going to add those into the closure in the next step.
6:10
And whilst I'm still finding new attributes to add,
6:18
I keep on going until I find no more attributes to find and then I can return the closure to make this clear.
6:21
Let's look at a couple of examples. First of all, I'm starting with the relation are with six attributes in that,
6:29
and the FDA sets are given here to compute the closure of a I to find all the attributes determined by A.
6:36
We start off by assuming the closure contains just a and then we go through the
6:45
attributes to see which left hand side is contained within the closure I've found so far.
6:51
So the moment is going to be just a is inside that.
6:57
So A determines B C matches B and C are not yet in this A-plus and therefore a set Y to
7:02
equal to B C and I add those into the closure since Y was not empty in the previous steps.
7:10
I then carry on and I now look at which extra functional dependencies I cannot to see.
7:16
This CD is not contained within a b c and therefore I cannot that the C C D function dependency, but C is within a b c so f is next to each beta set.
7:24
Why it was put into the closure. And now I've got the closure containing a b c and then there's no extra funds from dependencies I can add in.
7:37
C D is not contained within ABC. An F and E is not contained within a,
7:49
b c and this and therefore cannot add any more and business stops and the closure of the satisfaction is determined for me is a,
7:55
b, c and F now with the same relation and the same set of function dependencies, let's compute a d plus.
8:03
I start off as before by assuming the closure of this contains just the attributes concerned,
8:15
and I spot again that a is within the set of attributes I can add in B and C.
8:21
And so now a d closed equals A, B, C and D.
8:27
This time C and D is contained within A, B, C and D, so I can now add in E and also C is contained, which I can also add in that so y is equal.
8:32
C yes. So I add those in and have the closure now that is containing A, B, C, D, E and F, which of course is all the attributes of the relation.
8:44
No further FTE supply and we have a result. So clearly, EDI is a key of the relation because its terms,
8:53
all the attributes determine that its a minimal key or simply need to ensure that the closure of D does not determine all the attributes,
9:02
which of course it does not, because D does not appear on the left hand side of any of the function dependencies by itself.
9:10
Closure of D as it is just the appropriate D and therefore a D must be a minimal key of the relation.
9:17
So in this question, we're worried about which closure of the attributes does not cover I.
9:31
I determine all the attributes of the relation and therefore be a at least a super key of the relation.
9:38
And the most popular answers for this one that is not a p is B C, and the answer is the correct one.
9:54
If we look at, first of all, b e as a function dependency that determines a b and C, and then for I've got A and C,
10:01
there's been extra to that to the closure of B any from the fact I've got C,
10:13
I can then get a D and from the combination of of B and D, I can then get F.
10:20
And of course, therefore I've covered all the attributes, noting that E determines F gives me B means I can replace the B here with an F and
10:28
therefore clearly F and E determines all the aspects I've shown C holds and D holds.
10:41
And then looking at a well, AA determines B and C, and once I've got C, I can determine D.
10:50
And with the combination of now B, C and D, I can use B D to get F and B and A to get and therefore cause the closure of AA is now all the attributes.
11:00
So a plus there's a closure to help us all the attributes of the relation.
11:13
I use a key of the relation. Now, let's look at the idea of finding the closure of a set of functional dependencies,
11:17
which means finding all the AfD's that can be derived from a given set of words for simplicity.
11:30
We're going to not include in this closure trivial Ph.Ds, such as eight determined say,
11:39
in cases where the left hand side is not minimal so it can take nor a be determined see if we
11:45
know that eight determines C I we got an extraction could be being added to the left hand side.
11:52
And also we're going to flatten the lefties.
11:59
So we're not going to consider cases where we have multiple actors on the right hand side because by the union law,
12:01
we can regard those as equivalent to the set of attributes with single attributes on the right hand side.
12:07
Now, let's look at two sets of functional dependencies.
12:15
And starting with s, you notice that we can use the rule that A determines B and B determines D to get an extra functional dependency.
12:20
A determines D. We have added that here into the enclosure.
12:33
And also I can use the fact that B determines A and eight C to add in to the closure and extra will be determined.
12:38
C By contrast, starting at T, I can look at the set of rules I've already got here and go from.
12:48
B determines A to act in that A determines tentatively that HMRC surrogate B determines C and
12:59
then as an extra rule and also some beach time as a with a determines d transfer if I can.
13:12
Adding B determines D as a rule that occurs in T to two plus two equals a set of rules their function tends to set.
13:17
And so notice that I'm getting the same set of functional dependencies closing both S. A. And
13:25
therefore I regard the sets of functional dependencies S and T as being equivalent to each other.
13:32
So we have here now a method which allows us to determine the two sets of functional dependencies
13:40
are equivalent to each other and therefore come to be used interchangeably with each other.
13:46
Another thing we need to be able to do is find out what is the minimal cover of a set of functional dependencies, i.e. form,
13:54
where I have the set of functional dependencies where there's no way I can to delete
14:02
any information and still have an equivalent set of functional dependencies.
14:08
So put it slightly more formally, we're saying we've got a minimal cover of a set of functional dependencies.
14:13
See if all the FTC of the original set of functional dependencies can be derived from SC, i.e. the closure of the two is the same,
14:20
and it's not possible to form a new set of functional dependencies as see prime by deleting kind of from the closure,
14:31
the minimal set, the minimal cover that I'm proposing. Let's look at some examples.
14:40
Let's start with a set of functional tendencies.
14:48
S containing eight determines b basic stance A 810 C and B determines C well from the Rule B determine c.
14:52
I can see that b c determines a can be simplified to just be determined, say, because the B determines the C on the right hand side.
15:03
So that will reduce the set of functional dependencies here down to a simpler set
15:13
where I've deleted the C from the left hand side of the second functional dependency,
15:18
and then I have to turn to about how I can proceed. The first is I can say that since I know that A determines B and B to C,
15:25
I can delete the a c functional dependency because this can be derived again from A determines
15:35
B and B determined c analogous to minimal cover item is b b determines A and b determine C,
15:43
and none of these functional dependencies can be deleted and still have something which is equivalent tons of Lee.
15:51
I can say that since I know that B determines a need to turn C,
15:59
I can infer the Beats Term C and I can delete that from this set here and get an alternative.
16:04
Minimal Casa, which is eight as B vitamins A and a determined C.
16:10
So this quiz question we're looking at determining what is the minimal cover of set of functional dependencies.
16:20
And I'd like you to consider this in order because going from A, B, C and D in order simplifying,
16:27
removing information, and the question is where do you stop in this process and not lose any information?
16:36
Well, the most popular answer is C. And the fact that is the correct answer.
16:50
I noticed that a is in fact just the set of functional dependencies you're given repeated.
16:55
And it is possible that given the set of function tendencies in front of you,
17:02
they might already be a minimal cover, not contain any redundant information.
17:05
But in this particular case, going from A to B,
17:11
you'll notice that the difference is that the B C has been removed from the last functional
17:15
dependency and notice that the first instance pendency says that A determines b c
17:21
so very easily I can add in back B and C to the right hand side of this last Bill Cosby
17:26
that determines A and H determines B C and therefore transitive like B determines A,
17:34
B and C. Going on to the next step is a little bit more subtle because I am losing this be a two term insurgency.
17:41
But what you should note is that the first rule was turn you A determines B,
17:54
and therefore I can delete the B from the left hand side of this functional dependency to give me just a term is A.
18:00
And then use the union rule to combine the two left hand,
18:08
right hand sides of eight determines b c a Night-Time Z to get a single functional dependency.
18:13
A determines B, C and D. But the last step is a step too far.
18:19
It's deleting the D from the right hand side here and changing it to be determined d and then removing from the left hand side.
18:25
Right hand side of this aid determines B C and the the the determined.
18:40
And there isn't a way you can derive D from C using the Armstrong axioms,
18:45
and therefore we have a set of functional dependencies that's not equivalent.
18:52
OK, you have enough information now to to the next worksheet, which is all about working out a minimal cover from a set of functional dependencies.
19:01
And in here you've got, in essence, a algorithm to follow, which allows you to formally compute this.
19:12