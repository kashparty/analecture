ID: f9b8ce06-55e3-4560-aad9-adf800cab0af
Title: idb-topic-03-ra-derived
Category: COMP40007 - Introduction to Databases (Autumn 2021-2022)
Lecturer: Peter McBrien
Date: 08/12/2021
In this topic, we look at how more operators can be derived from the primitive operators of the National Front and the most
0:02
important operators to drive are could join operators and these are used very frequently in database queries.
0:10
The natural joint is based on the idea of tables sharing one or more commonly named attributes and forming the Cartesian
0:19
product of those relations and then selecting those rows which match in the values of the commonly named attributes.
0:29
So, for example, if we take our branch and to count tables from the banking database schema,
0:37
we find that the source code is a attribute shared by the branch and account table and therefore a natural join of those
0:43
tables is formed by taking the product between branch to count and keeping only those rows which have the same sort code.
0:52
So taking the Example database that was presented previously, we find that the jawing of branch and account gives me six rows as output,
1:00
where each account is matched up with the corresponding source code in the branch table.
1:09
Let's try out a quiz question. Let's say I'm taking the account and movement from the bank branch database.
1:19
And I want to project the number from the joint of those two tables.
1:26
What would be the result? And from when run previously be is by far the most popular answer, and it's the correct answer.
1:31
If you look at the two tables, each account entry appears at least once in the movement table, apart from number one to five.
1:42
So I end up with the numbers one hundred through two on one nine being this did not account one two five.
1:51
And notice because you always get a set based answer. There are no duplicates in this answer.
1:57
Despite the fact, for example, Account 100 joins three times with move from table.
2:03
The semi join between two tables is rather like a natural join, a set for only the columns of the left hand table of the semi joint are returned.
2:11
So to put another way, it gives me those tables are those rows from the left hand table that do join with
2:22
the right hand table without turning any of the bios from that right hand table.
2:30
So taking the semi joint between account and movement,
2:35
that's going to be equivalent during the natural joint between account and projecting just a
2:39
number for movement because it's the no column that appears in both the all table and the table,
2:44
according to this definition of semicolon. So I end up having listed here five accounts, which of those accounts,
2:51
which have at least one record appearing in the movement cable once missing account one to five because it has no movement records.
2:57
And there are many other joint operators that can define the most important other to mention so far of the equity joint and the thetr
3:08
join an equity joint is a little bit like a natural joint in terms of I'm taking two tables and equating absolutes between the two.
3:18
But here I do not require that they share the same name, so I'm explicitly stating that you want Colin.
3:26
A formulation are matching with Column B from relation s and the fee to join generalises.
3:31
This to making a statement that I want some predicate to be run on each row from
3:39
the Cartesian product and just return those rows which match that predicate.
3:44
Let's try out these four definitions on a quick question and answer the question which query produces the most tuples?
3:49
Remember that in the processing of the query, duplicates will be removed.
3:56
The most popular answer from previous tunnels has run was over quite a few people might be, but a is the correct answer.
4:09
Let's go from work out how many roads are returned by each of the four cases in.
4:17
First of all, taking case a and taking the smallest sort code value appears in branch number 34.
4:22
When I take it in comparison with the account table, it will match all the rows.
4:30
Apart from the first row of account, 34 was the 34.
4:37
Appearing in the branch table is less than 67, appearing in the first two rows and 56 appearing in the last three rows.
4:41
And that gives me five rows from the output with 34 in source code from the branch table.
4:48
Then, for sort code 56 in the branch table, there are two rows in the account table which have a larger sort code 100 and 101.
4:56
So that gives me an extra two rows on top of the original five. A total of seven.
5:05
And of course, when I look at 67 as a Saltcoats value from branch, there are no rows with a larger Sokovia value in the account table.
5:09
So Query A gives me $7.0 output. Query be in the natural drawing between branch and account will be joining in this case on the Silk Road,
5:18
and we find that each of the source code values appears in the account table appears only once in the branch table because it's a primary key,
5:29
and therefore I will get exactly six rows as output in the semi joined between branch and the council.
5:39
Again, be joining on sort code as a value because of the shared common.
5:47
But this time it only turns rows of branch if they appear in the count table.
5:51
In fact, all three branches do appear in the account table, so all three be returned.
5:56
There are no duplicate values because I'm only returning columns from the branch table that matched the card.
6:01
How many times they match the three rows in the output of C and D is simply a longer winded way of expressing what be had as a query.
6:08
Using the an entry joined when explicitly stating that I'm joining on this sort card value from branch and source code value from account.
6:19
The combination of doings and foreign keys is very important because often you will be performing joins
6:31
over following BS or using the pair of attributes that are associated with each other using a foreign key.
6:36
Let's take an example where I have two relations defined and all you know is that
6:43
both religion are adolescents have a column a which they share and nothing else.
6:49
And that Colin or opponent has 100 titles, and that's all rose at Table S has a thousand rows.
6:56
And the question is, how many rows do you get in the output of the natural joint between arms, given that you've got a foreign key essay to?
7:05
The most popular answer is B, and that is the correct answer.
7:23
The reasoning for this is that you could go through each room of table s and no, from the fact that there's a foreign key.
7:27
That's exactly one row in table are will join with that too, because a must be a key table of this to be a valid foreign key.
7:37
And we know that any value that is in s2.0 must also appear in our doctor, so each state will join months and months only we have value.
7:48
There are a thousand rows in table less and therefore a thousand votes in the joint in the two types.
7:59
This quick question is almost identical for the older of the two nations in the foreign key have been reversed, so that a is a foreign key to essay.
8:07
And the answer is most popular is a and that is the correct answer.
8:23
The reason why it's correct is because the argument simply repeats itself in terms of each value appears in are a must appear once a month only in S.
8:28
And therefore, since there are 100 rows in all, I'm going to have 100 rows in the output of the natural joint between the two tables.
8:38
Maybe slightly surprised me, the set algebra intersection is not necessarily nuts and not need to be defined as a primitive operate in the flesh now.
8:54
Sure, it can be tougher defined in terms of difference.
9:02
If I take the difference between R and S, I get as a result of the inner query.
9:07
Those entries in Table are that do not appear in Table s.
9:13
I mean, if I take that away from the original table, ah, of course, like those rows in R,
9:17
which do appear in table less, i.e. the definition of an intersection.
9:23
So let's take an example. Let's say I project the number from a count intersected with the projection, the number from movement.
9:28
The difference between those two queries on either side of the intersection gives me a count one two five.
9:35
That's the only account that pairs in count, but not in movement.
9:42
And if I take a count one to five from the list of all the count numbers, I get a list of those account numbers which have two movements.
9:45
Now, let's try it with a different relation in the intersection of intersection between seeing them on account and name from email.
9:55
And what is the result of that query? And the result of that is the most popular one is D, and that's just the correct answer,
10:05
because it's Matt Bryan and put in the cities that appear both as names in this email table and as as the names in the account table.
10:18
The last of these arrived operators, I want to present his re-election algebra decision.
10:29
It has a very complicated definition, which I'm going to go through,
10:36
but you'll note that it's defined in terms of the primitive operator's projection difference and Cartesian product.
10:39
What it does is give me those entries in table all that will match every row in Table s.
10:48
So in terms of classical logic is do enough for rule type.
10:58
Expression works fine and those who are watching at home rows in Table Pass that make it clear from an example here,
11:02
let's say for all I take the projection of C name and type from accounts like a list of the pairs of customer names and account types.
11:11
And for s,
11:21
I take the projection of types from a count which gives me account and deposit the two types of account that currently appear in the account table.
11:22
Then the division between those two entries will give me Matt Brian and put a visit to
11:31
the Phillies as the two customer names which have every type of account that exist,
11:38
i.e. cards and deposit accounts at present. Let's see how this definition is used to obtain this answer.
11:44
So first of all, let's concentrate on this Cartesian product on the inside.
11:53
And what this difference does is so give me those columns in Table All, which are not in Table S and Cartesian product with all those s.
12:01
So it's the C name that's in the left hand all table because the previous slide that I'm
12:12
going to compare with the type of the table from which is a particular type from account.
12:19
And if I take full pairings of those,
12:26
the semantics of it is I'm getting a list of all possible pairings between customer names that exist and account types that exist.
12:28
So Matt Bryant might have a current account, mcbrien much of a deposit account,
12:37
Boyd might have a current account, Boyd might have a deposit account and so on.
12:41
I then compare that Cartesian product because make all possible combinations with the actual combinations of this exists,
12:48
which I obtain using the R table, a projection of C nine and type from the caps.
12:55
So I know at the moment that has a current account and John has a deposit account.
13:01
It has a current account, but no deposit account and so on, then taken the difference between the two.
13:06
I get a list of those options which are not currently existing.
13:13
I find that the Boyd does not have a deposit account, but he does not have a deposit account.
13:17
Then DeFi projects. So I just have to see names.
13:24
I got a list of those customers which do not have every type of account and then projecting the C name from account.
13:28
I get a list of all possible customer names, which if I take away those customer names,
13:36
which do not have every type of account, I end up with those customers that now do have every type of account.
13:41
We should the intention of the division operator.
13:50
All right, you have enough information now to do the next worksheet, which is about applying derived relational algebra operators.
13:55