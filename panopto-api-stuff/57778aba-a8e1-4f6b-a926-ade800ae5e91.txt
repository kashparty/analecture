ID: 57778aba-a8e1-4f6b-a926-ade800ae5e91
Title: L15 - Let's put together a Manual Processor
Category: COMP40001 - Introduction to Computer Systems (Autumn 2021-2022)
Lecturer: Bjoern Schuller
Date: 22/11/2021
So welcome to lecture 15, and now we will be starting to put together a manual process, so we will be doing this over two lectures.
0:01
So now we're just getting started. The process are now inside your every computer.
0:10
There is at least one processor which can take an instruction, some operations and from those options with the instruction produce a result.
0:17
Processes can be operated in different ways.
0:28
For example, as a CPU or a central processing unit, there's certainly no referral of another computer like an array processor,
0:31
or, of course, in times of deep learning machine learning. Very popular also for number crunching graphics processor or CPU graphics processing unit.
0:39
Also manually programme processor like a stand alone calculator.
0:51
We will now design a manual or externally programmed processor, because people then later on in the course,
0:56
learn how to put together many memory and put that all together to a microprocessor.
1:04
But for now, we do a manual processor. So like a standalone calculator?
1:09
So let's look at the block diagram of a processor of both the data and the
1:18
instructions will be binary numbers we have here and the data and the instruction.
1:22
The processing will be a sequence of one or more steps controlled by a clock.
1:29
So we have a sequential circuit here for the manual processor and here we have a clock input and the result will be a binary number.
1:33
Well, we're looking in to an eight bit processor architecture, of course,
1:49
we can scale up later on and we will base our design on the funnymen architecture from 1945,
1:53
which is subdivided the components of a processor into arithmetic units and registers, and had a common input stream for data and instructions.
2:02
This is all very heavily use the fundamental architecture, so it sounds older than it actually is in the sense of use it.
2:12
We will carry out processing on eight bit bytes similar to the processes of the 1970s.
2:20
That's was also the state of the art in the 80s when I was getting my first computer.
2:28
Of course, I said we can scale up, so this simply makes it easier to.
2:36
Demonstrates things, so we have data or instructions coming here on the same input stream.
2:41
This is the normal architecture where we have data or instructions and the same input stream.
2:51
And we have the manual processor again, and the result.
2:59
And the results in our case will also be a bit, but we will also have to carry out.
3:04
Now we will look into the actions of such a simple processor, and as an example,
3:14
we will use the mean or average of two numbers, so the results should now be A-plus B divided by two.
3:18
That is, of course, the mean of A and B or average, if you will.
3:26
And because of our choice of architecture, all numbers must be represented in a bit.
3:31
We have been looking into an eight bit architecture.
3:35
It also means that the some eight plus B must be less than 256 in order not to and will not be able to properly calculate it.
3:38
What we will see later extend the processing to cope with larger numbers.
3:49
Doing this sequentially, for example, was eight bits and eight bits.
3:55
No, to do our mean calculation a plus b divided by two, the following steps are carried out first.
4:00
The first number is set up on the input lines and stored in a register a.
4:08
So the inward lines for the eight bit are stored and registered a second step.
4:14
We have the second set up on the input lines, so some of this is happening on the input lines.
4:23
We don't care about that for now. And we saw the input No.
4:28
One Register B, so we have a and B or two registers or restored twice.
4:32
The input once for once would be there is magic circuits are set up to at Register A to register B.
4:37
If you remember, we had the L.U was our function line to select whether we want to add or subtract and the likes.
4:45
So you can imagine this is what we're doing here. We are setting, we're setting them up to choose an additional four step.
4:54
The resulting some of A and B is transferred back into a registry.
5:03
So we go through U.
5:07
And from the result registry, we go back into a that is needed as we do the sequential processing that we now want to divide the result by two.
5:10
And you remember division by two means shift one to the right.
5:22
So the shifting circuits are set up to shift the contents of registry,
5:27
if you remember in the and were A-plus B from the previous operations one bit to the right, hence giving us our division by two.
5:31
The result is loaded onto an output register the result register to be able to store the result.
5:41
Now, the process, obviously is a sequential digital circuit, obviously, because we use and registers which store the information.
5:49
So we need a clock, of course. And it's the sequential circuit.
5:57
So now from the example, we see that we need a number of different components to make our processor,
6:06
we need of course registers and we have the A and B register for the input, storing a register to store the results.
6:12
We also need a one bit registers to store the carrier, see if any to complement the result by the carrier information and register.
6:21
To saw the instruction, so the instruction in this case would, for example, be a class or divide by two, and he likes.
6:34
The arithmetic circuits will be an eight bit error and an eight bit shifter for this particular instruction.
6:43
Of course, you could put more in there to be more flexible. But those two would be needed here.
6:50
So let's look into the data path. The example suggests that the registers and arithmetic units must be connected in a specific way,
7:00
and simple data passed might be that we have our input eight bits here in parallel and fed both into a register A or B,
7:09
meaning that we need to give a clock pulse to the correct register to be able to load from input into.
7:19
A or B.
7:27
Or into the instruction register, if you remember, we said the four Norman architecture has of the same data input line for data and instructions.
7:29
This is what we're seeing here. The input line is connected to the input registers for data and the instruction register.
7:41
And we will be having sequentially the correct input coming here, for example, later on from the memory for notes that we don't care.
7:49
And I'm sorry, we will be giving clock pauses to the correct register at a time when the correct data is present in the input.
7:57
The instruction year will be, of course, be used to switch the multiplex to.
8:11
So it will be the bits year for the multiplex and mainly we will be seeing.
8:20
We will meet also other multiplexes. And.
8:28
Here we feed into the charismatic and shift operations unit here, also A and B on the output side, we have a result.
8:36
And the Kerry. Now, note the following about this data passed over, and there is no information about when the data transfers occurred.
8:45
The diagram shows only the possible policies where data can be transferred, and we'll be looking later into how that happens.
8:58
There is nothing in shift. Operations are done by communist nation or circuits without more registers.
9:05
So inside that unit, we have merely combination of circuit, no sequential circuit as we don't need extra registers.
9:12
The addresses are on the outside. Instruction at the end result in Z and the function of the arithmetic.
9:21
Circuits are controlled by the bits in the instruction register. Registered processor is unable to execute further operations on the results register.
9:27
Now, the arithmetic logic unit redesign know this one important component of the CPU, the central processing unit,
9:43
the elite, which we have been looking into lost, which carries out arithmetic or logic operations on its inputs.
9:51
And B we will design a forward unit that can be used as a building block again to
9:58
construct a use of any precision or functional design approach for upscaling.
10:04
So we have a view here of four to fobbit words.
10:11
A and B, we have three selection bits here, and we have our four which results out and carry out on that.
10:18
The select lines up here determine the function of A and B that appears on the output, and we would want to have the following one.
10:27
With three bits, we can do eight possible functions, and we say the first function is zero as an output, so all bets zero equalling zero.
10:37
Then we have b minus s the next function a minus B, so a plus b.
10:51
A exclusive or B. A or B, A and B and finally, minus one.
11:02
So another consent here. Note that when carrying should be won, three of the operations change, so a zero one one,
11:12
which is here A-plus B, of course, goes from A-plus B to A-plus B plus one because we have Kerry in being one.
11:21
Similarly, but be attentive was minus one year.
11:29
We change the cases of B minus an A-minus B. So it's a B minus one because Kerry and his one or B minus a minus one is carrying this one.
11:34
So and arithmetic logic unit is, if you remember,
11:50
a simple combinatorial circuit that can be built from components that we have already designed to provide the arithmetic functions,
11:55
we simply use our errors and subtract hours. You might say, didn't we do this?
12:02
Subtract. As an editor, it was two compliments, actually, we're just using any kind of subjective here for the moment being.
12:09
And we're using two because we have the two cases of a minus B or B1 and say we only need one error because we have A-plus.
12:21
B carrion is connected to each of these and B are connected to each of these.
12:29
And then we have the different output lines coming from each of these blocks and the subsectors and the error.
12:34
Now, the logic functions are provided by simpler gates, Bitwise, so we have all of these logic operations, Bitwise.
12:48
If you remember. This was exclusive or B or an end.
12:58
And then we have the conference zero and one, the other,
13:05
the excuse or it's here depicted not was a second plans, but with this also a very common symbol here.
13:08
And we're simply doing a Bitwise operation here, so we need to permit one of these gates because of war or an end.
13:15
Umm hmm. Now, of course, to choose which function we want to have at each moment in time,
13:25
we will use the multiplex as a three of selection inputs here to choose which
13:34
of these inputs here we're interested in to be forwarded into the result.
13:40
Ultimately, it's outrageous. Register that. However,
13:46
we need one more multiplex that to provide the carry out or carry the carry out
13:51
is the carry out from our Beamon is a B or a plus B substructures and Eris.
13:59
And because of the logic operations, it is simply being zero nothing to carry out for the logic operations.
14:06
Just to remind us here we need one multiplex up for a bit of A and B.
14:13
So for Fobbit, four four eight eight multiplexes, whereas here we only have one carry out, so this will be a single multiplex.
14:21
So. Now we did it for four bits, and we said we can scale that up, and of course we do it as always.
14:30
And here it was carried out into carrion as in the case of the error, by using,
14:40
reusing or building block here the four bits a value twice in a set connected carry
14:45
out from the less significant one in terms of order and to the more significant one.
14:52
So then again, we have a and B and Kerry in No.
15:03
A and B presented to. Both of these IOUs carry and only presented to the lower one that significant bits one.
15:08
Whereas the functional ends, sorry. Are connected to both of these and use.
15:22
And then we have the. Results here in carry out this year.
15:32
So this is up to eight bits, of course, we can then use two of these if you consider the whole block to scale up to 16 or 30 to 64 bits.
15:49
Now we'll look into the Kerry, we can use a two to one multiplex to allow two different Kerry input bids.
16:01
The Kerry in may be set to one or the previous Kerry out,
16:08
so we have here an additional multiplex to decide whether Kerry in should be coming from Kerry out.
16:12
Or it should be said to one could be useful, for example, to do to complement or something like that.
16:22
Kerry maybe set a zero by setting the Register C to zero.
16:30
So this registered you. That is easy by loading up and shooting data and choosing the right operation.
16:35
You remember, for example, that we had Kerry zero.
16:45
In the case of any of these constants or logic operations here, so we can easily set Kerry to zero.
16:50
And this is why we need only one control bit here to choose if Kerry should be one or the last carry out for Kerry in.
17:02
And we can get it to be zero here by enforcing that Kerry to carry out his sue and then choose Kerry and.
17:12
Now you can. Sit back for a moment.
17:24
Why do we do it like this if you want to have a career in one or a zero?
17:29
Isn't it simpler to connect the multiplex to inputs, to hear to one or zero rather than to carry out?
17:34
And reach the state of zero by setting this to zero and then choosing carry out to be folded into carrion.
17:43
Yeah, that would be simpler. But then we can't use the period from the last operation as carrion and that might be needed, for example,
17:52
if you want to do higher precision arithmetic than we have so that we sort of like in the scaling up over time, use the carry out for carrion.
18:01
If you remember, we had also this serial error where we had an error and a flip flop.
18:13
Similarly, we have a register and this means that we could use carry out for carrion, for example, to do a high precision arithmetic.
18:19
Now we also need shifting, if you remember, we wanted you A-plus, be divided by two, divided by two being a shift to the right by one operation.
18:28
If you remember early in the course we discussed the specialised register,
18:37
the shift register that could shift its contents left or right, depending on the multiplex this election different flavours.
18:40
We could incorporate such a shift register in our design, but we will make our life easier by using a simpler system which doesn't store the
18:47
results such that we remain with the combinatorial circuit in the core you frame.
18:55
And we can achieve all the functionality we need by using multiplexes again.
19:06
If you remember, we have done this already once also for a shift to register for shift solution.
19:11
And we have to register one at the multiplex, the one and we have the wiring one in the case of the multi player upscaling.
19:17
So here we go from multiplex version. And hence avoid the need for complex clogging arrangements.
19:24
So we all thought it was a simple one of four function shifter that will have to selection,
19:33
but because it has four functions, so we need two bits and we'll have a data length of eight bits.
19:41
So we have data in your age, bits carryin and that's our shifter data out.
19:47
Of course, we'll say bits, shifters.
19:52
So from in and out of the same word lengths and we have here and the function and choice for types of sifting, we will do the following ones hold.
19:54
So do not shift, but hold the position. Shift left was carry.
20:07
So we're shifting left into carry and then to the new significant bit.
20:14
Arithmetic shift, right? What we shift and copy or keep the most significant bit,
20:19
we will look at this in an illustration of the second and rotate right where we
20:30
put the least significant bit into the most significant bit rotating to the right.
20:35
We'll do this implemented implementation, somebody using one multiplex a bit.
20:41
And as promised, you have a visualisation left shift was carried means that we shift to the left and carry on into the least
20:50
significant bit arithmetic right shift is that we keep the most significant bit and shift the rest to the right.
20:57
When could this be useful? Of course, if you want to divide by two assigned numbers,
21:08
so we need to keep the sign would shift the right rest and finally rotate right where
21:13
we rotate in the sense that we copy this significant bit into most significant bit,
21:20
which would otherwise be lost by shifting everything to the right, which is also often useful.
21:25
Now, if you remember, we can do this with these multiplexes wiring up the correct way.
21:34
For Holt, if you remember, we simply. Wire for the input for output, zero input, zero four input output, six input,
21:43
six and so on and so forth, such as holding in the case, beam, which was shift left, was carry.
21:56
We need to load carrion into the least significant bit, such as we have and the output, the carrion.
22:06
However, as we shift to the left for each other bit, we need to shift to the left.
22:16
Hand's input will be, for example, Fife and output of six or input will be six and output at seven.
22:22
Such that we shift to the left from five to six, from six to seven and so on and so forth.
22:28
So only in the least significant bit we will have a carrying there.
22:33
Next up, if you remember, is arithmetic shift, write arithmetic shift writes,
22:37
means that we hold the most significant bit and shift the rest to the right.
22:43
That's the case. See here if you want to hold the most significant bit, it's the same as in a holding this bit here.
22:47
But for the other ones,
22:57
we were shifting to the right to input substance output and six input one is offered a series of shifting the bits to the right.
23:01
And finally, if you remember, we have rotated, right, same more or less only that we move the least significant bit into the most significant bit.
23:10
And this means that for output seven, the most significant, we use input zero,
23:20
and that's the least significant bit to the output as a significant fit.
23:25
And the other ones, we're also shifting right again, hence this input here mired in both cases.
23:30
And there's no difference each bit of sifted one to the right.
23:37
No four is nice. Why not have eight functions and with the same principle, we can do some more.
23:45
One example here is a logical shift, right? Well, we do not preserve the most significant bit and do not.
23:54
Rotate, when can that be handy when we're not having the sign, but unsigned and we want to divide by two?
24:05
We could do this by using first and a new operation data and one one one two zero.
24:13
So this is called a mosque and the mosque in here, followed by a rotate, right?
24:20
Meaning that was all these ones. We keep the values of the data register only in the case of zero.
24:27
We set it to zero such that then we rotate the zero into the top position and move the other ones to the right.
24:36
That would involve more processing steps and therefore be slow because we have to do this procedurally.
24:47
And why not just simply add more hardware to have a more luxuries shift shift to?
24:55
And was the same principle we can do with these additional functions, again unchanged meaning holds,
25:05
but then we also have rotate left, for example, and not only rotate right.
25:13
And then we have charismatic left and also an automatic right shift left shift was Kerry shift right with Kerry arithmetic, right shift and so forth.
25:17
You can look at the truth table and if you want to add a little bit more time and patience,
25:28
but the principle really is the same as for the four functions, one that we had some more.
25:34
And similarly, you can do the circuit of this, as we did for the full function, one looking from the specification on which inputs need to be wired,
25:43
for which output for these multiplexes here, one bit resembling again, one multiplex.
25:58
It's really the same thing to remember as here for our four functions.
26:06
One thing that now we have these eight functions. And you can imagine it's a trivial matter to design a similar shift of any precision,
26:11
we only need to add more multiplexes and input lines basically, and to have a shifter of any precision.
26:19
Now we can put more detail onto the data path diagram. And this will really be where we take it from in the next lecture.
26:33
This is our many old processor. And you can see that and side by side with a view.
26:43
We now have a shifter here so that we can.
26:51
Feed the A and B registers into either the shifter or the A of you,
26:58
you can see that here we are only having eight as an option to be using the shifter.
27:04
We also have a recursive pass here from more or less the result.
27:12
We don't need to go into the results register, but we can feed it back here now to load the result into the register.
27:18
We will have an multiplex a year to choose if a loading a from data in or from the last resort sold off.
27:30
And that way we can do sequences of reasons. You remember we wanted to do a plus b divided by two to do an average.
27:40
And this is exactly what we will need to first do a plus by a value.
27:49
And then this can be fed into a.
27:54
And then the. We can do that division by two.
27:59
We. Also have, uh.
28:05
Instruction register here again, the carrier register year again and the results register a year.
28:12
And if you remember, this was our carry in multiplex a year.
28:19
So the new thing here really is this multiplex and this multiplex are here.
28:24
This multiplex to choose if you want resulted from sifter or a you.
28:29
And you remember we had multiplexes used here to choose which kind of shifting
28:35
operator operation is used or which kind of algorithmic logic operation is used.
28:41
Now we have sequential further multiplex set to choose whether we want to shift or ail.
28:48
You use a you. You can see already these are instruction register bits,
28:55
meaning that the instruction register here is controlling all these multiplexes and the function selection for the shift and a you.
29:03
Which, if you remember, is ultimately, again, multiplexes that are being controlled.
29:16
So all the multiplexes here are construction registered bids, and these functions and actions here and structure are just the bids.
29:21
So the instruction register literally controls what construction is being operated and as such, we will be looking into this and much more.
29:30
Yeah, it was much more patients in the next lecture. Just let me mention also that we will have a controller you needed that we will also design,
29:42
of course, incoming lectures to give a clock signal at the right moment in time to our registers.
29:51
So to load data into your instruction register, we need to give the following clock edges into those registers of the right moment in time.
29:58
Same, of course, for result and carry register, so we need to have a controller that controls the sequence of events.
30:10
Now that we have not used the carry in input to the sifter in this processor, so.
30:20
It will simply be connected to Logic Zero.
30:27
And as such, we will be looking into this was much more detail in the oncoming lecture and process of Part two,
30:32
which I hope you can't wait to see next. Thank you very much.
30:41