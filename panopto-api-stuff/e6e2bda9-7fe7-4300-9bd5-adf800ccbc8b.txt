ID: e6e2bda9-7fe7-4300-9bd5-adf800ccbc8b
Title: idb-topic-23-serialisable-execution
Category: COMP40007 - Introduction to Databases (Autumn 2021-2022)
Lecturer: Peter McBrien
Date: 08/12/2021
In this topic, we look at how we can ensure that operations in a history are in show.
0:02
I ordered such that we achieve a serialised execution.
0:08
The first thing to note is that we only when looking at sue ability, consider the committed projection of a history.
0:13
That means if I take a history such as hate, see here and look at its operations, I simply ignore all the transactions that have aborted.
0:21
So in this particular case, Transaction three has aborted rather than committed.
0:30
And so for the purposes of seeing our stability,
0:35
we consider that we're only interested in the committed projection of the history concerning the non-reported transactions.
0:38
It's not because they bought a transactions never cause any problems.
0:46
It's simply that that that issue is the matter of the recoverability of the database and that will be dealt with as a separate topic.
0:50
Now, looking at the committed projections,
0:58
what we are worried about is ensuring that the interleaving of our operations is equivalent to some serious history.
1:01
So in the example I've been using, I've got three different histories and therefore which are being executed concurrently,
1:09
and therefore I have six alternative possible serial histories and providing the set
1:16
of operations equivalent to one of those Aldrin's at least one of those holdings.
1:22
I will have a see realisable execution.
1:27
So the question is how do I efficiently check for this during execution in a manner that's not going to be too time consuming?
1:31
And one common technique used is to analyse the conflicts between operations.
1:40
A conflict is perhaps a slightly misleading term because it's simply looking at where two transactions
1:47
interact by either reading and writing to the same object or both writings of the same object.
1:53
So I have a conflict. If two transactions X and Y and I'm now the X, my hair must be different.
2:00
Trying to either read and write to an object or both write to the same object and note,
2:06
I do not consider the pairs where there's some third operation in between,
2:13
which may belong to one of those transactions or some third transaction on the same object.
2:18
And they're looking at this, so to speak, closest pair of conflicts.
2:23
So looking at the free histories I've been using to motivate some of my examples.
2:28
So far, I can determine that looking at history,
2:33
each y and each said they both contain a conflict where the right operation in transaction
2:37
to be Thor is in conflict with the raid operation on B34 and transaction one.
2:43
And so I can write down a conflict that W2 B34 precedes or one in B34,
2:50
meaning that this read on B34 is going to be reading the value produced by transaction to look in at transaction HMX.
2:57
I've got the fact that transaction one is writing to be Thor, followed by a write in transaction to be Thor.
3:08
And therefore I can write down this ordered conflict that the right value that ends up being recorded in the database is going to be.
3:17
The second one was the overwrites the preceding write operation.
3:25
And finally, in terms of conflicts I can identify here,
3:30
I've got the right to own B34 in transaction paycheques preceding the right operation in transaction history.
3:33
One home B34. And so I write down the third conflict, all to the B34 precedes one on B34.
3:42
So the read in transaction two in eight checks is going to read the value before transaction.
3:50
One has that data to notice this rule here about ignoring things where there's a third operation in between means I do not consider as a conflict.
3:55
The deputy, Owen B34, was the one on B34 in either h y or, he said, because of the R one on B2 34 comes in between them.
4:05
Let's try out a quiz question to see if we can identify which are conflicts and which are not conflicts in a particular history.
4:18
Most popular answer here is a and that is the correct answer.
4:31
You can never have a conflict involving to read operations, whereas all the rest are examples of possible conflicts.
4:34
And notice, in particular, the read and write conflict can go in either direction.
4:42
Now, what we want to do is take this idea of conflict and work out if a history is.
4:53
Realisable history or not. And that gives us the idea of something being conflict.
5:00
Sue realisable.
5:05
And this is defined to be the two histories are conflict equivalent to each other if they contain the same set of operations and the order,
5:06
the conflicts or the interactions of transactions in the same way.
5:15
And therefore, a history is conflict too noticeable if it's equivalent to some serial history.
5:21
Let's take a very simple example of where something fails to be context serialised of all hate checks.
5:29
You'll recall we've already identified much earlier as been example of a lost update and uncivilised execution.
5:35
And we've also identified before that it contains two conflicts.
5:42
One are two on B34. The reader 335i transaction to precede the right operation of transaction,
5:47
one B34 and the other that the right operation B34 by transaction, one which seeks to write operation by transaction two on B34.
5:55
And so we have to Aldrin's which conflict with each other.
6:05
The first conflict is seen that a history transaction too must proceed at a transaction.
6:10
One. And the second one, the transaction one must proceed.
6:15
Transaction two. And therefore is not conflict equivalent to either H2, followed by H1 or H1, followed by H2.
6:19
A simple method to check this continuously at one time is to build and maintain a serialisation growth.
6:29
And this means that as we go through executing our histories,
6:37
we check for conflicts occurring and at them into our serialisation graphs and provided that the civilisation graph remains a cyclic.
6:42
We have a conflict zone, noticeable execution. Let's go through this history here and pretend were all executed in these operations in order.
6:52
And when we come to execute the one on B34, I will find that I've got a conflict between Transaction one and B34 and Transaction two on B34.
7:02
And so I can add into the serialisation graph the fact that transaction two must proceed.
7:15
Transaction one. Carry on with execution of this w1th B34 does not conflict with W2 and B34 clipboard
7:21
identified with this operation in between a conflict between those two transactions,
7:30
but then continuing through to look at the B 36 and one on B 56, I can add in a conflict that takes that transaction.
7:36
One must proceed transaction four. And therefore, in the serialisation graph, I add in an arbitrary transaction one and transaction four.
7:47
And then continuing on, I have one. B34 must proceed are full on B34.
7:58
This simply adds reinforcement to the fact that transaction one must be before transaction four.
8:04
And then finally, I have a conflict between two and be 67 and R4 on B 67, so I have the fact that transaction two must be paid for transaction four.
8:10
That's not going directly from transaction to transaction for the end result is a cyclic civilisation graph.
8:22
And hence, I can say that this particular history is an example of something that is conflict civilisation.
8:31
With the civilisation order, the two must come first, followed by T1, followed by T4 by looking at pass through the graph.
8:37
Okay, but that you have enough information to do the worksheet, which is about identifying if histories of conflict so likeable or not.
8:47