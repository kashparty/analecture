ID: 2a6afbfe-9a87-4780-b21a-adee010b476a
Title: L16 - A Manual Processor Part Two (part 2) (lecture)
Category: COMP40001 - Introduction to Computer Systems (Autumn 2021-2022)
Lecturer: Bjoern Schuller
Date: 28/11/2021
So we're filling in the other came up simply with these states here following the state assignment we had used here.
0:00
And you can notice that in the case of zero one one and one one one.
0:10
We don't care. In each of these, of course, simply for the reason that we don't use the state zero one one or one one one in these assignments here.
0:19
Those would be state six and seven. And in those, we don't care.
0:33
So in each of these maps, of course, we have the access here at the same position.
0:38
And then we need to fill in once.
0:43
Of course, wherever this clock signal should be, one which is here the case in state one zero zero one zero zero is here for Clock A.
0:46
And similarly. And the same you would do here for Clark, B Clarke, B is and zero one zero here, one zero one zero.
1:00
And we can circle year together with this ex. Two, to gain a little bit of minimisation.
1:13
And for the results register, we can see that it's one one year.
1:22
So in one or one in this corner here we should be. One can also use the tax here and hence find these compact equations for the clock signals.
1:29
So if we look into this state transition table, no, that is, of course, given by what we had been doing here.
1:42
So we're basically copying this here and then we have the two unused states assignments where we don't care.
1:52
The next state, of course, is given by the fact that we transition from one to two, from two to three and so on and so forth.
2:00
If we are and operate. If operators zero, the next state is always said zero, if you remember.
2:07
And hence, we get this overall state transition team of the year.
2:16
And from that, we can do the apps for.
2:24
The three D's, as you remember from your former state transitions machines.
2:31
And we simply have to use the input variables here in the three cues here to put these camps together.
2:40
And if you copy correctly from this table into these camps here into the circling, we can see that we get somewhat compact.
2:47
Equations here. That's a routine exercise by now.
2:57
Of course, you're invited to do it in detail if you want to.
3:00
We'll also have exercises on that again. And then if you remember, the next step was to check the don't care on.
3:04
Well, we see what we did with the acts.
3:11
If an exit occurred in the circle, of course, we have to insert one back into the table if it wasn't inside it.
3:13
Certainly we have to insert zero back into the surgery and then see what happens.
3:19
And what we see is that. We would go in case of not operate Interstate zero as a next state.
3:23
That is good. So we drop into the idol said immediately and which doesn't do any harm.
3:34
The process is ready to start working properly.
3:40
However, if operators won and we would be in one of the two don't care states six or seven, we would drop in to stage four.
3:44
That doesn't really make much sense. So we want to make sure that we are starting up, not from one of those to while we are and operate,
3:53
but we want to start up with celebrate being zero, then assure that we will be instead zero.
4:03
No matter what, because if you remember from any state, we would go to state zero for operating zero,
4:10
including those, we can see the two unused states, so that looks good.
4:16
Then we only have to make sure that we start up was operating zero or low or not in one of the two new states.
4:21
Now let's look at the output logic from the clock perspective.
4:32
If you remember, it is to provide a clock at, for example, the following clock adds to the registers that are to be loaded and each step.
4:38
Now what do we do this? We can do this by gating the system clock, which is timing each step of the execution.
4:45
So for Register A, for example, we need to queue to queue one prime two zero prime, as you remember,
4:52
because simply, this has been our creation here for clock a queue to queue one time to zero prime.
5:00
So when all these three hold.
5:09
We should give a clock falling and to register a sense,
5:16
what we also need is the system clock and we have an engaged now for the system clock and and reaching the end in the state here.
5:19
This arrangement would mean the control of state register and the process of registers change on the same clock ahead.
5:29
Mhm. So again, control of state register and process of registers change on the same clock.
5:37
And that gives us a race hazard because we need to make sure that the right data
5:44
is available and everything when the state changes and the register changes.
5:51
So why don't we simply use the other rising or falling options so we can change, for example,
5:57
the state of the controller on the following edge and then change the register on the rising edge?
6:07
And then we don't have a race hazard any longer. So to make sure the circuit operates correctly,
6:14
we make the state register a change on the funding edge and the process of registers
6:20
like a B instruction registers C and result on the next rising edge of the clock.
6:25
And how do we do that?
6:32
Well, we simply use and then get instead of an engaged here, so we're inverting and hence, you know, I'd go for the following, but for the rising.
6:33
Edge of the clock signal.
6:44
So remember here with this and Kate, we are finding sort of the right state by veering off to the right cues, cue or cue primes.
6:46
But with this nand gate here, we're making sure that we're using the clock rising edge for the processor registers as opposed to the state machine,
6:54
which uses the following acts.
7:05
And then we have the time between falling and rising and for the data to settle and no race hazards are occurring in a number.
7:07
So we now look at what happens when we execute a programme that finds the mean of two numbers A-plus B divided by two of you,
7:15
remember that was our mission. We wanted to do a mean calculation and it will take to execute cycles.
7:23
And we're looking now into the first execute cycle where we do the addition and then the second execute cycle.
7:32
We will be doing the Division Y two. So let's start with the addition.
7:40
We set the operating input to zero, so the process was put into the idle state to make we're starting from the right.
7:46
Everything's clear and so on. Situation now. Step one set the data in lines to x zero zero zero x x x x x one, meaning year.
7:53
We don't care what what we do care about is the selection, but here for shifter or a view and and this one year to choose what we're loading from.
8:03
So the operate input is set to one. And the instruction here is loaded during construction register,
8:22
after which the output and carry out a set of zero and then select a multiplex selects the data in line.
8:31
So not the accumulation mode where we load a from process results register, but what we load from data.
8:38
And so the zone multiplex a bit here and carry out a set of zero basically by this operation here, that was constant zero.
8:44
So it gives everything zero, including the carry.
8:54
So making sure that we clear the carry and we're making sure that we load a from data and second set the data in lines to number eight.
8:57
So instruction registers zero equals one. And so the data in lines are loaded into register a third set of data and lines.
9:06
Number B, the data in lines are loaded in to register A, B and zero is loaded into registers.
9:14
You c sorry because we had set Kerry to zero before and downloaded from carry out the Karriem.
9:18
Force set the data in lines to X zero one one x one one x, so x are being done carriers, but here we do care.
9:27
Function selection is selecting the function a plus b.
9:36
So this instructions loaded into the instruction register, after which the ACLU, your operative said A-plus B,
9:43
this is these three bits here and the select result multiplexes selects the new output.
9:49
So here we selecting a value as an output and with the other bits.
9:56
Here we select see multiplexes select to see register, making curry and equalling zero.
10:01
So we do a plus b was zero as a in.
10:09
So we're not adding one on top of it, but just be. And then make sure that we load results from you.
10:14
So overall, what this really means is we love the instruction A plus B, and in spite of you remember,
10:23
no data is taken into consideration as merely the step to load the results register and the carrier register.
10:30
So the intermediate result a plus b is loaded into the results register. The CeBIT indicates whether there has been an overflow or not.
10:39
Second, execution cycle is needed to do the actual division by two.
10:48
So we set the data in lines to extreme care zero one one extra care one one zero.
10:53
So this instruction is loaded into the instruction register,
10:59
after which the Hlio output remains as a plus B. So now we are choosing this accumulation path
11:02
where we load a from close to the results register and then select a and select result multiplexes.
11:09
Select the result of the eight of you. Second step, we don't need any data, actually, you know,
11:15
data be needed or we were just using the accumulate mode and hence we don't need to load data onto into the registers.
11:23
In fact, well, we shouldn't because otherwise you know, things could happen.
11:33
The l.u output a plus B is loaded into the registry, and so it sabotages to be loaded with whatever happens to be on the data and learns it isn't
11:38
being used now because we're using the accumulation mode and we're just doing a shift operation,
11:46
so we don't need a second data. See is loaded with value.
11:50
See it again. Step four set the data in lines two x one one zero zero x x.
11:55
So there's no instruction here,
12:03
and this instruction is loaded into the instruction read just after which the shift of function is set to alphabetic right shift.
12:04
So these are the bits four or five six again, which for the shift to mean arithmetic, right?
12:11
Shift as medick right off by one of your members divisible by two, and Bulleen and the select results multiplex selects the shifter output.
12:17
No, so you with selecting the shifter and not the AUC before, because we need the Division two.
12:27
So in other words, this command here is divide by two.
12:32
And then finally, we don't need data again, and the final result eight must be divided by two is loaded into the results.
12:37
Register carry out is not needed for this instruction input.
12:43
In fact, p zero. So at the end of this, we can set up right back to zero to put the processor into the idle state.
12:46
At last, we have succeeded in executing two simple programme instructions plus and divide by two.
12:56
We'll take a look at how to get the instructions and data from memory and how to store the results next time.
13:04
So we're looking into putting together a static room and connected to our processor.
13:10
Thanks a lot,
13:15
and I hope you're already super curious about how to put that memory together with our processor and how to actually build that memory up.
13:16