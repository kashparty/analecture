ID: 8653231f-bc9c-4419-86b4-adee014ec0cf
Title: Kotlin - s3e4 - Equality
Category: Week3
Lecturer: Robert Chatley
Date: 28/11/2021
We've used the notion of equality between objects in passing as we written conditional expressions in conflict.
0:05
But let's have a look at it in a little bit more depth. There are actually two different notions of equality in Scotland.
0:11
The first is called referential equality, and the second is structural equality.
0:18
Let's look first at referential equality.
0:23
So here I have an example where I've created a class shop, where a shop has a name as a property and I've created two objects for different shops.
0:26
One is a Starbucks and the other is a subway.
0:36
If we check whether or not these are equal according to referential equality, that means are these to the same object.
0:39
So he is Object S1 one, the same object as object has to, and you can see in this case the clue that they are not.
0:47
If I want to check referential equality, then I use a triple equal sign so we could write something like this.
0:55
And if I run this programme, we should say the answer is false.
1:08
If I make another shot. And then check this one.
1:21
Let's check with that as one is equal to S3. And we see that as one is not equal to history using referential equality,
1:29
because even though these two shops are both Starbucks, they're not the same object.
1:47
They don't represent the same shop, necessarily. You could have two different Starbucks.
1:52
They might even be on different streets. And so just because the shops have the same name doesn't mean we necessarily treat them as equal.
1:57
And if we use referential equality, we're always checking whether or not it is the same object.
2:04
Here we've created three separate objects in memory in our programme.
2:09
I mean, we want to check referential equality in Scotland. We use this triple equal sign.
2:14
If instead, we want to check whether or not these objects represent the same brands,
2:35
perhaps then we could change our notion of equality to be one of structural equality instead.
2:40
So we're not comparing the object references, we're comparing their values.
2:45
When we want to check structural equality, we don't use a triple equals, we use a double equals.
2:51
And that's perhaps what we've seen a little bit more commonly in some of our programmes so far.
2:58
If I were on this programme now. You'll see that the output is still false.
3:04
Both of these. And that's because we need to define a meaningful way to compare the values.
3:12
The default way of comparing values for objects is to do referential equality.
3:18
So even though we've asked for this to be a structural equality comparison,
3:23
what's actually happening here is still a referential equality comparison because that is the default.
3:27
And if we want to do something different from the default, we need to define how that equality comparison happens before we implement that for shops.
3:32
It's useful to have a look at what the compiler does when we write equals equals,
3:40
it's actually translating our equals equals expression into something a little bit more like this.
3:45
And so what happens when we use equals equals is that we, first of all, say, well,
4:06
if has one is no, then the only way that this can be equal is if has two is also now.
4:10
But if one is not null, then we're going to call a method on as one called dot equals a passing as two.
4:16
And then the comparison logic can be handled inside that method in a way that's specific to that type.
4:24
So we can define a dot equals method that specific for shops and we can define
4:29
it so that perhaps shops are determined to be equal if they have the same name.
4:34
So in order to get the equality behaviour that we want, we need to implement.
4:40
This method equals on our shop clasp so that this kind of work.
4:44
The code I wrote here is just synthesised by the compiler, so we don't actually need that one.
4:49
So I'll remove it. So if we want to define a dot equals method, we do that just as a normal method on coffeeshop.
4:53
But in a similar way to what we did with two string,
5:03
we need to define this as being an override method because we have overriding the default behaviour graph.
5:05
The default behaviour goes back to referential equality. We want to override that and provide our own way of determining equality.
5:11
So this is the signature of the equals method. We need to set it up without overriding the default behaviour.
5:29
It's a function it's called equals and it takes as an argument.
5:35
Another object and the type of that there is any question mark.
5:40
Any question mark is the most general type in costume because it could be of any type and it could be not.
5:45
When you called our equals, you can pass in any other object. It doesn't have to be another shop.
5:52
It'll need to be another shop in order for us to determine them to be equal. But if it's not another shop, that's still fine to compare them.
5:58
They just won't be equal.
6:04
So here we take something of any question mark Typekit, and we're going to compare this shop against the others up by their name.
6:06
If their names are the same thing, will return true. And if their names are not the same or it's not a shop or it's now, then we should return false.
6:16
So the first thing we need to do is to determine whether or not the other object that's passed in is a shop.
6:25
So I can say if there is a shop, then we'll determine the equality by comparing the name.
6:31
Now I can just refactor my career a little bit to make it a little bit neater.
6:57
Let's take the return out of the if and return the expression.
7:04
And in fact, now that we have a single expression, we can make this an expression body.
7:08
So here's our equals method. It takes another object.
7:18
It says if that other object is a shop, then we compare the names and return whether or not those are the same.
7:21
Otherwise we return false. Now, if I come back up here and run.
7:29
This check again. Then we see that now as one and two, you are not equal.
7:39
The Starbucks and the subway are different, but S1 and S3, which are both shops with the name Starbucks,
7:45
are determined to be equal using this structural equality with the double equals.
7:50
Let's have a look at a different case where I may be able to find a class for distances.
7:58
And perhaps a distance is kilometres. And metres.
8:05
So once I have this, then I can create some distances. So here again,
8:18
we have a similar thing where we could compare D1 and D2 and expect them to be different
8:38
regardless of whether we use the structural or the referential quality that different objects,
8:45
but they also represent different values.
8:50
So if i d d one equals equals d two or d one equals equals equals two, you would expect that they should return false.
8:52
That's just remove the first two, so we see what we're doing.
9:11
But actually, if we were to compare day one and day three,
9:22
we might want to say that these are equal because these are two separate objects, but they represent the same distance.
9:26
They're both. Twelve hundred metres. So this one.
9:32
We would like to be able to say that this is true, whereas the rest would be false.
9:50
At the moment, we haven't implemented that, so if I run this again, we should see all false.
9:54
And we do. So let's do something similar to what we did for shops and define an equals method for distances
10:01
that will allow us to make this trip so that all had the body override the equals function.
10:08
I will add our own definition here.
10:22
So in this case, I think the best way to do this is going to be to convert the distance into a total number of metres.
10:26
So then we could say if either is a distance and we return total metres of this object is equal to the other.
10:33
Total metres now, total metres is a function that is not defined, and we can create that and we should create that as a member of distance,
10:47
but it doesn't need to be part of the public API so we can make a private function here.
10:57
And this is going to return, and it and this is just going to be.
11:05
The number of kilometres that we have specified multiply by a thousand plus the number of metres.
11:15
And then if we complete our IQOS method like this. Then again, I can apply the same refactoring that we did before.
11:25
Change this to be returning the results of the if statement, rather than returning from each branch and convert this into an expression body.
11:35
Now, let's run our code again. And that gave the results we want.
11:51
But it also has another nice side effect that if we created the four, which was zero kilometres, but twelve hundred metres.
12:00
And then compare the three and four. We should see that this one is also true because even though it's specified differently,
12:17
it still represents the same absolute distance between two points twelve hundred metres or one kilometre and two hundred metres.
12:30
And we see that we do get that result.
12:46