ID: 99d57435-1171-4743-b4f0-adee010b82a7
Title: L17 - Random Access Memory and the Fetch Cycle (lecture)
Category: COMP40001 - Introduction to Computer Systems (Autumn 2021-2022)
Lecturer: Bjoern Schuller
Date: 28/11/2021
Welcome to Lecture 17, The Random Access Memory and the fetch cycle now, if you remember,
0:01
we put together a manual process, a list, and we have been discussing most of the execute cycle.
0:08
So together today, we know we will actually be looking into putting together a memory,
0:13
connecting it to the manual process and then extending our controller idea by putting together
0:20
the fetch cycle before we will put the two together for the fetch and execute cycle,
0:26
fetching data from the memory and then executing that data right?
0:31
Random access memory. So we continue to put together a computer system, right?
0:37
So and in this lecture, we will add to our processor the memory we will consider first,
0:41
the implementation of random access, memories of the kind of memory we are building.
0:48
And then we will turn to how it is used by the central processor, essentially meaning that we will connected to the central processor.
0:53
No one, but memory is something we already know it's a single type flip flop.
1:03
That's one bit memory because it can store one bit right to use it.
1:07
As such, we need to give it a unique address. So of course, we will not be able to put together a computer with one bit memory only.
1:11
So we need several one bit memories put together. And for that, we will be using addresses.
1:20
And address is simply a binary number that references to a certain part in the memory.
1:26
So it could be an eight bit address that could be 16 and so on, 32 bit measures 64 and becomes clear.
1:34
The longer the word, the more memory we can address. A binary number can be uniquely identified by a friend.
1:41
And here it comes again, decoder our good old friend.
1:48
So we have an address here. Mm-Hmm. Was an Edwards bus and several wires put together to a bus?
1:53
Former bus fed into the decoder and the decoder, then being a binary honouree decoder, hence addressing exactly.
2:03
One bit in the memory in our case here. So what we need is the decoder to be connected to our Dr. Flip flop in two ways.
2:18
On the one hand side, we're connecting it to clock the flip flop that would be if you want to write to that one bit memory.
2:31
On the other hand side, the decoder will here be connected to an engaged to read from that flip flop.
2:39
So we will have the address and the Q output of the D Q flip flop put into an end gate and also connect the read line.
2:46
So the read line is the command line. Whether we are reading from the memory or writing from the memory sort of writing to the memory.
2:57
When read is true, this and gate opens up here and the address is the one of the flip flop.
3:06
It will follow the Q output here so we can actually read and on the data output line,
3:13
we will feed this into a big augured to be able to read from this or another at that moment in time.
3:21
Active one bit memory to the data outline.
3:29
Now, if it was not true, it would be interpreted as right, hence we have reached inverted here, meaning right?
3:34
Fed into another engaged, which said it's also connected to the same decoder here,
3:45
so if it isn't true, it means right and then we will follow the clock here and give the clock.
3:51
Signal here to this flip flop, of course, only to this flip flop at that moment in time,
4:01
because the Decode Oval as a binary to an area decoder makes sure that only one of these flip flops is triggered at any moment in time.
4:05
That means that when that happens, we take in whatever is available on data in into the tick flip flop.
4:16
So. Stepping back and looking at it again, we have a one bad memory here, and we put this into a bigger set of one bit memories by using an address,
4:25
bus or several wires put together to form an eight bit address, which is fed into a decoder.
4:37
This is a binary honouree decoder and chooses only one of the flip flops at a time.
4:45
We have read control line here, which decides whether we're reading and writing,
4:50
and we have the reading and writing enabled by Gates and Gates connected each to the decoder line for that specific flip flop.
4:56
Each connected to the read line only of that for writers is inverted.
5:08
And then in the case of writing,
5:14
we are giving the clock falling out here to right and in must hold the right item to be written into the secure flip-flop.
5:17
The rest for reading. We have nothing to do with the clock, but we are connecting it to the output, namely the Q output your.
5:26
By that, it becomes clear that the reading operation is merely a combination of circuit here.
5:36
No clock involved, whereas the writing here is a sequential circuit because we are giving a clock falling out to the Flip-Flop.
5:42
Yeah, and also, again, looking from a step backwards at this, we have the following buses here.
5:53
We have an address bus. We have a data in and the data out.
6:00
Well, at this moment, it's not really a bus because we have a single bit, but later we will be putting this together to a bus.
6:04
If we're writing bytes rather than bits.
6:10
So do remind yourself of the decoder or de multiplex is an old friend, it might have helped you to do the cause for concern seconds.
6:15
If you remember we have this big decoder and then cut some wires and didn't cut some other
6:22
wires and put together the right functions to do the cause for concern or the second.
6:28
What it does, essentially, is it converts a binary address to an unnecessary representation.
6:34
So here would be two with binary number.
6:40
And the UN area would be for bid output for each of these has to be zero, except for one at any time.
6:45
Yeah, and we had also this enable year for a functional design approach to be able to put it together to three to eight binary to an area decoder,
6:53
for example. So Assad the one, but butthat Graham is an asymmetric circuit,
7:04
asymmetric because we're reading as the commentariat circuit for writing, it is a sequential circuit,
7:12
the address and data must be present and correct when the clock pulse sets the
7:18
flip-flop realm circuits confirming to this pattern on so-called static runs.
7:22
We'll be talking about dynamic at the end of this lecture, but this is called a static room.
7:28
They're only using special applications because of their large size,
7:33
while the large size because we have dick flip flops rather than single transistors to hold the information.
7:37
Buses are data highways, which are common to many circuits,
7:45
the address lines that go to many one bit static ram circuits are referred to as the address bus.
7:49
The data inundate and old lines from several one bit static ram circuits are
7:56
grouped together in bytes or words of data passes words meaning it could be,
8:00
for example, 16 bit 32 64 bit.
8:05
Of course, even on the 28nm or the control lines in our case,
8:08
read and block also from the bus line because they need to go to each of these flip flops.
8:13
And that's a lot of wires put together into reading clock versus.
8:20
Now, if you use bidirectional databases,
8:29
we can save some wiring and in some the processes the data in and data outlines are never used at the same time.
8:32
So we could use data and data out as a signal bus as it reduces the size and complexity of the memory circuit.
8:41
But to make the data line bidirectional, we need to feed it from more than one place.
8:51
And we cannot do this with ordinary and and mandates, and we will be looking into why.
8:57
Imagine what would happen if you try to feed a bus from two different places using nine gates in this case,
9:03
here we have this nand gate here having zero ethanol.
9:10
Put this in there and get here. Having one is an output zero here.
9:14
One year put together on the same wire, meaning that we have no voltage here, zero volt and five voltage high voltage up here.
9:19
And what happens if I have a potential difference here?
9:29
Well, the wire melts away because we do not have a resistor in between and have a five volt potential difference, hence the wire burns.
9:34
For that reason, we need a special piece of hardware we haven't talked about yet.
9:48
It's a tri state buffer and that can overcome the problem by disconnecting essentially so not being low or high potential,
9:53
but simply disconnecting for that the tri state buffer depicted like this or by the symbol here as a controller in here.
10:01
Note the little inversion here, so it's the triangle for the tri state buffer triangle tri that it's easy to memorise,
10:11
and this little circle here means that C is sort of inverted because it has such zero research zero, the output follows the input.
10:20
Exactly. So it's a bit like connect, but it's inverted.
10:29
So not connect then means.
10:35
That it would actually be disconnected, but if it had such a zoo, it would mean.
10:41
That the output follows the input, exactly. So C is set one, the output is neither zero nor one.
10:46
So in other words, neither, for example, zero volt or five-fold or whatever else is being used to resemble logic high end logic low,
10:54
but is effectively disconnected from the data line. With that in place, we can indeed do a bidirectional data line.
11:04
So this is our bidirectional data line. You're going both both ways round.
11:14
It could be used standards, data and data out, and we have our flip flip-flops here.
11:19
One, two, three and each has been connected to the bus. Why has such a tri state offer so many different data sources can be fed to a single line,
11:26
providing only one of them has the control line you see equalling zero.
11:36
Meaning that it's being connected only to one.
11:43
Flip-Flop at a time, and you can imagine making sure that only one single control line has C C equals zero is another job for the very
11:49
versatile D multiplex r d multiplex of being a binary to unwary decoder and unwary means that only one is one usually.
12:00
So yeah, we need only one to be zero at the time, so we simply need to invert that.
12:11
No, the physical layout of RAM is 2D simply because RAM is made using a silicon wafer that is usually organised in two dimensions,
12:17
and hence we align our one bit storages in 2D with row and column decoders.
12:29
So our eight bit address is divided simply into two times four bits.
12:38
With two decoders, so four bit decoders as an input to an area.
12:46
And that is laid out in 2-D as a column decoder, and the other for that is a roadie coder.
12:55
And then we have a matrix here really of one bit memories and the two decoders
13:01
here identify which position in The Matrix is currently being addressed.
13:06
So to each cell inside this matrix here or one with source here was the end
13:14
game you see with Colin Munro being correct that this one is being addressed.
13:21
We're connecting to two data and two to read. So Reid goes each cell and this tri state offered connexion here with an able and goes to each cell.
13:27
Now, it's one good memory cell has only enabled when both its role in the column lines on one,
13:44
obviously in the case of a 256 bit RAM, each decoder transforms a four bit binary number into a 16 bit honorary number.
13:49
So two quarters are four to 16 binary to an area and the square array of one middle bit memory cells.
13:59
There will only ever be one cell for which both the row and the column lines are one.
14:07
And if you're not using a bit but a bite to be addressed, then we have the.
14:12
Bit for added by the other bits of that bite, but the address for all the bits and that bite will be the same, of course.
14:19
So each cell is connected to the same Reed. Right line and dateline.
14:29
Of course, the data line is connected to the outside through a two way tri state buffer so that unless the chip is enabled,
14:33
no data can pass either in or out. This enables us to build external decoders for larger capacity rooms made up of several banks of signal chips.
14:40
No little thing to consider here. Imagine you have a 32 bit address, both how many bits of RAM can we address?
14:54
We have 32 bit. Second, how many bytes of RAM could we address?
15:02
And third, what size decoder do we need for the row and column decoders?
15:07
Well, what size of decoder do we need if we get 32 bit?
15:12
Of course we do, as we did with the eight bit where we went forward and forward for row and column,
15:16
32 bit means we have 64 bit and 64 bit for row and column. How many bits and bytes can we address?
15:21
Well, the same because we said the addresses the same, no matter how long your word is.
15:28
So if you have a bite to be addressed, we simply have eight times the bits,
15:35
but with the same address address, same if we would address 16 bit or 32, the address would say the same.
15:39
Leaves the question, how many addresses do we have and of course, if we get 32 bits, we have to to the 30 second different addresses.
15:48
No two to the thirty second is four gigabytes. So we can address four gigabytes of bits or bytes, as we said, because the address will stay the same.
15:58
And we will have 16 bit for the row in the column and 16 bit to other means.
16:12
We have 64 K. So overall, it means that was a 32 bit address you can allocate or you can address, sorry, four gigabytes.
16:20
No, this makes it clear why larger world lenses are desirable for that reason.
16:35
There's other reasons to really be seeing later in the course. The longer you vote, the more you can reference in the memory.
16:41
Now we have our REM put together, we know that it's to the matrix of flip flops or words or flip flops.
16:51
And how can we connect this to our process or we discussed in the last two lectures?
17:01
So we will need new registers to do that to store an interface between memory and processor.
17:07
And we will be using a memory address register, which stores the address in memory to be stored or read.
17:13
So register, we will put the address. The address from which we want to read or to which we want to write here.
17:21
Rose of a second register where we store what is being in that address.
17:30
We call this the memory data register MDR or memory buffer register and B R and installs the data read from the memory,
17:37
so the memory address registers towards the address. In the memory, we want to address the memory data register stores,
17:48
what is in the memory at that specific address to be then accessible to the process?
17:55
OK? These two registers MDR and NDR.
18:01
A memory address registered in memory data register are controlled by the processor.
18:06
So we're looking at the two sides first at the memory side of the connexion, so we have a memory here.
18:12
Remember our. Rams here, 256 by one RAM, for example.
18:19
Building blocks here now put an outside design approach notation kind of where you're
18:28
connected to the address pass such that we can address a memory connected all to read.
18:35
That's right. I'm connected to the clock, of course, for the writing operations.
18:40
And on the output side,
18:48
connected to the redirection of data by us was our tri state buffer year and the bidirectional data bus is connected to the memory data register.
18:50
So in other words, the memory data register holds what is currently being on the database for the next tick off the clock.
19:01
The memory address register holds coming from the processor.
19:14
The address, so that is being presented with the address past and hence addresses the correct place in the memory.
19:19
And that way, the memory and the database, as presented with the content of the memory at that specific address,
19:26
which is being stored as set here to be accessible to the processor.
19:35
So the process has some additional registers in addition to MDR, in order to manage the transfer of data to and from the room.
19:44
One is the programme counter P.C. for short that source the address of the next programme instruction to be executed.
19:52
So this is the register where the processor knows where to read the next instruction or data and memory.
20:00
It can be either increment it by one or two sequentially, go through the memory of what the instructions or,
20:08
of course, the PC programme control can be overwritten to jump or branch drops operating.
20:16
And we already know the instruction register that stores the programme instruction being executed.
20:24
So we're looking at things from the processor side of the connexion, from the processor.
20:34
If you're a programme count of the address of the next instruction, we need a multiplex to choose whether the programme counter is.
20:40
Fed from the processor, for example, for jump or jump in subroutine commands, or whether it should be read from the increment,
20:51
we could increment the programme kind of running it through the ACLU, but you can imagine that would cost a lot of time.
20:59
So other than that, we have a half airbase increment assembly for the address.
21:05
This increment increases the address one by one, by one by one,
21:09
so that the next instruction is simply coming from the next address unless we choose wireless multiplex or to.
21:13
Take it from from somewhere else to jump,
21:22
so we were writing the programme kind of jumps and then we will read the next
21:27
instruction from somewhere else and from the incremented by one programme counter.
21:31
We have another multiplex here which.
21:37
And decides whether the memory address register is fed from the processor directly or from the programme counter.
21:45
So the programme kind of makes sense, of course, if you want to read the next instruction.
21:52
But we can also allow the processor to write into the memory address register and
21:56
then the address bar that gives this address to the memory and on the data bus.
22:02
We will then have one if you're reading the right. Information of that address, or if you're writing into it, into the memory,
22:10
we need to give the correct address here and make sure that on the data passes the information that we want to write into the memory.
22:18
The memory data register, however, takes what is on the database into a register readable to the computer.
22:26
And now, as you can see, it also stores the same information into the instruction register.
22:33
So that we have in the instruction register the.
22:40
Instruction. Loaded from the memory data register, but we can also go to the other registers and load the memory data, register into A or B,
22:46
of course, to remember our A-plus B, divided by two mean instructions that we went through last two lectures.
22:57
In that case, we would need to load instruction, register first and a then B then structure register again.
23:05
So this is happening while the memory data register. So we complete the connexion and need some control lines so that we have.
23:13
The process asides the memory side on the right hand side, and we have all written right lines here connected to each of these blocks of RAM.
23:24
We have a clock ram clock.
23:35
Usually this is another clock speed, then the processor has to be carefully connected to the memory blocks and we have a bidirectional data.
23:38
Bus was a tri state buffer and via this memory data register, we connect to the processor via the registers and structural adjustment other registers.
23:49
Later on, we will not be having a and B, but more so this basically.
23:59
To the other registers, yeah, and from the processor, we go either directly into memory, address,
24:04
register to write an address into it from a tree or read or to which you want to write to.
24:13
Or we go by the programme control.
24:21
No, we have a memory and we have a processor, and if you remember the processor, we have been considering the execute title cycle laws,
24:26
and we said some of the data is always magically there on the input lines to to read from now we have a memory and this means no, we cannot.
24:35
And the second part of this cycle, namely the fetch cycle fetch, because we are fetching the data from the memory and then executing it.
24:49
And then later we will be putting these two together to the fetch and execute so I can get data from the memory executed,
24:57
get data from the memory, execute it. If you drive, eat, sleep, rave, repeat or fetch, execute, repeat.
25:04
In order to retrieve data from memory, we need to go through a number of steps each step transpose data from one register to another.
25:12
We have been extensively talking about registry register transfers. The process is called the fetch cycle.
25:19
For example, if you want to get the next programme instruction and loaded into the instruction register, we need the following three steps.
25:26
Still around means load from so the memory address register is loaded from the programme called to
25:35
buy from the programme counter because the programme content knows where our next instruction is.
25:42
So we're loading the memory address register from the programme counter.
25:47
Then we load the memory data register from the RAM at the address in the memory address register.
25:51
So, in other words, reloading into the memory data register,
26:01
what is being held at the position of the programme counter because we're going from programme content to memory,
26:05
address, register and then fill in to memory data register of what is being available at that address.
26:12
At the same time, step, this can happen in parallel because we already put programme content to memory address,
26:21
register there, increasing increment in programme counter by one.
26:27
Next, we're loading the instruction register.
26:33
From the memory data registers or in the instruction register,
26:41
we now have available what has been in the memory data register notice that in the
26:44
second step is that here here the second step we do to register transfers in parallel.
26:50
But that is possible because we know that programme called executive to memory address register and we don't need it.
26:55
And this step and can increment it during the same step to take one step.
27:01
And remember, one step means one cycle of the clock. So if you want to improve the speed of your architecture,
27:06
of course you want to save clock cycles wherever you can now register translates to things that need to be done in register
27:13
transfer operations or that you remember the multiplexes must be set to establish the required connexion process,
27:21
select the right source and destination registers.
27:28
Second, the registers, which are to be loaded, must be given a signal for the action on the clock inputs.
27:32
So these tasks are carried out by a controller, which is asynchronous sequential Typekit, as you remember.
27:40
So controlling when individual registers are loaded can be done simply by creating the system clock.
27:48
We've talked about that as well. So we have the system clock, we have our control logic and regard it.
27:53
If you remember, for example, was a mandate to use the rising age.
28:00
To clock the registers here around noon, so let's look at this the controller for the fetch seconds of some chronic sequential circuit.
28:06
Last time when we did the execute cycle, we didn't know about the fetch cycle yet, and we called it an idle state.
28:16
We now enter this as an execute state and we will be seeing, of course.
28:23
Actually, we do already know that the execute is not a single state,
28:28
but we now pretend it was a single state to simplify our design year from executed go into load memory address graduates.
28:32
If you remember the first step of our fetch cycle, if we have an input of one meaning that we go into fetching, then no matter what,
28:40
for zero and one year we go into load memory data register no matter what zero one, we go into load instruction.
28:53
Just so if you remember, we're loading the instruction,
29:01
register from the memory data register and loading the memory data register from the RAM at the address of the memory address register.
29:03
So this is a first going round.
29:11
You can see it no matter what the input we go.
29:15
On to the next step, once we have the instruction register loaded, we can execute what's in there, right?
29:21
And then we say and execute as long as it takes.
29:27
So know that after fetching an instruction from memory, the processor will execute it in practise, this require more than one stage all year.
29:32
We know that already from last time when we had five states use for that.
29:39
And now, just like we did four execute cycle, we can do the output logic on.
29:46
Output logic, again, is about. Clock control for the registers.
29:52
So we have the following table here. Stage zero is execute clock control and zero for everything here.
29:59
We don't give clock following rising interest whatevers to our registers and we don't care about the multiplexing positions.
30:07
We need to give clock falling or rising at.
30:17
To the memory address register in the first step, and we do care about the multiplex for the memory, address, register and put.
30:25
Just to remind ourselves that is this multiplex a year.
30:35
And we needed to be loaded from the programme counter,
30:42
so we need this multiplex here to be sorry this multiplex of you're such that it looks from here.
30:47
Second step, we need to load memory data, register from RAM at the address of MDR,
31:00
and we need to increment the programme counter, so we need to give our clock edge to MDR and to programme counter.
31:06
We do care about the programme of input multiplex.
31:14
Let's go back and look at it. And this is this multiplex.
31:19
And we want it to be loaded accordingly to be implemented by one.
31:24
So we want to choose this avenue here. And finally, load instruction register, of course, we need to give an edge to the instructor register.
31:34
We don't care about the multiplexes because they have nothing to do with the instruction register.
31:47
So as a side remark is zero, says the enemy are in good multiplex.
31:52
Each of the C output and zero sense the good ones are it to the improvement to output.
31:57
So to implement programme counter and to load memory at which register from the programme counter.
32:02
And, you know, if the use of John Kerry said to make everything simpler,
32:10
fairer equations and circuitry, if you put this into your and secretary, it's very easy.
32:13
We don't do this here in detail. You can do this if you have time and interest. Look at the resulting creations from these very simple ones here.
32:20
And then these are our memory.
32:33
Address registered at to register a PC and air clocks. We only have to say it's here because four states, we only need to flip flops.
32:39
So it's all pretty trivial you're looking at. How to do these different set alignments?
32:50
Why aren't kids using the clock control lines and the output logic?
32:58
Yeah, same problem. As always, we don't want to state the state of the finite state machine here and the registers at the same moment in time.
33:02
So we're using the rising apps for the registers and we're using the falling apps to change the state of a finite state machine to avoid race hazards.
33:12
Well, we have a fetch cycle, and we have RAM just to comment as to the RAM for large rims.
33:24
For example, one megabit exceeding in size teacher flip-flops are not used since they are too big to put this into a reasonable size.
33:38
Instead, large rooms use only one transistor and one capacitor for each bit.
33:49
One transistor and one capacitor capacitor charge means it's one.
33:55
What is being stored? Capacitor uncharged means zero. No, the capacity, as we know, loses in charge over time.
34:00
So this story is not permanent, and all the cells storing ones drift to zero in a fraction of a second or second.
34:11
If they saw zero, there is nothing to be lost, but if they saw one, the charge will be lost over time.
34:17
In a fraction of a second, so we need to do something and we need to employ a method to restore the capacity charge and refreshing it.
34:24
So for this reason, circuits of this kind of called dynamic ram because we dynamically needs recharge.
34:34
The ones refreshing the capacitors charges charges is done when the computer is not accessing the memory to avoid any errors,
34:41
and memory controller must tell the DRM the dynamic RAM to refresh itself periodically.
34:53
The overhead, however, is very low and DRM is something you definitely know also from buying hardware for your computer.
34:58
So we are always big steps approaching the end of the course and in the next lecture and the one there after we
35:07
will be putting together an actual microprocessor with an instruction set and the full fetch and execute cycle.
35:16
I hope it was fun, and I hope you're really excited how we finally reach putting together a microprocessor.
35:25
Thanks a lot.
35:31