ID: a4ca867f-fb21-49c5-97b6-adcf013710b2
Title: L09 - Synchronous Digital Systems (part 2)
Category: COMP40001 - Introduction to Computer Systems (Autumn 2021-2022)
Lecturer: Lluis Vilanova
Date: 28/10/2021
All right, so we are now in the second part of the ninth lecture.
0:03
And as I was saying, we are going to now be looking at a bit more complicated synchronous digital circuit,
0:06
which is a three bit, let's say, controlled country.
0:13
So the first thing that we need to take a look at is the definition of the problem, what exactly we need this circuit to implement.
0:17
And just to make it a bit more complicated and interesting,
0:27
we are going to define a problem that will require us to use Duncker states, as we will see later.
0:31
So the definition of the problem is as follows. Someone told us that they want a circuit with one single input, which is the control input team,
0:39
and they want a counter that comes up even numbers one C zero.
0:50
So we are going to be counting zero zero zero zero one zero one zero zero one one zero and then all the way again.
0:57
So remember, this is zero two four six.
1:06
If we were to interpret and interpret this as binary representations of natural numbers and they also
1:10
said that the person who defined the problem we want need to implement is that whenever C is one,
1:18
we need to come down on numbers.
1:26
So we are going to go zero zero zero one one one one zero one zero one one zero zero one and then back into zero zero zero.
1:30
So. All over. But look again.
1:42
So excellent. Now we have a definition of what we want the circuit to do at a very informal way,
1:49
so the first thing we need to do to formalise this is the state transition diagram that defines this problem.
1:59
So we remember we have one input, which is C, that can either be zero or one.
2:09
And we know the state transitions that we need for each of the cases.
2:15
So now I'm going to stop for a minute so that you can take a pen and paper and try to write the state transition diagram for this problem.
2:19
So now you can pass. OK, great.
2:31
So I hope that you, the person on that, the state transition and they now let's look at it.
2:36
So the first thing the very first thing we need to do here is define.
2:42
How many and which states we need. So here we have some states in some order that we need to be able to include.
2:48
So the first thing we need to do is write down what those states are.
2:57
So zero zero zero is one state in our transition from zero one zero is another state, one zero zero is another state, one one zero is another state.
3:01
Now we have zero zero zero, but that is already here.
3:14
So that's just we're using a state that we had.
3:19
And then we look at the other one, because this does it's then here we have zero zero zero, which again, it's a state that we already looked at.
3:22
So this tells us that these two inputs, since they have shared, they somehow they will in some way come together in the transition era.
3:31
Then we have one one, one which we haven't seen before, one zero one, which we haven't either zero one one and zero zero one.
3:41
So if we look at it now, we see one, two, three, four, five, six, seven, eight possible states.
3:51
Which, of course, is what we would expect from three means if we are to use all the three of them.
4:02
So the state of their own would look exactly like that,
4:10
we would have a state for their number zero and then we would go whenever we have control, when we go this way here.
4:14
And whenever we have control to zero, we go this other way.
4:25
Here and here is a sure thing. Again, remember that we can interpret this binary sequence or set of bits as a number.
4:30
So this would be seven five, three, one and zero and then zero two four, six and zero.
4:44
Now, something interesting to look at here is that we have not defined.
4:55
The transition's.
5:03
Between these two, let's say, groups like we could split this into two different parts of the diagram and there are no arrows going through,
5:06
so we haven't defined, for example, what happens in one.
5:19
Whenever there's a control bid, zero, that was not part of the initial description of the problem.
5:25
So what we can do here is two possible solutions.
5:34
The first one, which would be like, let's say them safety oriented way, is that we need to at all possible transitions and say, for example,
5:38
we establish that whenever we are, uh, in, uh, a known state, uh, transition,
5:50
one that was not in the original problem definition, as we just did over here.
5:57
So, for example, whenever we are in one and we have a zero.
6:02
In the control and we don't know where we need to go because it's not part of the diagram,
6:08
we could say whenever this happens, the next step is going to be zero.
6:12
So that would mean that Xeros. Always.
6:17
Go here. That would be one way to make the narrow.
6:24
Complet. And whenever we have one.
6:32
In these older states, we could say that we go back to state zero.
6:38
Again, this is safe and in fact, since this was not originally defined, we can decide whatever we want here.
6:46
So that is a perfectly good option. Now, another option is to say that we don't really care what happens.
6:52
And that's going to be by doing this, let's say, riskier option.
7:02
That's going to allow us to treat these cases that we don't really care what happens as we
7:06
are going to opportunistically use these cases to design the smallest possible circuit.
7:13
It's going to open up avenues for further optimisation.
7:18
So, of course, just for the sake of this exercise in learning more, we are going to use the second,
7:22
let's say, riskier option for solving this problem, because that was the first one.
7:28
I'm pretty sure you would already be able to do it on your own, given the previous exercises that we've.
7:35
So let's look at this second option with additional optimisation, thanks to these Duncker states.
7:41
So, of course, the first thing we are going to do, like before, is construct the truth table with all the states and input.
7:50
So remember, we have the input. See, that can either be all zeroes or ones.
7:58
So we can basically partition this table, this table here into two one for all the, uh,
8:03
zero six and one for all the seats when they are one and then feeling that every single possible state and in
8:13
order zero zero zero zero zero one zero one zero zero one one one zero zero zero for each one of the two hubs,
8:23
as we already learnt in previous lectures, and then compute or rather establish what is the next state that we want.
8:31
So remember, we said that whenever we are, uh, zeros.
8:39
Let's do this just to make it clear, whenever C is zero, which is this transition over here, we want to count up.
8:44
Even numbers, so we if we are in zero zero zero, the next even number is zero one zero, which is to.
8:55
And then when they find this one. Then we define the next one that wasn't the original problem and we define each one of them in.
9:05
Let me circle them all up. So this is what we had in the.
9:17
Original problem definition novel, as you will remember from previous lectures,
9:25
we said that all the other states, all the other transitions or cases, we don't care.
9:34
So we mark them with the Duncker Mark, which is, remember, Anex, whenever we put an X here,
9:40
we mean that this Alphabeat, we really don't care what value it is going to take.
9:48
Because whatever is best when we go down to designing the circuit.
9:54
So next thing, of course, once more is to take this to the table and put it into our economic forum so that we can do the appropriate minimisation,
10:01
so we take all the inputs that. That we had, uh, here for the Q&A and the same.
10:14
And we create one Gurnam for each of the other values, which are the debates,
10:24
yeah, then we just fill them in from the table and then do all the circling.
10:31
So remember, whenever we have an X on a Curnoe map.
10:38
We can choose to circle it or not circle it, it doesn't really matter,
10:45
so we could be circling only all the once and it would be correct that there's excess there that are not circled.
10:51
So this is one solution to this problem that provides a small circuit.
10:59
And as you can see, there's excess here that are not circled and others that are circled.
11:05
Now, the reason why in some cases we decide to circle them is because, remember,
11:09
we want as few as possible circles because less circles means less terms.
11:16
So here we have one, two, three and four circles.
11:25
So we have one, two, three and four turns over here.
11:29
But we also won each of these terms. Each of these circles to be as big as possible.
11:35
Because, remember, the the bigger the circle is, the more we are minimising that we have,
11:42
the more we are factoring out, the more we are minimising that term.
11:51
So if we have X is available,
11:56
it's it's it's going to help us to have more and more efficient circuit to use as many of them as we need to make these circles bigger.
11:58
Now, remember, circles have dimensions of powers of two.
12:10
So here we can circle this one in this one X,
12:15
but we could not circle to X is one one because that would be a size of three, which is not often so great.
12:18
We take all of these circles over here. We make them as big as we can and as few as we can.
12:26
And we basically get the in equations, all of these conomos and this is the circuit that we need to implement.
12:33
All right. Now, what exactly happens?
12:44
Like, let's let's look at it more closely, what happens with this don't care values.
12:48
So with this done carefully, as I was saying, whenever we do circle them,
12:55
we are basically sending them into one and whenever we do not circle them, we are sending them into zero.
13:02
So remember, what I said is let's do the circles in the best way we can.
13:10
So as few circles as possible and as best as we can, taking advantage of the axis if we can.
13:15
So after we draw these circles,
13:23
we are basically settling which of the axis are going to be interpreted as one and which of the axis are going to be interpreted as zero.
13:24
So with this, we can look at the truth table after we've settled these values on the on the table, both a truth table and the COL maps, of course.
13:32
So if we set those axes that we had over here. So remember these two, for example, where Xs and these two now here, as you can see,
13:47
are zero and one because these X what is outside of a circle, it becomes a zero.
13:56
And this X was or is inside the circle and therefore it becomes one.
14:01
And the questions, of course, are the ones that we already calculate that this these just to help you think about what's happening with those Xs.
14:06
That's a that's why we are showing this col up. So it's translated with the Xs translated.
14:16
And of course we can do the same for the transition or to table these bits.
14:22
These are two bits over here in red are the ones that before we had as X's and now after looking at the COL maps,
14:31
what we circled and what we did not circle. That's what defines their values on, uh, to a stable that no longer uses, uh, uh, don't care, uh, values.
14:41
So what we have here is that the state has a time and or a time and plus one, which would be the next one.
14:59
That would be the previous time. And this would be the next one.
15:08
Well, you can see that my writing is not that good and even worse when I do it digitally.
15:17
So these are the two things we see that as.
15:23
Per definition, zero goes to two to go to four, four goes to six, six goes to zero,
15:29
but also one goes to zero, three goes to four, five goes to six and seven goes to zero.
15:35
So this is just what came up after doing our, let's say, optimisation with a Carnamah by taking the Donkers in whichever way was more convenient.
15:45
And this is the result which seemingly would not make a lot of sense for a counter.
15:56
But it is the definition that will provide the better smaller circuit.
16:03
So what we can do next is write the transition state, uh, diagram or find the finite state machine for C equals zero.
16:11
So as we already saw, we have the status for our next hour and and and plus one.
16:25
And when C is zero, we are going to have these transitions that we just saw in the truth table.
16:31
Then, of course, if we look at sequels, one, we are going to have these transitions over here, which are different than the ones we saw before.
16:37
This is just what Carnamah told us would be the most efficient way to add these
16:47
missing transitions here so that we would have the smallest possible circuit.
16:52
So next thing that we are going to do. We are going to take all these, uh,
16:58
equations out of the minimisation and we are going to play around with them to see how we
17:04
can express them more efficiently using all the techniques that we all already learnt.
17:12
And after applying all those additional optimisations on the one, two or three,
17:20
we can see something really interesting here is that, for example, Q1 or not.
17:26
Q Three appears into different equations in two different outputs.
17:31
Now, since this is hard for any, uh, term or piece of a boolean equation that is shared across different,
17:38
uh, input circuits, uh, let's say each of these three different equations, any piece that is sure.
17:48
We can, in fact, implement it using one single instance of the, uh, circuit.
17:58
So this means that one single circuit that computes this can be used as part of both equations.
18:04
So we only need it as a bottom, we only need to commit it into harbour once, and that can be quite handy to make further optimisations on the size.
18:13
So finally, what we can do is build the final circuit.
18:26
So remember, because these. Three different states with a three different bits of state.
18:31
So it means the three different lunches and then we just take the outputs of these letters and feed them back into the.
18:40
Input logic that we already calculated with these equations that we're here after
18:51
using the table and then find a state machine and turn out maps and so forth.
18:59
Now, curiously, as I was saying, we have that bit of shared logic over here, which is Q1 or not Q2 three.
19:04
And in fact, we can see this over here. This is one.
19:15
And we are taking it all the way, amongst other places, to here and then we are taking.
19:22
Q three. All the way, not Q3, excuse me, or not Q three over here.
19:31
All the way. To this or so, remember, we said kill or not kill three, which is this or over here,
19:44
and then this is part of these two and these three, amongst other things, that need to be competed together with it.
19:54
So this we can, in fact, see it here. This goes into a piece of, uh, traditional logic that goes into, uh, detail.
20:03
And then there's another brines that goes into another piece of circuit that goes into the, uh, three.
20:12
So this is our final circuit. And, uh, here we see this very particular case of sharing power amongst different.
20:20
Hands or pieces of the various input equations.
20:31
So just as a final reminder, synchronous digital systems are generic.
20:38
So remember, we have state. Reduce the what provides the synchronous part of it.
20:44
So whatever we get as an input, it's going to be the output on the next cycle.
20:51
And we have, uh, we take the output of each of the.
20:59
Flip flops over here of the state and we fit it into some state sequencing logic,
21:06
and we have up until the end of the cycle to perform any operation to change the state that
21:12
we need in whichever way we need to change it according to the definition of the problem.
21:20
And, of course,
21:26
we can take the output of each of the flip flops and drive it into an output logic circuit that is going to interact with the external world.
21:27
So with this, what we have is in fact a very generic definition of any kind of synchronous digital
21:39
circuit that is going to follow this exact pattern that now we know pretty well.
21:47
And from here on, for the rest of the class, we are basically going to be building more and more complex circuits for the output logic and the state
21:52
sequencing logic so that they resemble more and more on every iteration to what we would see in a real computer.
22:02
But the general principle is exactly this one that we learn here on every single circuit
22:09
that we would see in the future is going to be based on this very basic principle here.
22:15
So this would reach the end of the ninth lecture and we'll see each other on the next lecture like.
22:21