ID: 4ea605db-2303-4341-9558-adf800cab0bf
Title: idb-topic-01-relational-model
Category: COMP40007 - Introduction to Databases (Autumn 2021-2022)
Lecturer: Peter McBrien
Date: 08/12/2021
The relational model is quite fundamental to databases and gives a mathematical representation of tabular data.
0:01
First of all, let's give a very formal definition and then I'll quickly move on to give some examples to make this formal definition clear.
0:11
The relation is a table which is given the name R and comprises of a number of attributes which we can give the letters ABC and so.
0:20
The columns, as the attributes can also be called, are often written without the commas when they're given formal notation.
0:32
So if I'm talking about the columns A, B, C and so on, I might just write down ABC without the commas between them.
0:39
And we can talk about the number of attributes in a relation has been the parity of the relation.
0:46
And so if we have a relation are with attributes A1 through to a and we can talk about it being in any relation.
0:52
Each attribute should be given a domain, which is the set of values or type that can be associated with that attribute and where necessary.
1:01
All right. The function attributes are to find the set of attributes that the table has.
1:10
To store information, we give the relation and extent, which is a set of couples.
1:17
And all the couples will be a set of couples, which has the same parity as the original relation.
1:23
You are not allowed to store a duplicate and you'll have one value in the top, all associated with each of you.
1:30
So in tupper one, I have a value associated with attributes, a value associated with that Group B and so on.
1:39
So a relation is the same as a table, in essence.
1:48
And you can say a column is the same as a attribute, and I'll use those two terms interchangeably.
1:52
And the important point to note is that relations are set by structure,
2:01
and that means that the order of the different rows in the table is not significant.
2:07
And the order of the columns is not significant. And also, they are no duplicate rows in the relation.
2:12
Let's try out a quiz question,
2:22
and the point here is to work out which one of these tables is not a proper relation and violates one of the rules that I've given to you before.
2:24
So I ask you to now pose the recording. Work out your answer to the quiz question.
2:36
And once you've got your answer on, pause the recording and I will be giving you the answer.
2:43
So in a previous lecture, when this quiz has been asked, this is the result of the voting from students.
2:53
And you can see that the bulk of people have gone for a D as a answer that since in fact the correct answer.
3:00
But some people have gone for a b d is not for relation because it contains two votes, which contains the same values.
3:07
Notice of the first two rows here contain sort code, 56 Wimbledon and 94000 as a cash figure.
3:14
And you you're not allowed in a valid relational database to have two rows, which are the same as each other.
3:21
However, the order of the columns is not significant, and therefore we shouldn't be,
3:29
which has been named as the first column sort code, as the second column is in effect, the same as Relation A, which simply swaps.
3:35
If all of those columns, we identified the columns by their name and so we can talk about the B name column of branch,
3:42
and it doesn't matter where it appears in a presentation of the information such as shown here.
3:48
You might think that the rule that every couple must have the same number of values and its as the original relation is rather
3:57
restrictive because quite often do you have information that's missing and there are two ways of solving that problem.
4:05
One is to say that where you have a variable amount of information for each tuple,
4:13
you simply store in one table with the information you must have for every record.
4:19
So for example, here I've got an account table and for every account, I've got a type C name and sort code, a piece of information.
4:24
And then in a separate table, I record just those accounts which have a right.
4:34
And here you see that there's a subset of the original accounts listed, and it's just those ones which have an interest rate associated with it.
4:38
We were tentative is that we introduce a concept to show a piece of information is missing in some way, and we call that now.
4:49
And so here I've got, in essence, the same information being stored in one relation.
4:58
And we have now appearing as a value where there is no interest rate.
5:03
There's been a considerable amount of debate in the relational database community about whether novel values are a good thing or not,
5:10
and I'll be touching on that later on in the course, but safe to say that most people take the approach that they store information using.
5:18
So lack of information and is of no value rather than storing it as a separate relation.
5:26
Very important concept in the relational model is that of a relational key.
5:36
And the key is simply a subset of the attributes of a nation that must contain some unique value.
5:42
Now, every relation has a one, at least one key, which is the set of all of this attribute,
5:49
because remember, you have to rule that you're not allowed to have duplicate rows.
5:54
We say that key is violated by having to tap rules which have the same values in the key attributes.
5:59
There's some consequences. If a is a key, then so must be a B.
6:07
So for example, if no was a key of the account table, then so must be the B, the combination of number and type.
6:12
And therefore it's useful to introduce the idea of a minimal key,
6:20
which is a set of attributes for which it is not possible to remove some excuse and still have a key.
6:24
It is possible that you have more than one key for a particular table, and therefore we have the idea of the primary key,
6:30
which is simply one of the keys serves as the default, if no keys being specifically stated.
6:38
Let's look at these keys and ask a couple of quick questions about them, the first one is quite a simple one.
6:46
It's if you've got four different proposals for keys over this movement table, which one of them is being violated by the current data.
6:52
So, OK, I'm going to ask you to pause the playback of this recording and work out your solution before imposing the recording.
7:08
And you can see from a previous time this question was run.
7:23
The vast bulk of students went for Option C and indeed C is the correct answer.
7:27
If you look through the table and it look at the key to find in C, it says that the combination of number and date is a key.
7:34
And if you go through your notice that full account 100,
7:46
the first row and the third row have both at 100 as the number and the 5th January 1999 as the value of the date,
7:51
and therefore those two rows together violate that key.
8:01
All the other keys are held for the current data. Now, let's try a quite different question.
8:06
And this question is quite subtle. He's asking which key makes most sense in a banking universe of discourse, i.e. in a banking application.
8:14
Quite different from the previous question, which is asking which key was being violated.
8:25
And you can see from a previous time this question was asked, B was the most popular answer,
8:39
and C the second choice is rather more of a spread of answers here.
8:44
And in fact, I would argue that C is the correct answer, which might surprise some of you because of course,
8:48
at the moment that key is being violated by the data, but A, B and D are all not being violated by the data.
8:55
But let me ask you why CS in fact, the best answer?
9:03
If I, first of all, consider an answer a it says that each movement in the bank must have a unique amount.
9:08
That means if you went along to an ATM machine to withdraw some cash and previously someone had withdrawn the same amount of use,
9:17
let's say you're trying to take 100 out.
9:25
You get a message from the machine saying sorry, you may not withdraw 100 because a customer has previously withdrawn 100 from the bank.
9:27
Please choose a different amount. Ask that be would mean that no one could withdraw the same amount from a particular count.
9:37
So now the message from the ATM would change to sorry, you have previously withdrawn 100 from your account.
9:46
Please choose a different amount to withdraw from your account.
9:54
Answer D means that you go to the ATM and you be told that sorry, previously a customer has tried to withdraw 100 from this bank today.
10:00
Please come back tomorrow if you wish to withdraw 100 or choose a different amount was RCC.
10:12
C says that you may not withdraw more than one amount from this particular account to date.
10:21
Please come back tomorrow and I have had accounts with such restrictions from building societies in the past, so that sees, in fact,
10:28
the most realistic constraint to put on our banking database a beat and the in fact quite ridiculous constraints to put onto a banking database.
10:36
A foreign key is a very powerful concept in a relational database for maintaining the integrity of data.
10:52
What it states is that some set of attributes appearing in one relation must appear as the key of a relation in other relationships and in fact,
10:59
the Russian, as could be the same relation as the original one.
11:10
They don't have to be distinct relations, though usually they are. Let's look at an example to make this concept clear here.
11:14
I've got the statement that the account sort code is a form key of the branch,
11:23
so code value that means that source code must be a key of the branch table.
11:29
It's especially as stated here to make that clear.
11:35
And it means that every value that appears as a sort code value in the account table must also appear as a source code value in the branch table.
11:38
So you'll notice here 67, 34 56 or the different values of Sokoto appearing in the count table.
11:48
And indeed, 34, 56 and 67 all appear in the branch table, maintaining that foreign key.
11:54
Now, given that data, let's consider some updates occurring to the tables and consider which ones of those updates might violate the foreign key.
12:04
And from a previous run of this question, see was the most popular answer, and indeed see is the correct answer.
12:23
In fact, as patterns B and D could not lead to a violation of the foreign key,
12:30
you can't insert something into the right hand side of the foreign key and cause a violation of the foreign key,
12:36
and you cannot delete something from the left hand side foreign key and cause a violation of the form.
12:43
Take the day and B could lead to a problem, depending on what the update was.
12:49
If you look at a, it's inserted into the account table, something that belongs to Saltcoats 67 but 67 does appear in the branch table,
12:54
so that additional row appearing in the account table will not violate the foreign key.
13:05
Clause 67 is present in the branch table. However, if I tried to delete 67 from the branch table,
13:10
I do run into problems because it would leave two rows left in the count table, the first two rows, which belong to 67.
13:19
There have been no corresponding 67 in the branch table,
13:27
and so that operation would be refused by the database cos it would cause a violation of the foreign key.
13:30
Let's wrap up this presentation with the national model by giving a complete example
13:39
a relational database that I'll be using for many examples through this course,
13:44
it's got three different tables and it's a branch table, an account table and a movement table.
13:49
The primary key of each of the table is underlined, so no is the primary key of account sort, code of branch and my of movement.
13:55
And of course, because it's a key, you'll find that all the rows have a unique value in them, i.e. can be used to identify a row in the table.
14:06
And if I look at the definitions of the keys, you'll see part from the primary keys as an additional one here,
14:16
which is not a primary key which is gender caught, a secondary key. It's B nine and that states that all the branch names are unique.
14:21
So you'll see that each row here contains a different branch name. And then I have two foreign keys.
14:28
The first one says that any account number that pins and movement table must also appear in the count table,
14:34
and this ensures that any movement record of a transaction in the bank corresponds to an account that actually exists.
14:41
And then each account sort code must appear in the branch table, and that ensures that every account belongs to a source code of a branch that exists.
14:49