ID: d537835b-bfd8-4cc9-b957-adce008964e5
Title: L06 - Combinational circuit design (part 3)
Category: COMP40001 - Introduction to Computer Systems (Autumn 2021-2022)
Lecturer: Lluis Vilanova
Date: 27/10/2021
All right, so hello and welcome to the third, the last part of our sixth lecturer in international computer systems,
0:02
and I was, as I was saying on the previous part,
0:08
we're going to be looking very briefly now at some additional circuit optimisations and how testing is handled in digital circuits.
0:11
So in real life, when we manufacture logic gates using transistors,
0:22
each of these gates has different sizes inside the silicon wafer that contains multiple
0:30
chips and we can add more or less assume some kind of abstract notion of size to them.
0:40
And usually they they have these relative sizes that you see on this table over here.
0:48
So you will have that. The inverter is the smallest, has the small is the gate with a smaller size, with three units of size.
0:56
Then Nans and Knauss are slightly bigger.
1:05
Remember that they contain not the and or functionality on top of it when they go together.
1:11
It's pretty simple. That's why we go from three to four units.
1:20
But then once we go into a full and or the size goes up to six and then if we look at exorcised
1:25
next Knauss and these are the most complicated games in terms of size and they have a duty.
1:35
So remember that men's. The universal of gates, so we can implement absolutely any plans you could of using nuns,
1:42
and that's exactly what we are going to be looking at because remember that circuit from the previous previous part uses and the N
1:54
so but we are going to look at how to change this gauge in the circuit so that we can reduce the size of the circuit by using N,
2:05
which are can build a good system using the knowledge that we already got from previous parts.
2:15
So first thing we are going to do is say, for example, we want to take this or we're here,
2:25
which remember has a size of three excuse me, has the size of six.
2:32
Let me give this one that the size of six and we want to replace it with one of the men that has size of four, and therefore we gain some seats.
2:39
So if we remember the Morgens theorem, we can transform this or into a mind with negative inputs such.
2:53
So once we have this now, we can realise that this negated inputs over here.
3:09
Can, in fact, be moved down the line.
3:19
Into care. And then it turns out that by moving this tool instead of ends here, what we have is nuts, which again, are smaller to fabricate.
3:24
So what we get then by having them, we're going to see them on the initial or that we had over here and changing it to an end.
3:38
Is that now or circuit went from size twenty four originally to having now only 18 units of size.
3:48
So these are ways in which we can minimise the sizes of circuits.
3:59
And this is in fact what is applied professionally using all sorts of very complex
4:04
tools that go through secret designs and look for ways to minimise the impact.
4:12
Each foundry manufacturer uses different technologies,
4:20
so then each of them will have a different trade-offs on what is the best way to
4:24
minimise size without changing timing constraints that you may have in your circuit.
4:30
So here we are looking at very simple examples. That look quite straightforward to optimise, but in reality,
4:36
we are talking about chips with many billions of transistors and doing this in a systematic way is not such a simple task.
4:44
And in fact, this leads us to testing, this is such a complicated task in reality that debarking power is very difficult for sure.
4:56
We can just with pen and paper, go through our tables that we started with and the circle that we ended up implementing.
5:07
And we can check that they much in terms of their inputs and outputs.
5:15
But in reality, as they just said, come on, they can have billions of transistors and we use these transistors for Bill Gates to Bill Gates excuse me.
5:20
And so, as you can see, these very easily becomes a very complicated problem.
5:33
And we could end up after replacing some of the engine optimisation of the circuit with
5:40
a resulting circuit that does not implement the initial specification that we have.
5:46
And this, in fact, has happened many, many times before in commercial products.
5:51
And here's one example from the Intel Pentium Biffy.
5:57
This is the fifth version of the into Pentium processor, which came out in nineteen ninety three.
6:01
It was a time where they were churning out new models very quickly.
6:08
Many models, versions of the processor came out only a few years apart.
6:13
And for example,
6:21
there was this case of floating point division where this had to be the output of multiplying these numbers and then doing this division.
6:24
These would have been the expected output. But what the Intel Pentium B5 version gave as a result is the other one, which is not right.
6:33
And this is a massive point on how important it debugging is,
6:44
because what Intel had to do after shipping these processors that were already on the market and people had been buying them,
6:53
they had to tell everyone to just send the chips back and then stop production for that version and ramp
6:59
up production for a new one and send a replacement to plans for where they bought the previous version.
7:06
And in fact, that resulted in. Billions in losses or one or maybe more billions in losses, which probably today would be much more money.
7:12
So as you can see with these very complex chips, it's very hard to get it right.
7:25
And getting it wrong can be a massive. Problem economically, if you are sending these tubes in at a massive scale.
7:34
And this is why in a professional environment, people have moved into ways of systematising,
7:46
that's so what we can do is feed large ranges of inputs to the circuit and observe
7:57
this behaviour so we can sarcastically choose which ones we are going to test,
8:04
for example,
8:09
by ignoring the most trivial ones or others that we know that the circuit hasn't changed and we already thoroughly tested it in previous versions.
8:10
So we can play around with this so that we can make the number of systematic tests smaller and we are going to do it using simulation so far.
8:19
So before we send it to a foundry for manufacturing,
8:30
we are going to take the final circuit design and feed it to a programme that is basically going to go through testing all the possible inputs,
8:33
checking what the outputs are and taking that they are what we exactly wanted them to be originally before applying any of the optimisations.
8:42
But of course, if you take these chips with billions of transistors doing this systematically for all inputs, it's just unfeasible.
8:53
Then of course, we can turn it down, as you said, by saying, OK, this is too simple or it's simple enough that I won't be checking it.
9:02
Or these other parts in the chip is modularised.
9:10
I already checked it and I didn't change it since the last version, so I don't need to check it again.
9:13
So these are ways of simplifying the problem,
9:18
but something that people have been working on in order to reach even farther with testing is using formal techniques.
9:21
So India is to build some mathematical model that describes the the circuit so that then we can apply formal
9:31
mathematical reasoning techniques to symbolical checked that the circuit is doing what it's supposed to be doing.
9:45
And this is something that for small circuits, we could do pen and paper, but of course,
9:54
we people who work with such large design use automated software that tries to obstruct away the circuit into these mathematical models and then poof,
9:59
all sorts of properties on on these models to make sure that the circuit is doing what it was intended to do.
10:15
But of course, again, this is very different and get very large, so it's still a very big challenge.
10:25
So just so you get an example of from industry, the interlocker Estevan execution model was fully verified using formal techniques,
10:32
which was a big technological advancement because it meant that it was for sure going
10:45
to implement whatever the designers meant it to implement before buying optimisations.
10:51
Now, of course, if what you originally design is incorrect, this is still going to be incorrect,
10:57
but at least you are removing any possible error that you could introduce while applying optimisations, not just one design.
11:02
So now it's going to be your turn with the second word of this introduction to computer systems,
11:13
what you are going to do is something very similar to the example that we just
11:20
so you are going to have a design exercise that is tailored to each one of you.
11:27
You will see in case there's a set of files, one of them is going to contain your.
11:33
Username, and for that,
11:40
you get you will get a unique number that is going to there is basically a definition of which circuit you have to implement and
11:42
then you will see the instructions on how to use some very simple logic circuit simulator to check that your design is correct.
11:49
Of course, like the previous COACHWORK candidates are going to go on with this,
12:01
we reached the end of the lecture and I hope to see you on the next one by.
12:09