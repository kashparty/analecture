ID: 0fc9db3c-738a-47b1-a3e2-ae2d01490235
Title: 5.4 Binary search
Category: COMP40008 - Graphs and Algorithms (Spring 2021-2022)
Lecturer: Iain Phillips
Date: 14/02/2021
Let's now change our problem. And let's now search and ordered list.
0:01
Well, obviously, since this is a sub problem of the original problem, linear search will solve this problem.
0:08
But we can do better. So an obvious improvement we could make.
0:14
Two linear search would be to say, well, that's in spec from the left L's area, well, one, etc. as before,
0:19
but as if we find X, then we stop there, or the taking advantage of the fact that the list is ordered.
0:26
If we discover that the element we're looking at in the list is bigger than X,
0:34
then we can solve at that point and say not found because we can conclude that X is not in the list.
0:38
Well, the worst case is still N as before, and i.e. in the case that X is not in the list.
0:45
We would expect that the average case performance has improved because we were able to stop early and the way that we weren't before.
0:55
But for a radically better algorithm, we turn to binary search and rather than giving the code for binary search,
1:05
which is in the lecture notes as a recursive algorithm, I will introduce it by a decision tree.
1:16
Because these decision trees are going to be very important to our analysis of binary search.
1:24
So this is the decision tree for N equals eight.
1:32
In other words, lists of size eight. So we need a different decision tree for each of us.
1:36
Different size of lists. So this is the binary search algorithm for any equals eight.
1:41
And it will work on any list of lenth eight, which are.
1:47
And obviously the index is run from zero to seven. So what does the decision tree tell us?
1:52
It says you start at the top. The root of the tree. And what it tells you to do is to compare X with the element in position three.
2:00
And there are three possibilities, one is that X is actually there.
2:10
And in that case, we just stop at that point, which is not explicitly noted on the decision tree.
2:15
But obviously, there's no point in going further if you find the element there.
2:21
But then if it if X is not in position three, then there are two other possibilities.
2:26
One is that X is below position three. And the other is that X is above position three and or greater then.
2:31
And so obviously what we then do is having gone in a middle of the list like this or roughly in the metal position three,
2:41
then we can now if X is less than L three, we can restrict our attention to the left hand portion of the list.
2:51
And if X is bigger than Elstree, we can restrict our attention to the right hand half of the list.
2:59
So we have actually halved the size of the list just by doing a single comparison.
3:06
This is the power of binary search. Let's have an example. And let's have our list of lenth eight.
3:11
And then we just had some. Let's do a list of integers, no evil, two more.
3:25
The. Thirteen days, seventeen.
3:36
Twenty one. OK. And these will these they all write down the index positions as well.
3:41
Just eat track. So if we want to apply binary search to this list of lenth eight, then the first element we look at is the one in the third position.
3:50
Oh, I should say what X is. So let's say that X is going to be 16.
4:00
So, OK, so we look and see where the 16 occurs in that position on the list.
4:07
Well, it doesn't. But it is below 16. And so that means that we can now restrict ourselves to these four elements in the right hand half of the list.
4:14
And now we'll turn to our decision tree to see what we should look at next. Because X is bigger than all three.
4:24
We should look at the five position here. So we should look at 13.
4:29
And 13 is still below 16.
4:35
So that means that we can restrict ourselves to all those elements which are to the right of here, which we're down to two elements now.
4:38
So we've gone from eight down to four elements and now down to two elements.
4:46
Follow our algorithm. The next position we should look at is the six positions.
4:51
So we should look at her El six, which is 17.
4:55
Well, so we've gone too far. So what that tells us is that and we can see that X is below El six.
5:00
So that means that X is falling into the gap here between these two elements.
5:07
And at that point, we'll return to fail in the algorithm.
5:13
We could also, in a more refined version, say exactly where X would be if we if, you know, it is between positions five and six on the list.
5:17
We have that information. OK. So how many comparisons did we do?
5:27
Well, pretty obviously three in this case. But we can work that out.
5:33
We can see the three, the five and the six. And then we got to the fail. So we did three comparisons and.
5:38
Well, but the so pretty obviously the decision tree expresses the algorithm for us.
5:46
But the nice thing about this decision tree is that we can see exactly how long this is going to take in the worst case on inputs of size eight.
5:54
And the worst case is just looking for the deepest the depth of the tree, basically.
6:06
And the tree is of depth for here, including the fail nodes.
6:13
But you can see that the longest path from the root is it takes us for comparison.
6:17
So the worst case is of over here on the right for comparison.
6:22
So W eight equals four. And there are a number of ways that you could get the worst case.
6:26
For instance, it could be that if we were looking for twenty one in this, less than that will give us the worst case.
6:32
But notice also that these two fail possibilities are also the worst case.
6:39
That means any number between 18 and 20 would be a worst case and a number beyond greater than 21.
6:43
So in fact, all numbers above 18 would be a worst case in this particular example.
6:51
Right. Well, I say this is a big improvement on the modified linear search.
6:58
And we can see that it's very nice the way that we keep on halving the size of the list each time.
7:04
And the decision tree also express. It tells us why this is such a good algorithm,
7:12
because what you can see is that to keep the worst case down, we need to keep the depth of the tree low.
7:21
But we need to have eight nodes on the tree because there are eight possibilities for where X could occur in the list.
7:27
So if we want to get eight nodes onto the tree,
7:35
then binary search does a good job of keeping the tree depth low key and keeping those eight nodes in the tree.
7:38
Let's contrast this with modified linear search. Well, I didn't draw the decision tree for it before because it wasn't that interesting.
7:45
But let's just do it just to contrast with the binary search.
7:52
So here we have a modified linear search expresses decision tree.
7:58
And you start off at the zero position. And if X is below that, you fail.
8:03
Otherwise, you go onto the next one, etc, etc. And if you get through the whole lot, then you fail.
8:09
At the end and you can see again, just looking at the depths of the tree that W four equals four.
8:18
I didn't draw it for N equals eight. But of course W eight equals eight.
8:25
And the decision tree, as you can see again in this example, expresses the algorithm.
8:30
We can also see why modified linear search is a bad algorithm because we get a long straggly tree to get a node.
8:36
We need depth eight and modify linear search. So it's not doing a good job of keeping the depth low.
8:44
K. So a bit of notation.
8:52
The floor of a real number X is the greatest integer, such that N is less than or equal to X.
8:58
And we write it with these ears below the X, surrounding the X, the these brackets.
9:07
And for instance,
9:15
the floor of twenty three point one eight will be twenty three and the floor of Pi will be three because PI is three point one four one five nine,
9:17
etc. And the ceiling of a real number is dualeh, the least number in integer number, such that N is greater equal to X.
9:26
And again, the notation is these brackets around.
9:38
And for instance, the ceiling of zero point zero zero one would be what?
9:43
So I need that notation to give the worst case performance of binary search.
9:49
So let's have a look at that. Well, a binary search is a recursive algorithm.
9:55
And so it's not so straightforward to write down the worst case performance.
10:04
It's not like just sort of counting the number of times we go round a for loop.
10:09
But what we can do is write down our so-called recurrence relation for the worst case behaviour, and then we can solve that recurrence relation.
10:14
So that's what we're going to do. So first of all, what can we say in the case that the list just has one element?
10:24
Well, pretty obviously the worst case is going to be one. We have to look at that element and see whether it is the X we're searching for.
10:30
What happens if for a General N. Well, then what we know is that binary search will take us in in the middle of the list and then we'll be left,
10:39
roughly speaking, with one half of the list to search beyond that.
10:51
So in the general case, n we we we we do our first search and this reg position roughly in the middle of the list,
10:56
and that's the one there because we have done one sorry, one comparison in the middle of the list.
11:05
And then we have to search either the left hand portion or the right hand portion, which is roughly half as long.
11:11
But because we've got our floor notation now, we can be more exact.
11:20
So in the case we have the case where N is even the first search we did was in this position here.
11:24
Well, pretty obviously the longer part of the list that will be left will be the right hand half here and that will be of length and over two.
11:36
Okay. But the floor of an over two is actually an over two, if any is even.
11:44
What happens if N is odd then in the case that we have the.
11:53
A very good deal. Let's do it again. OK.
12:08
So this now is a list that's where in his old and.
12:24
Now we come in in the middle of the list and we're indexed from zero to N minus one.
12:33
And then plainly this is the size of this portion here is going to be N minus one over two.
12:41
And this portion here will be N minus one over two. And then and then we've got the one in the middle, obviously.
12:50
But the floor of N minus one over to.
12:59
This is if n is odd. That is actually equal to the floor of an over to.
13:04
So either way, the worst case is going to be the worst, the length of the worst case in is going to be floor of an over two.
13:13
So that gives us our recurrence relation here and now.
13:26
How can we solve that? Well, the way I recommend is what I call repeated expansion.
13:30
So let's start with a general N. What is W of N?
13:39
We want to solve for that. Well, we know it's one plus W floor of N over two.
13:44
So we can write that down just by the recurrence relation. Now we re expand this w4 of n over to.
13:50
Well that's going to be one plus. We want to take.
14:00
Divide this by two and take the floor, but then by a bit of arithmetic that just gives us the floor of an over four.
14:06
And we can keep on doing that. So we expand out W floor of an over four.
14:15
And that gives us one plus W a floor of an over eight.
14:21
And it might be good at this point to take stock and notice that we have divided by two, three times.
14:25
So we'll actually be better to write an over two cubed. To keep that.
14:31
Do you see the pattern? And we've we've added on one three times the same number.
14:35
So we're getting three plus W of floor of an over two cubed.
14:41
Well, that will keep on going until we eventually get down to a one.
14:47
So we're going to get some number of ones, Class W of one, which actually happens to be one according to our base case of our recurrence relation.
14:52
So the question is, how many ones are there? But let's just get a feel for this by looking at actually doing it in a couple of examples.
15:05
If you do W of eight, you get one plus one plus one plus W one.
15:12
And if you do W of nine, you get one plus W four.
15:18
If you do, the arithmetic equals one plus one plus W two equals one plus one plus one plus W one.
15:24
So we get three. So actually it comes out to be the same.
15:32
But what we see is that every in every case, the number of ones is the number of times that you can divide the original number N by two.
15:36
And obviously with it, with the remainder.
15:48
So it will be, in fact, be K, where due to the K is less than equal to N is less than two to the K plus one guy.
15:53
That's the number of times that you can divide N by two with the remainder.
16:01
But that is just the flaw of log N.
16:07
If you think about it, where we're taking logarithms debased to as usual in this course.
16:12
And so therefore we have solved our record inflation and we get the answer that W of N equals
16:18
one plus floor of log N and you could cheque this out against the debts of the trees.
16:24
And we can see, for instance, in the case of W eight, we know that the answer should be four.
16:32
And if we take a log of eight, we just get three.
16:38
And so it works out in that case. Now, you might argue this is a bit handwaving.
16:43
I did the repeated expansion and then I sort of came to the conclusion that K is the floor of Log N.
16:48
And so you might argue that it needs a bit of proof. And indeed, we could.
16:56
Now, having solved the thing by, I suppose you could argue, sort of educated guesswork,
17:00
we could actually cheque that all guesses correct by proving this correct by induction using r a recurrence relation has on the previous slide here.
17:08
So if we doubt that we're correct here,
17:19
then we can actually just prove by induction that we're correct with that we would need a course of values or strong induction to do that.
17:22