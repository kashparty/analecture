ID: 89f37e31-6566-483e-bbd2-ae2d0148fadd
Title: 9.1 Reduction
Category: COMP40008 - Graphs and Algorithms (Spring 2021-2022)
Lecturer: Iain Phillips
Date: 13/03/2021
So we've introduced to complexity classes p polynomial time and entropy, non-deterministic polynomial time.
0:03
And what we want to identify is problems which are intractable but lie in N.P.
0:11
And we're going to use ENPI completeness to do that.
0:20
So if we show that a problem such as Hamiltonian Path belongs to ENPI, that does not tell us whether it's tractable, i.e. in P or not.
0:23
So we want to identify the hard or high complexity problems in ENPI.
0:37
So we're gonna to start by saying what it means for one problem to be harder than another using the concept of reduction on problems.
0:42
Okay. So let's suppose that we've got two decision problems, D and D, Brian.
0:52
We'll say that D. Many one reduces or just reduces for short to D prime.
0:57
Which will write as a partial ordering d as less or equal to D prime.
1:04
If there is a P time computable function f which is the reduction function and which converts basically a a problem,
1:09
a D problem into a D prime problem. And then we have this nice property that D of X holds.
1:18
If an only F. D. Prime of F of X holds. In other words, when we take our original problem X, we converted by F of X into a D prime problem.
1:24
And then we ask whether it is a yes for D prime.
1:34
In which case we know it's a yes. The D or if it's a no for D prime.
1:39
Then the original problem is a no for D.
1:44
So another way to look about this is that we're reducing a question about D the easier problem to a question about D prime, the harder problem.
1:47
So we can think of this listener equals as an ordering on difficulty.
1:59
So D is easier than D prime or more precisely D is no harder than D prime.
2:03
So why the name many one. In our definition.
2:10
Well it's is partly to distinguish from other forms of reduction, which we're not going to talk about in these lectures.
2:15
But the reason for the name is that F here can be a many one function.
2:21
In other words. F can map several X's to the same value, several inputs to the same output.
2:26
So that is allowed in our definition. OK.
2:34
Well, so what can we do with this notion of ordering on problems via this reduction notion?
2:40
So let's suppose that we've got an algorithm, a prime, which decides our harder problem,
2:50
D prime in time, some polynomial P prime of N where N is the input size.
2:57
Then supposing that we've got this reduction between from D to D prime via reduction function F running in polynomial time PFM,
3:05
then we can convert a prime into an algorithm A which decides our original problem.
3:14
So the algorithm is very simple. We input X.
3:22
The thing we want to know whether it D holds for it or not, we compute F of X to convert it into a D.
3:26
Prime problem. And then we run the D prime algorithm, a prime on input F of X and then that simply returns an answer, yes or no.
3:32
And that will be the answer for our original algorithm. Perhaps a diagram would help.
3:43
So here we've got our original input coming in.
3:52
It's just. Changed to 100 percent. And we got original input coming in.
3:57
And we want to know whether that is.
4:05
We want to know basically yes or no to the question of whether these prime holds.
4:10
Yes, we want yes or no. So how do we do that?
4:15
Well, we do that by, first of all, reducing to.
4:19
Via. Well, we, first of all, use F to convert it into F of X, which is of the form D prime.
4:26
And then we can feed that into algorithm a prime.
4:32
And then that will produce an answer, yes or no. And so that is our algorithm, eh?
4:37
So this whole box here I can call a if you like, that is algorithm A, do F and then do a prime and notice that A runs in polynomial time.
4:45
Because what we're doing, we're doing a polynomial operation of converting X to F of X.
4:59
And then we're using what we have assumed is a polynomial time algorithm.
5:04
A prime. And then we're just composing together these two algorithms, all functions.
5:08
And so clearly, the the the result overall for a is polynomial.
5:15
So I've given a few more details here. So this step one takes pierde and steps this first step here.
5:20
Because we've assumed that F runs in time P then. And we know that the size of F of X is bounded by some polynomial in the input size.
5:28
And here is the size of X. And because we've got that general property of polynomial time algorithms that the output is always polynomial bounded.
5:40
And step two takes well, because we know that a prime runs in time p private then.
5:52
And so therefore it takes P prime of queue of N steps, which is polynomial.
5:59
And then you just add those two together. So.
6:04
OK. Well, what have we shown here? We've said that if you can decide the harder problem in polynomial time.
6:08
Deprived. Then you can solve the easier problem in polynomial time by using this method.
6:16
And we can sum that up in this proposition that says suppose a D reduces to D prime.
6:24
And D prime is in P, then D in P as well.
6:30
Another way of saying this is to say that P is downwards, closed under reduction.
6:34
If you're within P and you get easier. Then you're still in P.
6:41
Let's have a diagram to illustrate that as well. So it may be as P oldroyd like s sort of semicircle like that.
6:45
So what we've saying is that if we have D prime in P and if we have D reduces to D prime, then this easier problem D is also in P.
6:54
So P is down was close. Which is why I draw it with this semicircle like that to show that if you go down was within P then you stay within K.
7:06
OK. Well, what does what can we say about ENPI and reduction?
7:20
So. We'd like to prove the same thing that we just prove for P.
7:27
But for ENPI, in other words, it ENPI is down was closed under reduction.
7:33
Suppose the deal reduces to debride. D Prime is in ENPI then D is an MP as well.
7:38
And the proof is not difficult, though it is a bit more complicated because the definition of ENPI is is a bit harder than the definition of P.
7:45
So we assume that D reduces to D prime D Prime is an MP.
7:54
What can what does that tell us? Well, we know that because D Prime is an MP.
7:59
There must be this pull the name any balanced for the name redecide of relation.
8:05
E prime. And and there must be some polynomial P prime such that DS prime of X if and only if there exists y.
8:09
E prime. X, y. This is the definition of. And the pollen only balance part says that.
8:20
The second argument y. Here, any prime is polla, namely bounded in the first argument by this polynomial on.
8:27
What's the other part that we've assumed. We've assume that D reduces to D primes. So that gives us this by definition of reduction D of X.
8:36
If and only if D prime with F of X. Well then we can just combine these two formulas here and we see that D of X.
8:43
If and only if D prime of F of X. If and only if there exists a y.
8:53
E prime. F of x. Y. OK, well.
8:58
So now we've actually got D here which we want to show in ENPI is looking quite.
9:03
In the form that we want says there exists a Y. And then some func, some predicate here Saria some predicate of X and Y.
9:09
If you look at that you've got two arguments here, X and Y. So let's define E of X and Y to be this more complicated thing.
9:18
E prime of F of X y. And so we clearly see that of if and only if there is this Y, E, X, Y.
9:27
So that's the heart of the matter. We can now see that this is why D is in ENPI as well.
9:36
But we still have to do the cheques. We have to cheque that he is in P.
9:45
But that follows fairly easily by a similar argument to on the previous slide when we were just composing polynomial time algorithms together.
9:49
So the result is still polynomial. Well, we also have to show that it's by the name any balance.
9:59
So in other words, we have to show that the second dog wrenches pull the name balanced in the first argument.
10:05
So we can do that cheque as well. Suppose E, X, Y, then by definition, E prime F of X, Y, and because E prime is polynomial balance.
10:12
We know that size of Y is polynomial bounded in the size of F of X.
10:22
The first argument in this E brime predicate. But F of X as before is polynomial bounded in the size of X in words N.
10:29
And so then we can just combine these two here and we see that size of why is bounded by this polynomial in the size of X.
10:39
And so we're finished verifying that he is in and pee and we have the result we wanted, which is that ENPI is also downwards, closed under reduction.
10:51
Okay. Well, I said that we were going to use a partial order notation less than our equals for the reduction order.
11:06
And so we would like you to have the properties of a partial order.
11:15
And indeed, we can cheque that or at least not a structure, sorry, I should say, not as a partial order, but a pre order.
11:21
So wait. We have that it's reflexive d less equal to D for any D and transitive, which is just this property here.
11:31
And I'll leave those proofs as an easy exercise for you to do.
11:39
What though if D reduces to D prime and D prime reduces to D.
11:44
Well if this really was a partial order then we would deduce by a. symmetry that D equals D prime.
11:50
But that won't necessarily be true. But we.
11:57
So they there will be different problems, but they can be of the same level of difficulty because each reduces to the other.
12:00
They each as hard as each other. And we'll write a D twiddle D prime.
12:07
In that case. So this is a pre order, but not a partial order.
12:13