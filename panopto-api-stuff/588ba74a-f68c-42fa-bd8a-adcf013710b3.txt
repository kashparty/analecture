ID: 588ba74a-f68c-42fa-bd8a-adcf013710b3
Title: L08 - Introduction to sequential circuits and flip flops (part 2)
Category: COMP40001 - Introduction to Computer Systems (Autumn 2021-2022)
Lecturer: Lluis Vilanova
Date: 28/10/2021
All right. Hello and welcome to the second part of our of our eight lecture introduction to computer systems.
0:08
So remember that we just looked at this type flipflop. Well, we started with the errors flipflop.
0:14
Then we looked how to evolve it into a detailed flipflop. There is more useful because it has a single input and then a large input signal.
0:20
But we still had some time related problems because that was an asynchronous circuit.
0:29
So what we were going to be looking at now is how to make this Cinquera so that we have a
0:35
very well point in time that defines when we are going to be storing that the input value.
0:40
So for this, we are we have the concept of H triggering.
0:48
So this means that if we have the large signal that we have that we already saw that keep switching between ones and zeros.
0:54
An edge here would be whenever we change the value of a signal,
1:06
it would be either an upward call or rising its or downward or falling falling edge in these other cases.
1:12
So what we want is to store the input value when only one of these things happen, either when the this,
1:23
uh, clock signal that we're going to call it this light goes from zero to one or from one to zero.
1:32
And this is a very small, very precise point in time.
1:40
That is the only one we want to use to store this one bit memory value.
1:44
So this, again, is what we call edge triggering and what we can do to build an edge triggered
1:52
the type flipflop is combining two of the type flipflops that we already knew.
1:59
So this would be this is what is what we can call a primary and secondary flipflops.
2:05
So this would be the primary. And this will be the.
2:12
Secondary. You will see that in some literature.
2:18
It's also described as a master slave flipflop.
2:23
So, again, the whole purpose here is to have it triggered by the edge of, uh, light signal,
2:28
which in this case we will call a clock because it will change from one to zero repeatedly.
2:36
So this is kind of a, uh, a time marking clock signal, as we will see.
2:45
And we are taking this to the flip flops of primary and secondary into here, connecting the output of the primary into the input of the secondary.
2:51
And then the latches of these two flipflops are basically going to be the negation or
3:01
the regular signal for the primary and the negated clock signal for the secondary.
3:09
Now, this is going to give us an edge triggered flipflop.
3:14
Primary, secondary, if we want instead to have a rising edge, which we will see later,
3:23
we would put this not date or so to summarise, we have that in between, then we basically connect one flipflop to the other.
3:29
And then we have these Abakua over here, which is what we care about, and then the plot.
3:41
So let's see an example of how this would work over time.
3:47
Here we have again the input signals clock and over time in groups of bits with different colours so that it's easier to look at it.
3:51
So here with the clock, there is zero, then goes back up to one and then back to zero.
4:03
And here we would have the opposite because there's not data. We would cover the signal there is one zero and then back up to one.
4:11
So let's start by looking at the primary flipflop, which is this one over here.
4:20
Now, for as long as the light value is zero, which in this case is the light for the primary,
4:27
flipflop is the same as the clock for as long as it's zero. We will ignore.
4:35
The input valued, so we are going to maintain whatever was the previous value, which let's assume it was a zero.
4:42
Now, as soon as the clock goes up to one, we are going to take the value of empathy and equity.
4:52
We are going to be sensing it on the flip flop and putting it on the output.
5:03
So one zero one is going to be moved right out into the output of this primary flipflop as one zero one.
5:08
And then remember, as we already saw, as soon as this primary, uh, as soon as the light signal of the primary flipflop goes back to zero,
5:17
we will latch onto whatever was the last input, which is this one over here that we had.
5:27
So this one zero over here is going to ignore. And we are just going to keep our eye on whatever we had previously, which is this one over here.
5:33
Yeah, OK, so here we have the first half of the circuit.
5:46
And now that we, let's say, solved, what is the value over time of this first half?
5:50
Now let's look at the secondary flipflop.
5:56
And for this, we need to now look at the light signal of this secondary flipflop, which is the negation of the clock signal.
5:59
So remember, we started one, then go to zero and then back to one.
6:09
So it's exactly the same as we did before.
6:14
Whenever the light is one, we are going to echo or said as output, whatever we had as input.
6:19
So in this case, let me delete all of this.
6:27
In this case, we have zero as input during this period, first period of time.
6:30
So we are going to keep zeros here. Then as soon as the lights signal, so we had these ones here, then as soon as the lights goes back to zero.
6:36
Then we are going to simply ignore what's on the input of these secondary lines and we are going to keep whatever we have here as the previous output.
6:49
So we are going to keep this as zero because it's what we had on the last point in time where this was one over here.
7:00
So we would maintain whatever was in this point in time, which turned out to be this value here.
7:09
As in Utah, we are going to give this zero here during this whole period of time,
7:16
then as soon as the lights on, the secondary flip flop goes back to one, we are going to.
7:22
Take what was in this. Point in here, which is one that we already latched onto before, so we are going to keep this once.
7:30
Over here. So as as you can see, we are basically taking, uh, if we remove it all.
7:47
By doing this, it's triggered a primary secondary.
7:57
Did that flip flop, we are using a falling edge, which is this one here, this point in time here.
8:06
So we are going to send as output of the whole here, get whatever value we had exactly here,
8:15
which is when the the edge of the clock fell from one to zero.
8:22
And this is exactly. The only value that we are going to have, so as you can see,
8:28
this gives us a very precise point in time where where we store this memory value so we know exactly when and
8:34
what value of the is going to be stored in memory because we are synchronising it with this clock signal.
8:44
And we do this by internally using this combination of to detect flipflops, to build primary secondary trigger, to detect flipflop.
8:52
OK, so now that we have this, we can look at how to build the actual circuit and this would be the circuit that implements what we just saw.
9:04
We are basically taking that to address flipflops.
9:15
And adding some additional gates to do exactly.
9:21
What we needed for the entire flipflop plus.
9:27
This would be done, did I flip flops plus the Newdegate that, uh, put them together and fits the output of one to the input of the next one?
9:32
So this is the circuit that we would have internally and and now what we can look at is exactly why we call this clock.
9:46
And this is because they are normally these signals that we use here as an input gold clock,
9:57
as is normally used to synchronise a sequence of vibrations that are going to be occurring at regular intervals.
10:06
So what we will see later as we build more complex circuits on the next lecture is how we can
10:14
use this clock signal to tell us the time when exactly when we want to store memory sorry,
10:21
signal into this one bit memory so that we can perform operations with other combinatorial circuits that don't have any notion of state.
10:29
They will just take whatever it's in this one one bit or morbid memory as they would do whatever they need to do for some period of time.
10:39
That would be between following Edgers.
10:51
So this would be what is called one cycle. And here's where we would be operating.
10:55
With this sirkin's.
11:05
So this is why it's called clock, and this is what you see whenever you see a computer that says, oh, it works, these many gigahertz or whatnot.
11:08
This is it's the frequency of this one signal.
11:18
And the reason why this frequency cannot be infinitely high is because, of course, the physics of how fast we can switch this signal.
11:23
But in fact, there's other limitations that make us drive this frequency of the clock even lower,
11:35
because remember, as we build a combination of circuits, gates, delays,
11:41
so whatever computational circuit we have between two flip flops,
11:47
this is going to define how much time we need to have as the signal propagate across the circuit.
11:52
So to have the actual output that we want, so we are going to design the whole computer so that the clock frequency is.
12:00
As large as the delay of these combinatorial circuits that we have between flipflops,
12:13
often it's going to be slightly larger just to have some kind of safety margin.
12:19
So, in fact, if we think about it, we can see these flip flops as state machines that have two states, CU,
12:26
which is the very we are studying, can either be zero or one, which is the one we are storing in memory.
12:35
And the state can only change when the the edge of the clock is falling.
12:44
So as we saw already, whenever we have something that changes over time, one way that we can think about it is using state machines.
12:51
So in this case, we would have this this is the symbol for these H3 or the type of flipflop that we just saw.
13:00
So we have that, including the synchronising clock and then the output cue, and we don't write it usually, but this would be not cool.
13:09
That's why it's usually not written. And then we could represent the state of this flipflop using this state machine or state diagram over here, here.
13:22
This would be the state of CU, either zero or one.
13:33
And then here would we would have the input values of the clock.
13:37
So whenever the. Sorry of the input.
13:45
So whenever the is one we will stay in in state one, whenever the is zero, we would stay in state and state zero.
13:50
And then the same as we are in states and we have an input.
13:59
The other one, we will transition to state one.
14:03
And if input is zero, we will transition from one to zero zero zero.
14:07
And remember, since this is a has this input signal here that tells us with it triggers when we change state,
14:14
these transitions here will only happen according to the clock signal.
14:26
So whatever is the value of the. And I'll take these falling edges of the clock.
14:32
We will not perform any transition. This is the way having this Second Circuit is so beneficial, because we have, as I said before,
14:40
a very precise point in time where we transition the state of the art of the circuit.
14:49
Now, of course, we can build other types of flipflops that are here, some that are commonly used.
14:55
There is one of them is the type flipflop. It's called T4 toggle.
15:03
So whenever is zero, we will maintain whatever state that we have.
15:09
So this would be to over here, zero we maintain.
15:16
And then if there is one, we will basically toggle the state of the flipflop.
15:20
If we were in state one, we will go to zero. And if we were in state zero, we will go to one.
15:26
And here we have another a bit more complex flipflop, which is the Jaquie flipflop.
15:32
And this is a neat flipflop that basically combines the features of other flipflops that we've seen so far.
15:39
So whenever it's similar to the IRS and toggle together, so whenever we are in zero one as the Jaquet input,
15:52
we will go to state zero no matter what previous state we wearing.
16:05
Whenever that deking input is one zero, we will move to state one no matter what state oring.
16:10
Then state Jake Zero will maintain whatever state we were in.
16:19
And whenever Jaquet is one one, we will perform a talk of liberation,
16:27
so we will attain state to from one to zero zero to one, depending on what state we were at before.
16:31
So these are some also useful flipflops that are commonly used in circuits,
16:40
and what we can look now is remember that what we saw is the primary secondary and it's triggered did a flip flop with Tumbler or falling X,
16:47
and this would be the circuit for the equivalent rising at the type flipflop.
17:00
So if we look at input's, whenever a clock, uh, is zero and D is one,
17:09
we will maintain the value because remember, this is kind of a flip flop over here.
17:18
And whenever it has one one, it will maintain the previous value, which in this case it was unknown.
17:28
So we will maintain an overall unknown value. And then when the clock moves, has a rising edge from zero to one.
17:33
Sorry, first we have a case where the switches from we had here one, it switches back to zero.
17:44
We will still maintain this. It puts it puts us once.
17:52
So we will maintain that state because we didn't have our raising it yet.
17:56
But now as we raise the age of the clock from zero to one, then we will take that input, devalue and set it as the output cue.
18:02
And if the clock, uh, sorry, if the developer changes,
18:16
since we are no longer in the race against time has passed, we are not changing from zero to one.
18:22
The new values of the will be ignored. We will just maintain the one that we just stored or the rising rate, which was zero.
18:27
And now if the clock changes from one to zero, since this is a falling it,
18:37
this circuit will not change the output value that we saw, which was still the zero that we saw in the input in the writing at.
18:44
And once more, if we change the clock here, now that we have an input of one and we change the clock from zero to one,
18:55
then we would change the output accordingly.
19:05
To one, which is what we have now in these rising at.
19:11
And then once again, if the no changes after this raising it,
19:16
we would simply again ignore the input and maintain the output that we had stored in the writing it.
19:22
But so now finally, this is another bit more complex, but very useful.
19:31
It's triggered flipflop that has some two additional inputs.
19:38
It has preset input that basically will always had Kutta one, regardless of the value of the.
19:43
And then we will also have a clear input that will set Kutta zero regardless of the.
19:52
And this is useful because when, for example, when we put our machine,
19:57
we want to have some way in which in which we can set all the flipflops to a very well known state when the machine starts.
20:02
So that from then on, we will move this machine through all the expected states.
20:13
So for this, we have this type of flipflop so that we can restore the state.
20:20
It could be a C or you reform will have this type of flipflopped,
20:27
but also much more embedded microcontrollers will also have this so that because all of these
20:32
circuits need to have some initial state that is known to work from that point in time.
20:38
So with this, we reached the end of the lecture and on the following lecture you will see how we use all the knowledge that we acquired so far,
20:46
including using flipflops to build something that is going to be similar to objects that you interact with daily.
20:59
And in this example, you will see a very simple counter that uses memory to know which number it is coming from.
21:11
So with this, as I said, is the revision of the lecture.
21:20
I will see you on the next one like.
21:24