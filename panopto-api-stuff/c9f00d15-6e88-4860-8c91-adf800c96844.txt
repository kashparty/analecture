ID: c9f00d15-6e88-4860-8c91-adf800c96844
Title: idb-topic-24-recoverable-execution
Category: COMP40007 - Introduction to Databases (Autumn 2021-2022)
Lecturer: Peter McBrien
Date: 08/12/2021
In this topic, we look in more depth into the top topic of recoverability and different types of recoverable execution.
0:01
Sue, liability deals with making transactions isolated and consistent, but only viewing committed transactions.
0:12
Recoverability adds on the necessity to deal with transactions that might abort.
0:22
We've already defined of culpability to say that it means that there can be no transaction committing before another transaction from which is read.
0:28
And that can be simply implemented by saying that if you perform a dirty read from some other transaction,
0:38
you must wait to commit your transaction until that other transaction has committed a
0:46
transaction that avoids cascading boots or simply say no dirty deeds can be performed.
0:52
And that way, you do not need to cascade your reports into transaction.
0:58
I'll give some examples of that in the moment,
1:02
and strict histories will say that you can neither perform a dirty read nor a dirty right during the execution.
1:05
Essence, this escapes me a family of three different types of restriction where the strict execution is the most restrictive.
1:14
Avoiding cascading balls is less restrictive and the recoverable executions are the least restrictive.
1:23
So let's look at why we might want to use strict or avoiding cascading bolts that
1:30
despite the fact it will restrict options as far as concurrency is concerned.
1:35
Let's take a practical example of a non recoverable execution.
1:41
I've got one transaction moving money between two branches,
1:45
and we've got another transaction trying to sum the total cash figure across to all branches.
1:49
Let's suppose this time for some reason, each one is going to a bought half way through some employees versus the control C button
1:55
whilst the execution is being performed and the transaction is going to be aborted and undone.
2:03
Look, in that certainly following concurrent execution, we have transaction one performing its read and write to a branch 56,
2:10
reducing the total amount by 10000 pounds and transaction four going through and reading the value of being
2:21
changed by transaction one and the other value to the different branches reporting its result and committing.
2:28
And then we have the abort being performed of transaction one.
2:34
This is example of a non recoverable execution.
2:38
And even if I changed the A1 to C1, it still be a non recoverable execution because at the time of commitment of transaction.
2:43
So you cannot be certain that the result of the change to Branch 56, which you're depending upon, is going to be made permanent.
2:51
I can, of course, fix this to become a recoverable execution by making transaction for wait for transaction one to commit.
3:01
So the fact that a dirty read has been performed here on Branch 56 means that I, for Transaction four,
3:11
cannot commit it until transaction one has committed in this particular case because
3:19
transaction one oppose it then becomes necessary for me to also abort transaction form.
3:24
This is called a cascading abort. Now it will vary between applications about whether this is going to be much of a problem or not,
3:30
but in many complex database systems where you have many transactions running at the same time and
3:38
you have a lot of interaction between them in terms of the objects they are trying to update,
3:45
these cascading vaults can lead to rate inefficient execution because constantly you have one transaction aborting,
3:51
leading to many other transactions aborting and those other transactions lead to further transactions aborting.
3:59
And then you restart and then another transaction aborting records. Similar chain of cascading aborts to occur.
4:06
So many database systems, in fact, avoid cascading bolts by banning any dirty reads from occurring at all.
4:12
Strict executions are used useful for avoiding the problems you have with dirty rice, causing some problems with serialise ability.
4:24
And also, it makes the process of recoverability simpler.
4:34
If we look at the example I gave you before of a lack of Sudan's ability caused by two sets of right operations into leaving with each other.
4:38
The problem with performing a port of transaction five is you need to go back through
4:49
the history and for each object to determine what is the last right operation.
4:55
So in particular, going back in this case, trying to book transaction five.
5:01
I see that the right operation on account one one nine is from transaction.
5:04
Six is the last operation on that object, and therefore I do not need to undo the right operation on account.
5:09
One one nine performed by Transaction five because they six point zero value should be the value that is retained.
5:17
But by contrast, the last right that's performed on account one 01 was that the rate was five point five
5:25
and I'd need to undo that to restore the rate of 6.0 that was written by Transaction six.
5:32
So the recovery process when you allow dirty rice becomes a little bit more complicated and combined with the fact that you do have certain cases,
5:39
such as shown here,
5:48
where there's a lack of Sudan's ability when you allow dirty rice means that many database systems will also ban dirty rats from occurring,
5:50
as well as dirty reeds to end up with a strict execution. Let's go through and try and identify in some quiz questions about the type of
5:58
accountability or lack of accountability we have in some concurrent executions.
6:09
So in this case, the most popular answer was D, that it's strict and indeed it is the case when you are looking at these histories.
6:17
You need to, in effect,
6:27
ignore where certain transactions are not interacting on objects in particular in this history is only B34 that is being accessed by both H1 and H2.
6:29
And then looking at those objects,
6:45
we noticed that both of the histories are reading the object and then they both rights are clearly these two reads cannot be classed as dirty reads.
6:46
There's no value that's been written to not committed to that.
6:56
They can be reading. And so that makes this history at least avoiding cascading support.
7:00
And then if you look at the right operation, well, the right performed by transaction one is then committed,
7:07
which means this second right to be 34 performed by transaction to is not a dirty rat operation.
7:13
It's a normal right operation. And so we have an example here of a strict execution.
7:19
Now, looking at a different concurrent history that's trying to identify the type of recoverability we have.
7:30
So here the most popular answer is be that it's recoverable but not avoiding cascading bolts or strict.
7:42
And indeed, that is the correct answer. So notice here the interaction between the two transactions is that transaction one is reading branch 34,
7:48
which transaction two has written to and transaction two at the time of that rate has not yet committed.
8:00
So that is a dirty read,
8:06
and that immediately means you can rule out the spinning an example of avoiding cascading bolts and therefore for without it being a strict execution.
8:08
However, at the time of commitment, when I commit transaction one, that's but to perform this dirty read,
8:18
the object, which it read, has been previously committed by the C2 and then this.
8:24
Therefore, this is an example of recoverable execution, not a non recoverable execution.
8:29
Now, a third case. The most popular answer here is a that it is a non-negotiable execution, and indeed it is very similar to the previous one.
8:38
I've got a dirty read being performed by transaction,
8:53
one of a number committed right by Transaction two and transaction one, then commence before transaction two.
8:56
So irrespective of whether this later commitment or object of transaction two occurs as soon as
9:05
I commit the dirty read without the right operational transaction to be committed at that time,
9:12
I have a none recoverable execution. And the last case to consider.
9:20
Well, most popular answer here is avoids cascading bolts.
9:37
If we look at the two lead operations on B34, they both occur before the riots and therefore they cannot be dirty rates and
9:43
therefore have an execution here that must be at least avoids cascading of.
9:50
But it's not a strict execution because notice here that the right by transaction
9:56
two to be 35 34 occurs whilst the transaction one has not yet committed.
10:02
And therefore that is an example of the dirty right. And so this is not a strict execution, but is a avoids cascading bolts execution.
10:09
I actually have enough information now to do the worksheet on recoverability.
10:20