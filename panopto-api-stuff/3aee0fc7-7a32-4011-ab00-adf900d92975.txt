ID: 3aee0fc7-7a32-4011-ab00-adf900d92975
Title: Advanced Programming - type-level programming
Category: Haskell
Lecturer: Anthony Field
Date: 09/12/2021
OK, so you're stronger. Thank you. It's now.
0:06
That's too big. Yeah. OK, so had one.
0:17
We didn't have a session last week, so we'll be continuing from two weeks ago, if you remember as great if you don't.
0:26
Let's do a quick recap what we did. So a couple of weeks ago,
0:34
we were looking at how to define certain data structures in high school that have strong static guarantees about some some of their structure,
0:38
some of their runtime content. And what I mean by this is first, we saw how to define lists whose length was statically known.
0:54
So I actually got rid of that definition. So let me just redefine it.
1:04
So to recap what's going on? The first step we did was define natural numbers in this inductive way by inductive.
1:08
I mean, you know, we have a base case zero and we have an inductive definition successor.
1:17
So all natural numbers can be thought of as either zero or the successor of another natural number.
1:25
It turns out that this definition generates all the natural numbers. This is an inductive definition national numbers.
1:30
And then we had a data structure, which I called list at the time,
1:36
but we already have another list for back to back, which is a kind of a standard name for this data structure.
1:39
So, so vectors are statically length index lists.
1:46
And so what that means is we take an argument that represents the length of the length
1:51
of the list and some type that represents the type of the elements of the list.
1:57
So we have two constructors, one our code female for the empty vector and that has state vector zero.
2:02
And we should remember and we use this tick symbol to represent that we're using a constructor at the type level.
2:09
So the zero constructor is a it constructs a term of type, not normally,
2:18
but when you put a tick, actually constructs a type of kind that certain as if you remember,
2:24
we had this lifted or promoted data type extension and GHC, which can be turned on by writing language data kind of the top of the source file.
2:29
So that's the empty list. And of course, we have to put as well because the empty list, in addition to having zero,
2:42
it also we also know that the that contains elements of eight for some arbitrary because until Mr. Polymorphic and then we had the the cause,
2:49
which I'll just call the icons for now takes an element.
2:59
A takes a vector of length and of type A and returns a vector of lengths and plus one of type.
3:04
OK, so this is this is the definition we had last week and we can and I showed the seabed function for these vectors so that look like,
3:14
well, you know, let's let's go if he heads back to head.
3:27
So you take a vector of length, at least at least one.
3:34
So remember that the successor of some arbitrary natural number and is it has to be at least one because the arbitrary natural number,
3:40
the smallest that can be zero, so zero plus one is one.
3:47
So this this this vector has length at least one, and we can look up the head of that list and this is a safe operation.
3:51
Oh, it's the question, what's the tick for? The tick means that we.
4:01
So this is you say, if you look at you, look at what we were writing here is this type signature,
4:10
I'm right, Typekit type signature, but this is actually a definition of a data type here.
4:15
They're not data type. And so we were talking about this two weeks ago is that in order, JSI allows you to use data type constructors in your types.
4:20
So this is one level up, so to speak, but in order to.
4:33
But in order to to use it as a as a as a type, you have to put the takes so or you don't have to reduce,
4:40
you can figure it out sometimes, but there are cases of ambiguity, like with the list constructor.
4:44
So. So we're saying that it's best to always put the take to say, OK, this is a constructor that I intend to use it.
4:50
The type of all the original comes from the term term level. So there's the question about are all promoter types like this inhabited?
4:59
Three uninhabited. Yes, they are. Which means there is actually no runtime value of type, so it is nothing you can write that would have typed zero.
5:09
You know, this is not a this is not a type that has a runtime inhabitant.
5:22
So the only reason these things exist in the title of all is so that we can use them as.
5:29
It used to as information about the types themselves, but they don't actually correspond to runtime values,
5:38
so that's kind of a it's a bit of a shift of perception, if you will,
5:43
because you know, we used to think about types of things that classify a value, you know,
5:49
end classifies values that are integers five, six, seven, etcetera bool true and false.
5:56
And all these types have runtime inhabitants. The type zero doesn't have a runtime inhabitant itself,
6:03
but it's very useful because you can index this vector type with the type zero, which together will do the vector of length.
6:09
Zero represents the the empty list. So this is like a, you know, a more precise, more precise type.
6:20
So on its own, zero is useless.
6:27
But when you combine it with something that something like the vector type, which is indexed by an actual number, then you can.
6:30
You can have more, if you can. You can say more about your runtime values and similarly,
6:39
the SE constructed the successor constructor on its own doesn't have any runtime values, but when you say, Oh,
6:44
this factor is of length, success event for some,
6:49
and then suddenly you're talking about vectors whose length is at least at least one, so in other words, not empty vectors.
6:54
So that's the meaning of this, as is kind of I just wonder if people want to practise at home if they're not quite get I
7:02
if you could ask HCI what the kind of say this is and what the kind of tick the empty is,
7:08
just so you can get a feel for it.
7:15
Yeah. So just the normal. You know, before we're doing that, we're doing type of a person who can ask the type, see what the type of Z is,
7:19
and it will readily tell you that the type of Z is not because obviously Z is a constructor for a natural number,
7:27
so its type is a z like this is about, you know, when we're doing type level programming terms have types.
7:33
Types have kinds. So when we're talking about the types Z, we can ask know what its type is, but what its kind is.
7:46
And I'll put the tick here to say that, OK, I'm actually interested in the Type Z, and it's OK.
7:55
Well, it complains because JCI also needs the data kinds extensions.
8:04
So this is how you turn on the extension in GSI.
8:09
It's a little different from how the source files works, but once you've done that now we can ask what the kind of Z is and the kind of Z is also not.
8:12
There is a bit of a symmetry here. Because there is now an overloaded name.
8:22
It's both a term and it's both the type, and when we think of it as a term, its type is not.
8:27
When we think about it as a type, its kind is not. So these two.
8:35
They have the same name, but in the second case, it's shifted one level up.
8:39
And we can also ask all the time you said, Yeah, it's try.
8:43
You try. What's the kind of the empty list and what's the kind of the tick, the emptiness?
8:47
I also just reinforce, yes, the question is yes, it is a question we'll do.
8:51
You won't be my term, my term, I mean a value just like, you know, value five that you can bring to the screen or or any any runtime value.
8:56
Yeah. So kind of sad is also not because in this case, they're the same, however.
9:08
Why? Why do we need to take? Well, we need to take because we also had from two weeks ago, we also had.
9:15
Type level lists, and so, you know, the type of the type of the empty list as a as a as a as a value, it's it's a list of A's.
9:23
You know, this is the normal, this is the empty list constructor to single the note.
9:38
You know, the no constructor was the kind of that.
9:42
Now the kind of that is is a little bit more fancy because it's actually the Typekit structure that takes a type to become a type.
9:47
But I'm not going to go too much into detail about what that means, because that's a whole other topic.
9:54
But the the point I'm trying to make is that the type level equivalent of the emptiness constructor is is is the take empty list empty?
9:59
The tick always just talks about the type of all equivalent of of the same value.
10:11
And so indeed, this is now the kind of the empty list constructor is now a type of a list of websites.
10:18
OK. So with that out of the way, we can write the safe heads function, which we did two weeks ago.
10:30
And so the nice thing here is that because from the type we know that this the vector has at length at least one.
10:37
And if you look at these two constructed the nail on the columns constructor,
10:45
actually only the Cones Constructor ends in a vector that has legs that is that has whose
10:48
length is a successor of something the no constructor constructs of actual and zero,
10:55
which means that here when we're ready to see a head function, we don't actually need to pattern much on the nail because it's it doesn't.
11:00
It's not a valid pattern for this type. So we only need to care about the Beacon's case we have because taxes.
11:07
And we just would try to return the head.
11:16
And in particular, this function now is entirely safe because it's not possible if I call this and if I try to call it on the empty list.
11:19
I get a type error, so I don't even get as far as running my programme.
11:31
It doesn't produce an exceptional runtime or enough figures because it doesn't even get to runtime.
11:36
It is a type error, which is great because when you turn your bugs into type errors,
11:41
it means that you don't have to write tests for them, you know, because everything that compiles is more safe by construction.
11:48
So let's do, you know, becomes the singleton list with the elements.
11:57
10 That's just that. So this is a quick recap of a couple of weeks ago, and then we moved on to an even more.
12:04
You know, fancy list type, which was the heterogeneous list.
12:16
So this time around, instead of the list being indexed by a natural number, it is now indexed by a list of types.
12:21
And the purpose of this was that and we wanted to have lists whose elements can be different.
12:27
In other words, a heterogeneous list because it, in the normal lists in high school are all homogeneous.
12:35
You can't put true holes and then hello.
12:41
You know, you get an error of saying it couldn't match type all the actual chart.
12:46
So all elements of a list. They will have to be the same normally.
12:50
So we built this heterogeneous misstated type, which which is indexed by a type of list of types.
12:57
That's an example is down here.
13:04
This is a very sophisticated this is a very complicated list, I should say.
13:09
So it took a source, an integer in the first element and then a Boolean in the second element and then a string.
13:13
All right. String theory looks a bit nicer.
13:21
Well, like the third one is a string and then the the last element is another list which has an integer, an integer and the string.
13:25
So very heterogeneous list. And the way that worked is we had this list general as I was abbreviated type,
13:34
which had a constructor nel representing the end to this once again and the constructor nil is
13:43
indexed with the type of the constructor it now is indexed by the top-level level empty list.
13:49
So this is meant to represent the heterogeneous list that is empty.
13:54
The types that it contains are also empty.
14:00
It has nothing in it, so the Typekit, this is also empty and you notice that in that type of way here, for example, if they had the type,
14:03
the elements in the type of a list are in one to one correspondence with the elements in the actual value level list.
14:15
So for each element that you have in your list, you will have an entry in this type level list.
14:23
And that's because we want to we want to keep track of the runtime elements of our list
14:29
because that's the only way we can make it safe to access an arbitrary element in this list,
14:37
right? Because, you know, JavaScript is showing this a couple of weeks ago, a JavaScript has heterogeneous lists,
14:43
but the way JavaScript does it is you just throw a bunch of things into his pocket and then you don't really know what you're getting out of it.
14:50
You just hope it's what you expected, but there's no information you have to do.
14:58
I don't know instance of checks or what have you to make sure that you're not treating the value,
15:04
the way and in a way that it wasn't meant to be treated.
15:10
But in this heterogeneous, statically typed list situation, you actually have you can store heterogeneous lists,
15:12
but you also have a static guarantee that you will never forget what the individual elements were.
15:21
So the example functions I.
15:27
So again, to ask a question. Yeah, go for it, sure.
15:32
So can I construct a data kind? I mean, is there can construct bulk like construction through something.
15:36
Uh, you mean like you constructed?
15:45
If you write it in the chart, I make more sense.
15:51
I mean, like a construct, something wasted of Oh oh, so you want it to construct something like food would have come true?
15:55
Yeah. Is that possible? Yes. No. So actually, there's another question to chat about are all prototypes in uninhabited?
16:06
And the answer to that was yes, which means that when you promote true to the to the type level, it has no inhabitants.
16:16
And what would it mean by an inhabitant? It's exactly what you were asking about is is there something it?
16:23
Can we construct something of this type? And yes, there's no we can't. It's purely like a phantom type that only exists at the top level.
16:30
There's no runtime witness of that type. We can we can turn.
16:38
We can still use these types in a meaningful way by using them as indices to these, you know, goods.
16:42
So, for example, you know, the type zero has no inhabitants,
16:52
but the type Vector Zero A has a very precise meaning that is distinguished from a vector that has, you know, a non-zero length.
16:54
So the Typekit fruit, we get to pick how we want to choose, how we're going to use this type information is my point.
17:03
So there is no direct an episode of zero, but we can utilise the notion of zero to to construct other other types with meaningful runtime values.
17:09
Right. So, so these are the two two types that we looked at last week and.
17:27
This week, I thought it might be interesting to see how you actually work with these Typekit because there
17:38
are certain things that are very easy to do for regular types and by what I mean by regular is,
17:46
you know, if I define a regular list, what would that look like?
17:53
It has a constructor for regular nail, a regular empty cycle or nail football or list.
18:03
This is just a regular plain old list and you have our columns that takes an element a and another regular list is right.
18:10
Oops. Okay. So this is the this is an ordinary way to construct a list, and you know, you can define a show instance for this, for example.
18:21
And what do you need for a regular list, to be sure?
18:31
Well, well, all you need is that the elements of the list are suitable right now, and that's great.
18:33
We have a no show, no constructors.
18:47
Let's say that that's just our nil.
18:51
And we say, show our columns A's or, you know, X X's is and then you go, OK, well, I need to show the first element of the list.
18:54
But luckily, we have this show a constraint so I can. This X has sti, so I can show that show a and not show.
19:06
It's okay. This is a con or columns constructor.
19:17
So I show the element eight and then I don't know if I could put in s show the tailored list and the tail of the this will we can show,
19:21
because that's just the instance we're defining right now. So this will do recursion on the elements of list.
19:34
So of course, I want to call this an X. So now, you know, can I show five points, ten columns, five Cartmill?
19:41
Then maybe you can fix up the spaces, but it looks like that.
19:52
So it's pretty easy to write these these functions. But how would you show a type level?
20:00
Sorry. How would you show a to?
20:07