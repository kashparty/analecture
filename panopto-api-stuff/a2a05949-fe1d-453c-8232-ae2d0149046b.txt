ID: a2a05949-fe1d-453c-8232-ae2d0149046b
Title: 4.1 Dijkstra's algorithm
Category: COMP40008 - Graphs and Algorithms (Spring 2021-2022)
Lecturer: Iain Phillips
Date: 06/02/2021
So now I want to talk about the shortest path problem in a weighted graph so we could imagine that we
0:01
have a network of cities joined by roads and we want to find the shortest route between two cities,
0:08
such as in this graph where we have the start node and the finish now and we'd like to know the shortest distance from the start to the finish line.
0:14
Well, the obvious route would be just along the top here, I think, and that would have LENTH 21.
0:23
But could we do better than that? And more importantly, can we find a systematic computer algorithm to solve this problem for us?
0:33
So let's define the single pair shortest path problem, given a way to graph tree and two designated nodes start and finish.
0:44
Find the shortest path from start to the finish in the graph.
0:53
So that's the problem we'd like to solve.
0:56
Contrast this with the all pairs shortest path problem, which says, given a weighted graph g find the shortest path between all pairs of nodes of G.
1:00
Now that problem can be solved nicely using an algorithm due to Floyd, which we'll discuss later in these lectures.
1:11
And that is indeed an excellent algorithm for finding all shortest paths between any pairs of nodes.
1:19
And it turns out that that runs in Bigo and Cubed Time.
1:24
But suppose that we only want to find the shortest distance from a single star.
1:29
No. To a single finish node. That's the journey we want to make.
1:33
And there seems to be no way to speed up Floyds algorithm.
1:38
But we can we'll see that there is an O n squared algorithm due to Dijkstra, which I'm going to discuss now.
1:41
And Dijkstra's algorithm is very closely related to Prem's minimum spanning tree algorithm.
1:50
So we're going to use much the same ideas. And indeed, Dykstra's and Prem's algorithms were devised around about the same time as Emporiums algorithm.
1:58
We're going to build up a spanning tree starting from the start node and we're going to classify nodes into the tree.
2:09
Nodes already included fringe nodes which are not in the tree yet, but there one away.
2:16
They're adjacent to a tree node and the unseen nodes, all the other nodes.
2:23
So far this is exactly the same as emporiums algorithm. So the new idea is that we have already computed the shortest path from the start.
2:28
No. To all the tree nodes. It is just the path given by the tree.
2:36
But as far as the fringe knows are concerned, we know the shortest path using the tree constructed so far,
2:42
but this path might be improved as the tree grows. So let's see this in action on our example graph.
2:49
So we start by adding the start node to our tree.
2:59
So that's the only tree node, this red node here. And then the orange nose are obviously two, three and four.
3:04
And the dotted red lines are the candidate arcs which join them to the start node.
3:12
So what we want to do is to select the shortest distance amongst all the fringe nodes.
3:21
And obviously three is the answer. So then three will join the tree because it's closest to the start node.
3:28
And so there is our tree. It's got two nodes in it.
3:35
And now we look and see what we can adjust in terms of the fringe.
3:41
So. Three is adjacent to four.
3:45
Four was already in the fringe, but four had a distance of eight.
3:50
And now we can see that going via three gives us three plus four.
3:55
So that gives us a better distance to four. So we'll adjust the candidate off for four to be this one along the bottom and remove that candidate.
4:00
OK, now two is not adjacent to three. So nothing changes for two.
4:09
Now we have to decide which node goes in next. And Blayney four has a distance of seven to has a distance of ten.
4:14
So we should choose four next. So for an hour.
4:21
Joynes And that means that we now adjust the neighbours of four.
4:24
Well, two is adjacent to four.
4:32
It's already in the fringe. Can we get a better distance to two using four.
4:36
Well, no, because we'd have to go three plus four plus nine, which is worse than the existing candidate arc of ten.
4:41
On the other hand, five also and five also joins the fringe now.
4:49
And the total the distance four five is three plus four plus six, which is thirteen.
4:54
Well. So which node should join next? It's not if we were doing premies algorithm then five would join next because it is closest to the tree.
5:02
It's only six away from the tree, whereas two is ten away from the tree.
5:11
But we're not we're doing we're using the distance from the start.
5:16
That's. So as far as that's concerned, five is distance, 13 from the start.
5:20
So. And two is closer. It's only distance ten. So two should join the tree.
5:25
There it is. It's in the tree now. And that means the six can now join the fringe with a distance of 17.
5:30
And then we have to decide which one goes in next.
5:40
Well, obviously, it should be the five because that's closer.
5:45
That's got to 13 rather than 17. And then we look and see where the six can be improved.
5:48
Six is already in the fringe for the distance of 17. But now we can get 16 going by five.
5:55
So we we switch the candidate arc to be the three here and then six and seven join the tree and we have our shortest path.
6:02
So rather than going on the top here, we can actually do better going along the bottom.
6:16
Matches Dijkstra's algorithm in action. This growth.
6:23
So we should note that we computed shortest path from the start for all the nodes in in our example.
6:29
But in general, of course, you can stop as soon as the finish node joins the tree because then you really
6:36
have found the shortest path and you don't need to look at any further nodes.
6:42
Notice also that we got a spanning tree for the graph because we let the out with
6:47
the algorithm happen to run on until it covered all the spanned all the nodes.
6:53
But it's not a minimum spanning tree. So this spanning tree, it is a spanning tree, but it's not a minimum spanning tree.
6:58
Obviously, if we do use Prem's out in history, we would have got a minimum spanning tree, but not a this is what's called the shortest path tree.
7:06
It tells us the shortest distance from the start note to all the other nodes in the tree.
7:13
So how can we implement Dijkstra's algorithm?
7:22
Well, we're going to use much the same ideas as when we implemented Premies algorithm, the classic version of Prem's algorithm.
7:27
So we're going to store two values for each tree or fringe node, its parent node in the tree and the distance of the shortest path known.
7:36
And at each stage, the next note to be added to the tree is the French No.
7:44
With the smallest distance. And then we update the fringe, possibly improving the current shortest path.
7:48
And then we can obtain the shortest path to a node X in reverse order.
7:57
Just using the parent function.
8:02
So once we have X is join the tree or we have to do is follow the parent function from X all the way to the start node,
8:04
and that gives us the shortest path. In reverse order.
8:12
So we're not only just completing computing the distance of the shortest path.
8:16
We are actually computing the actual path itself. So here is the code or the secret code for Dykstra's shortest path algorithm.
8:20
So input is a way to graph. Plus, a pair of nodes start and finish.
8:33
And we want to output the length of the shortest path from start to finish.
8:39
So we initialise by putting the start node into the train.
8:43
And then for everything that's adjacent to start, we add it to the fringe.
8:49
So and we ascetics parent to be the start node. And the distance is just the weight of the arc from start to that node.
8:53
So that's the end of the initialisation.
9:04
And I should say that what I've put in in blue here is where it differs from Prem's algorithm, so plus some comments.
9:08
So I'd say this is very much an adaptation of Prem's algorithm.
9:18
So while we haven't found we haven't put the finished node into the tree.
9:26
And while the store nodes in the fringe, we select a fringe, no such the distance of F is minimum.
9:33
That means the distance all the way from the start node. And we take it out of the fringe and add it to the tree, obviously enough.
9:42
And then we now need to adjust the neighbours. So perhaps the diagram would be helpful here.
9:51
No, let's. So here, as usual, we've got tree.
9:58
There is the start node. And then we've got the fringe around that.
10:08
It was the. And then we're looking at.
10:18
Nodes in the fringe. So here is this node F.
10:28
And it's got a path back to the start node.
10:34
So and this is a tree node. OK, so we have decided that F is the one that's going to join the tree next.
10:39
So we can. Add it into the tree and then we need to look at the neighbours and adjust their distances.
10:50
So first of all, let's consider why, which is not in the tree, which is in is in the French.
11:02
So here is a why that's in the fringe. And it already.
11:10
Because it's in the fringe. It already has. A candidate.
11:14
OK. Leading it back into the tree here. Okay.
11:19
And all the way back to the start from there. And so it has a distance associated with that and its parent is teh prime.
11:23
So the question is, when we look and see the arc from F to Y, because Y is a neighbour of F.
11:32
The question is then is distance F plus the way from F to Y less than distance Y.
11:41
In other words, have we got a shorter path from Y to the start than the one we have so far.
11:50
And if so, then we, we change this.
11:57
So we set F to be the parent of Y.
12:01
And now the distance is this shortest distance. OK.
12:07
And otherwise we believe it alone because it all week we we didn't manage to improve.
12:13
And then the other case of course is that we have a Y. Let's call it Y prime here, which is unseen, which is the more obvious case.
12:19
And in this case, we just said its parent to be F.
12:27
And we said the distance of this y y Prima's I call it in the diagram to be a
12:31
distance F plus weight her plus the weight of this arc here in the obvious way.
12:36
So and then obviously we can we.
12:43
This means that this Y prime joins the fringe as well.
12:48
So the fringe is extended to include that.
12:52
And at the end of this one, once the we have actually,
12:57
if we finished the while loop when the finish node joins the tree and in that case
13:03
we can just return the distance and that will be the distance of the shortest path.
13:10
So remember that the what we maintain here is the idea that if you're in the tree, we've already found the shortest path.
13:15
If you're in the fringe, then we have got the shortest path.
13:22
Just using nodes that are in the tree as intermediate nodes.
13:26
But that is not necessarily the true shortest path.
13:31
The only one for which it will be guaranteed to be the true shortest path is the F in the fringe, which has the least distance.
13:35
So that is the one that we added in to the tree at that point.
13:44
OK. And as I said before, when this algorithm terminates, then we just read off the path using the parent function.
13:53
Now, this is as I say, it's just basically, um, a minor adaptation of Prem's algorithm as far as the complexity analysis is concerned.
14:04
And so obviously, we we run through the while loop. They go and squared times.
14:14
And then we have to say the analysis is just the same, basically.
14:22