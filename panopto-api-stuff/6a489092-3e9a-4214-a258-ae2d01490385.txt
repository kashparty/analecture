ID: 6a489092-3e9a-4214-a258-ae2d01490385
Title: 4.4 Correctness, PQs
Category: COMP40008 - Graphs and Algorithms (Spring 2021-2022)
Lecturer: Iain Phillips
Date: 07/02/2021
So now I want to show that the Istar algorithm correctly computes the shortest path.
0:02
So first of all, termination. The algorithm terminates because we clearly increased the tree each time we execute the
0:08
while loop just the same as for Dijkstra's algorithm to see by the algorithm is correct.
0:15
We need to formulate an invariant. And this is essentially the same as for Dykstra's algorithm.
0:21
So this invariant here is just the same as we already saw for Dijkstra's algorithm.
0:27
And so we're saying that if you're in that tree, then G of X is the length of the shortest path.
0:34
And if you're a French node,
0:44
then G of X is the length of the shortest path where all those except X are tree nodes and parent X is its predecessor along that path.
0:45
So just the set up is the same as for Dijkstra's algorithm.
0:55
And when the programme terminates, finishes a tree node and then by item two, we have the required shortest path.
1:01
So it remains to be shown to show that the invariant is established before the while, loop and maintain during the while loop.
1:10
And I'm just going to show that. Item two is maintained during the while loop and omit the rest of the proof.
1:18
OK. So to show that two is maintain, let's suppose that X is added to the tree.
1:27
OK. So X is a fringe node in this diagram. And it's the next one to be added to the tree.
1:34
And we need to find to show that we have indeed found the shortest path from the start to X.
1:39
And so this path here going from X and following the parent function back to start as lenth g of X.
1:47
OK. And suppose that.
1:57
But that isn't the shortest path. So let's suppose we have a different and shorter path.
2:02
P. That's not necessarily in the tree. So this path P is in red in this diagram here.
2:06
And clearly what we're going to assume for a contradiction.
2:13
That the length of P is less than G of X. And so let's.
2:17
Why be the first node on P. not to block the tree? Because this red path must cross from the tree into the not tree area.
2:23
So let y be the first. No, that's not in the tree.
2:31
So why would be in the fringe. And it it's parenting's ex prime.
2:35
That's within the tree. And we can split this part B into two sections.
2:39
P1 one goes from the start to Y and P2 goes from Y to X.
2:44
OK. And obviously, the length of P is just equal to the two of them added together.
2:51
And I'm sorry that the slides seem to be jumping unpredictably.
2:57
You're not quite sure why that is. OK, well, so let's do some calculations.
3:04
So. Until now, the proof is being pretty much the same as for Dijkstra's algorithm.
3:09
And but this part of the proof is now different and really quite beautiful, I think.
3:16
So remember that we're interested in F of Y, which is G of Y plus H of Y.
3:22
So what can we say about that? Well, that's less than or equal to G of Y plus the length of P to the path from my two X plus H of X.
3:28
And that is by that property of the consistency of H.
3:41
OK. So this is because of the consistency of H that H.
3:45
Abi is less equal to length of P two plus H of X.
3:49
OK, well what else can we say here.
3:54
Well G of Y. That will be less than or equal to P1 because P1 is a path from the start to y using only three nodes apart from Y itself.
3:59
And therefore the length of P1 must be less than or equal to G of Y, which is because G of Y is the shortest path from the start.
4:12
The length of the shortest path from the start to Y. Only using tree notes apart from Y.
4:21
So this is by item three of the invariant applied to Y.
4:26
OK. So J. Y is less than or equal to the answer P1. But the length of P1 plus the length of B2 is just the length of P.
4:30
So we get these are, these two lines are equal.
4:38
But then we have assumed that the length of P is less than G of X K because this was the shorter path than the path in black.
4:42
So that was our assumption. And but this is equal to F of X just by definition of F of X.
4:53
So what have we shown here? We've shown that F of Y is less than or equal to all these things.
5:02
But it's less than there. So F of Y overall is less than strictly less than F of X.
5:07
But why did we choose X to go in there?
5:15
Because X had the lowest F value. So we must we know that F of X is less than or equal to F of Y.
5:19
Because by the Cobian, our Algorithm X was the one that was chosen to join the tree.
5:25
So that's a contradiction. So notice that we are using the consistency of H here in an essential way in in doing this proof.
5:32
OK, so I'll finish by showing the algorithm based our algorithm with priority cues.
5:44
And it really is almost identical to the Dijkstra set up.
5:53
We add everything into the queue with infinite keys and we then we decrease the start key to zero.
5:58
And we and we decrease the.
6:10
And sorry, we decrease the start key to G of start.
6:18
Plus H of start. And then we go into our while loop.
6:22
So all of this is the same. And the only difference is down here that we decrease the the new if we find that G of X plus W X, Y is less than G of Y.
6:31
Then we will decrease the key for Y to G of Y plus H of Y rather than just G of Y as it would be if we were doing Dijkstra's algorithm on so.
6:46
So the differences are that let's say that instead of G of start here, it's just start.
6:57
Plus H of start. Yes. So the only the different thing is in blue are different.
7:04
Otherwise it's just the same as Dijkstra's algorithm.
7:08
And so the complexity considerations are identical.
7:12