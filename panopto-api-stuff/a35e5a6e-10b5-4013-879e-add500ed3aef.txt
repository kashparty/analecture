ID: a35e5a6e-10b5-4013-879e-add500ed3aef
Title: Haskell catch-up week 5
Category: Haskell
Lecturer: Anthony Field
Date: 03/11/2021
And. OK, good, right?
0:11
So welcome to the catch up. So we've got about 45 minutes.
0:23
Would anyone like to start with a question?
0:29
This is really a Q&A for you. Anything you'd like me to go over again to?
0:32
Look at. Fungi, yeah, excuse me, but could you please go the instance again?
0:38
Instances, sure. So we did this yesterday, I think, didn't we?
0:48
So so do you get the basic idea of a total declaration?
0:53
I guess so.
0:59
Just to reinforce that Tsakos declaration says basically all you're doing here is you're saying what the member functions of a class should be.
1:00
So if the class there are two member functions and you specify that type inside the class and optionally you can provide these default definitions,
1:09
you don't have to. But sometimes it makes for the person providing the instance.
1:16
It can mean they have to write less code because having defined one function, often you can define the others in terms of the ones you define.
1:22
So here is an example. You can if you if you know equals you could by not equals.
1:28
If you look at the NUM class, you'll see there's a function called Newgate and you have several of the class.
1:32
And just zoom out a minute, so there is a function called OK.
1:48
In fact, what it tells you in here is minimally what you have to define in order for this to be a valid instance of the class.
1:54
These are these are the member functions. And it says you can identify if there's basically the weight,
2:03
the and the default definitions in the class, meaning negate and minus a defined mutually recursively.
2:08
So Negatus defined in terms of minus a minus is defined in terms of the gate.
2:15
So to break the cycle, you don't have to define both of them.
2:19
If you provide the definition of one of them, then the other one, the default will will mean the other one is automatically defined for you.
2:22
So it just is a simple mechanism for meaning after what less code I guess.
2:28
Right. So let's look at instances. So having to find a class.
2:33
Where we are and having said what, what can you make an instance, you can make any type of an instance of a class.
2:41
So here I am making a new data type called switch, an instance of the IQ class.
2:48
So I'm saying please make my my data type switches got to constructor's offer one.
2:53
But it could be. It could be. It could be.
2:59
We know it could be regurgitated like this one we looked at when we were studying digital.
3:05
So if I did, if I'd created a new data type,
3:10
sometimes it's useful and often it's useful to make the objects of that type will make that type an instance of a class.
3:12
So, for example, in this example here, I want it's convenient.
3:21
It's something I commonly want to do is to compare to lists for equality I capital investment lists.
3:25
And sometimes I want to know whether one list is bigger than another,
3:31
perhaps using a lexicographical ordering, which we're familiar with in Haskell world lists.
3:33
So if I come back to the switch example, maybe I've got a programme where I want to compare two switches and know whether they're the same.
3:38
And I'd like to be able to use the equals function on switches rather than having to define my own equals function.
3:46
So I would never really what we're trying to do is having to avoid writing functions like that for each data type.
3:52
What I would much rather do is to define the functions equals, equals and on switches.
3:58
And I do that by making such an instance of the class in this case.
4:05
So one way I can do it is to create an explicit instance declaration, which is what the question is about.
4:13
So this says, well, OK, here's my new data type for any type I can make, any type an instance of a of a class.
4:19
I want to make such an instance of. Q And all I have to do is either define equals or not equals, or I could do both.
4:25
But usually if I define equals and not equals as the obvious meaning, you know, x not equal,
4:36
why is the same as not X equal y supported by equals I get nought equals three and if I define not equals I get equals for free.
4:42
And as I said the other day, it might be that you don't want it, you do not want it to be the case.
4:49
That X equals Y is the same as not X equals Y and vice versa.
4:55
I can't think of an example but perhaps you can contrive them so in this case
5:02
I'm saying I'll just define equals and then I'll get nought equals for free. So what does it mean for to which is to be equal.
5:07
I just in this case I'm just opponent.
5:12
Using three pattern matching rules on equals only because of the conflicts of the Australia and underscore equals on the scores.
5:14
So any any of the two switches must be felt. So that would cover the on-off.
5:20
On of cases, in one rule, the rules, when you get an instance, this is the syntax,
5:24
and in instance you then have to define some or all of the member functions depending upon the rules.
5:30
And so what's happened here where we were.
5:38
We seem to have a bit of a problem here. Where's my. Um, my magic whiteboard is crushed.
5:45
Right, okay, bear with me. Perhaps I can survive without magic whiteboard.
5:51
If I need to draw a diagram, I have to pause my just to set it up again. So.
5:59
So if I'm creating an instance of the class, I would typically define plus,
6:03
I would define minus, I would define multiplication and I might also define negates.
6:09
Well actually if I've defined, if I define what it means, but if I define the subtraction function minus I get in the gate for free and this is,
6:14
this tells me that the the comment here gives a comment,
6:21
tells me that if I, if I, if I define the gate I get minus four,
6:26
three of departments are getting the gate for, for example, the formula we used to break the cycle.
6:30
So I then like to find apps and signal and and from integer.
6:34
That's typically what I. Now of course if you missed one out, Haskell isn't going to reject your programme.
6:40
It'll just give you a warning and say you've created an instance of the class and you've forgotten to define the APS function, for example.
6:45
Well, that may be fine because maybe I don't need the app's function on that type.
6:52
I just want addition, subtraction, multiplication or whatever. But it will assure you when you can turn the warnings off.
6:55
My advice is don't don't turn warning's off because sometimes you get a warning that you weren't expecting.
7:01
Well, so that's it.
7:07
So when you create instances, it's all about defining one or all of some or all of the member functions, depending on what you're trying to do.
7:10
So there's the example for EQIP. So let's look at the did I have any other instances?
7:20
I think the instances I looked at the other day, I probably or here's an here's another one for for the show class.
7:26
So the show class, I don't actually have any definition to show because the show class has this little function, small, small show.
7:32
This one here, which is now. So the show function, you know, what is the time for that?
7:40
Well, OK, the show function lists as well. If you give me it's a function for me to string the aid and the time A has to be a member of the show
7:49
class so I can convert any aid to a string provided there's a definition of little show for it.
7:57
And that little show is inside the show class. So familiar stuff.
8:02
So you said the other day you can you can ask it to share all sorts of things to show up on integers and floating point numbers.
8:06
Oh, how do I showed that? And how do I show four point five?
8:12
Well, that's the string 4.5. But if I touch correctly, how do I do for.
8:16
But it's the string consisting of the digit for the full stop in the five.
8:23
Um, so that was the show class and that's here's an instance, for instance, the show class for the day data type, which looks like that.
8:28
Then I have to say what it means for what I have to define the little show function for each of those constructors.
8:37
And if I missed one out its finances,
8:43
I'm going to get a pattern matching because if I forget to define the show function for sun of a sun and I say like Prince Sun,
8:45
it's going to say much earlier in the show. But the usual stuff and the last one last example here.
8:54
This tells you that tuples of Schobel things are also members of the class.
8:59
And I think probably down here somewhere. I'll show you another example of this.
9:08
This is similar to what you're doing this week. There's a new data type O of some type classes.
9:12
It would be useful for that to be a member of. Well, yes, I certainly I might want to be I might want to compare to expressions for policy.
9:17
I don't think much I would ever do that. So I probably don't need that in this case.
9:24
Um, maybe there's maybe I certainly would like to be able to show that's that's often very handy.
9:29
I want to see and printed it at the terminal the the representation of a of an expression.
9:34
So the fact of the road show. Yeah. I mean when I come to the terminal I think the script has got I've got X.
9:42
Yeah. So if I type all my is there's a constant sixth of what it can display.
9:51
Const six it can, you can tell me, it can print the answer because there is a show function for six because I've made, I've made expressions,
9:59
an instance of show and therefore I've asked GHC to derive automatically a printing function of a function that will produce strings from expressions.
10:10
So all it does is it just extends the construction industry.
10:21
So does the six interesting and glues the two together with the space so that the principle
10:25
representation of six this is generated for me this this will show function is generated for me.
10:29
Now if I wanted a different if I was to show expressions differently,
10:34
maybe I wanted to take just six there rather than const six, then I could all I'd have to do is to make expressions.
10:39
And in explicit instance of the show class, and that I just defined the little show function for each of the constructors in my data, we can do that.
10:49
It would be helpful. I can show you how to do that. Come back with your handle. You want to show you how to do that, right.
10:57
So back to the.
11:03
So what what the what we ended up with yesterday was pointing out that there is this noun class, which I've just shown with these member functions,
11:05
and in this case for this week, that it's really handy to be able to create an instance of the class for expressions.
11:17
So, for example, I want to know. So the idea is that is that given to expressions?
11:24
What do I do if I add them together using the Haskell person?
11:33
If I said Iwon plus E to what do I want to happen?
11:37
Well, I may want to compete for some of the values of those expressions or I may want to compute the representation of that expression.
11:42
It depends. So in this I think the example I've got here, we create an instance of the class.
11:50
So this says, OK, well, X was just a day to time, but what we can make any data is of an instance.
11:58
So let's do that. So what does the class function do?
12:03
Well, what I'm doing here in the script, I'm actually defining the member functions for the NUM class in the specific case of expressions.
12:08
So for this, as you see that instance num exp, let's come to the same level.
12:17
Now what do I know about num?
12:25
We looked at this before, so the plus function is a two way, two way where a this thing here where the A plus one in here is the type I'm adding.
12:28
Do you think if I'm adding a to the num num class, so if I say instance num exp right then the plus function for that instance is exp to x x.
12:39
So you give me two expressions, I'll give you another expression. And what do we want to do in this case.
12:51
Well I thought we class to do. I showed you this yesterday so we might say well if you give me one expression and I'll add it to another expression.
12:58
So those are expressions. They're not numbers that are not integers or anything like that.
13:06
OK, what do I want to happen? Well, in this case, I want to produce the representation of the A, B,
13:11
E one plus two, which is just a question of using the F constructor to wrap up the.
13:18
Right now, everything the types are okay because I know that this instance, this plus is exp to expect to X polity in a private.
13:23
That's fine. And I know that, that the text line up here because if any primate, both XPS,
13:33
then I can safely use the word constructor because the constructor is something going on here.
13:39
The constructor that the constructor says, you give me two expressions and I'll give you back another expression.
13:46
So add it at another two expressions is itself an expression.
13:55
And again, as I said yesterday, I don't feel afraid, you know, just asked GHC, what is the type of the ADD function?
13:59
What is a constructor? But it's still going to take you give me two expressions of the Neuffer.
14:05
So, so,
14:10
so what I did here or is it said that that's essentially what I want and I showed you yesterday that that's exactly the same as writing plus equals.
14:11
And I said if if that's frightening then just do this so well by extension ality if I give it any, that's the same as giving Mattoni.
14:27
And by extension I again, if I give us any problem, that's the same as giving Motsoeneng prise and another one here, it's just to put the plus in.
14:38
It's like an in it's sort of infix y and then you get the same thing.
14:46
So, so what I've written in the script here. Is it down here?
14:52
Down here, this line of code is exactly the same as he was at the assembly with the other two.
14:59
And in this case, for OK to say I did not start, I could easily have to find absolute expressions,
15:06
I suppose, and I could have left them out, in which case it would be good morning.
15:10
I do need it from Integer because otherwise I can't construct expressions and.
15:15
What if I don't have that last line, then I can't write something like that because it's important that that someone is treated as an it,
15:24
not an integer, because when I write const, the argument must be at eight.
15:36
So I have to convert any integer given to me, for example, when I talk a monologue into an end and what I'm doing here.
15:44
Something here is I am converting the integer you've just seen on the seven or whatever it was,
15:56
it just kind of comes into an int so that I can give it to the to construct and all the types of.
16:05
I know that answer the question. Long winded, but Tim Russert, could you go from integer?
16:11
There was a fire alarm in the building and I could not hear it. Could you go with last.
16:20
Just bear with me. I'm just going to turn the sound off because we've got a bit of noise pollution in the room which can shut it off and.
16:24
So I didn't hear that, did you say something about a fire alarm? Yeah, there was a fire alarm in the building and I could not hear the last part.
16:48
Could you just go from India again? Because that was about I heard as well. The from insitute again.
16:54
Yeah, sure. OK, so this this is probably the hardest thing to get your head around.
16:58
So from inside here is a member function of the normal class.
17:03
So what I said is that possibly you might have missed is. If I'm sitting in GHC and I just type an eight, that's a whole number.
17:08
What does GHC do with that? What is Haskell generally do when it sees a literal constant whole number, like eight?
17:19
Well, you might think, well I could pretend it's an end.
17:26
Oh but wait a minute.
17:32
It might also be an integer so perhaps I should pretend it's an integer and you think well actually it might also be a floating point.
17:32
It's a floating point number. So Haskell has lots of choices here. And sometimes I wanted to be sometimes I want to be an integer.
17:39
And if I want const. I absolutely want the to be an integer here, and there might be another function in my programme somewhere else.
17:45
I've got a function if I got some function of type integer two and so on.
17:54
I've got that longer. If I type F of seven, I want that seven to be an integer.
18:01
So. Haskell kind of puts automatically when it sees a literal constant, it automatically wraps it up and the nice thing.
18:08
So in other words, every time you see something, it's actually behind the scenes is wrapped up with an application from integer always.
18:16
That's really handy because like a map the eight into I can interpret that any way I want.
18:24
I guess you might even think you can out of character if you wanted to know, because it's.
18:30