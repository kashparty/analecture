ID: 6528423b-00f5-4853-a1ec-ae2d0148fe45
Title: 7.1 Recursion trees
Category: COMP40008 - Graphs and Algorithms (Spring 2021-2022)
Lecturer: Iain Phillips
Date: 27/02/2021
So let's review some of the recurrent relations that we've seen for divide and conquer algorithms.
0:01
We had the worst case number of comparisons for binary search. We had the worst case comparisons for Merge Thought.
0:08
And we had the number of arithmetic operations for Strauss' algorithm.
0:15
And notice that in each case, we divide into some problems in the case of binary search.
0:21
There are two some problems. The left and the right branch.
0:27
And we just choose one of them.
0:32
And in Merge thought, we have to solve problems and we choose both of them because we have to sort both sides recursively.
0:35
So that gives us this factor of two here. When it comes to Strauss' algorithm, then we split into seven, solve problems for the multiplication.
0:42
And in each case, of course, as well, we have the non recursive work to do.
0:53
Like the additions and subtractions in Strauss's algorithm.
0:56
This rightmost term here. So what we'd like to do now is to work tools, the master theorem, which allows us to solve these.
1:00
Divide and conquer recurrence. Relations in the general case up to order.
1:10
So the general form for a divide and conquer algorithm will be as follows.
1:18
We've got work of Teahen for input size N and we are going to try and work out how much TTN is by solving the recurrence relation.
1:23
So we're going to split into a sub problems each of size, the same size and Overbey.
1:33
So. And then the non recursive work, let's call that F of N.
1:40
So the non recursive work is splitting into the sub problems. And then after we've applied the algorithm recursively combining the solutions again.
1:46
So that gives us this general form of the recurrence relation. T of N equals A times T of N over B for the.
1:56
And those are that's the recursive work being done there.
2:06
For each of the A sub problems class F of N the non recursive work for the spurt and combine.
2:08
Now of course there will also be base cases, but it turns out the base cases are not actually important.
2:16
And what we're going to do is to show how to solve such a recurrence relation up to order.
2:22
And what we're going to use to explain the master there and that we're coming to is the concept of recursion trees, which is new.
2:30
So let's take a simple example of a divide and conquer recurrence relation to you.
2:39
One equals one. That's our base case. Do you have an equals a times T of an over two plus N?
2:45
So basically I sent that. I've left a general here, but I've specialised B to be just two here and the non recursive work F of N.
2:52
I'm just calling it N just to be simple and notice that this recurrence relation is just like merged thought.
3:02
If we took a equals two that would be essentially the same as merged.
3:09
Thought we got N here instead of N minus one. So let's create a recursion tree for this recurrence relation.
3:12
So the idea is that we're going to start with an input of size N. And then we're going to apply the algorithm recursively.
3:21
And so obviously we're then going to unfold into the a sum problems each size and over two.
3:29
So each unfolding of the recursion takes us down one level to a some problems with the size halved.
3:36
And each node of the tree, we're going to recall two things.
3:44
We're going to record the input size and we're going to record the non recursive work done at that level of the recursion.
3:46
And let's make life easy by assuming that N is a power of two N equals two to the K.
3:55
So here is our tree. So at level zero, we have the input size N and the non recursive work done is also N we split into a sub problems,
4:03
so that gives us a nodes at level one and each of those has size N over two.
4:14
And the non recursive work done is again and over two.
4:21
And similarly we can go down the next level and we've now got in fact A squared because we've got a on the first level.
4:25
And then each of those splits into a sub problem. So now we've got a squared problems at level two.
4:33
And obviously the recursion keeps ongoing until we finish get down to the base case of N equals one.
4:39
So that means that we can divide by two K times because N is two to the K.
4:48
And at the base level, then we have input size one.
4:53
And we say that the the non non recursive work here is one because we don't actually make a recursive call,
4:58
we just solve the problem directly using the the base case.
5:05
Well, the nice thing about these recursion trees is that we can now see how much work is actually being done in total.
5:11
And because we've got the work is done is that each of these knows.
5:19
So we just add up the work to all of these nodes, the right cell of the pair.
5:23
Then that will give us the total work. So let's do it level by level also at level zero.
5:29
We've got work an. In this right cell here and then the next level, we've got a times and over to them, we've got a squared nodes at level two.
5:35
And the work in the right and cell here, we just add that up so that let's make it an over two squared to get the pattern going.
5:49
So that gives us the work at level two.
5:56
And then playing they obviously then we go into a cubed times and over two cubed, etc. Then we get down to level K minus one.
5:59
We get A to the K minus one nodes and the work for each of those noses.
6:08
And over two to the K minus one plus then the base case at level K.
6:13
And there are just eight of the K nodes and the work is one for each.
6:21
So simplifying slightly. We can see that we get this sum here and plus A of a two N plus A of A two squared N.
6:26
So you can see that each term is the previous term multiplied by this factor of a over two.
6:37
And this is just a geometric series. Well we know how to sum a geometric series.
6:44
This is the formula. If we making the sum of a R to the IE from Ikal zero to K, then it is just this expression here.
6:53
Let's remind ourselves how we could prove that. So if we.
7:04
Have asked some here, which. S is just going to be the sum of a plus a R plus A squared plus.
7:11
Out to the K, that's what we're trying to sum here and let's write down A.
7:27
S, which is sorry, R. S. That's right.
7:34
And this is equal to a loss.
7:42
They are squared plus. Loss.
7:48
Oh, okay, that's a plus one.
7:53
And then we pre subtract, then we get all minus one.
7:59
This is equal to a minus a.
8:05
OK. And then simplifying, you can see that that gives us this expression over here.
8:13
Of course, that only works if all is not equal to one.
8:20
Otherwise we can't divide by zero. But if A is one, then it's very easy to summon these.
8:23
Some is just K plus one times A. Well, an interesting corollary of this proposition on the some of a geometric series is that if T.
8:31
N is the largest term in the geometric progression here.
8:44
And notice that the largest term must be either the a half hour is less than one or else it must be the A R to the K if our is bigger than one,
8:50
or I suppose they're all equal if R is equal to one.
9:00
And so we're let t n be that largest term, as I say, at either end where R is non-negative.
9:06
And we're seeing that are is not equal to one and all does not depend on N crucially.
9:14
So R is a sort of constant ratio but an can vary.
9:19
That's the input size and we allow a K to vary with N.
9:23
Okay then if we sum up this progression then up to order up to a constant factory.
9:28
In other words, this is just the sum is just order t n t n is the largest term.
9:37
So that corollary, we can apply to sum up the amount of work we did in our recursion tree example.
9:47
What is are here are is a over to say notice today are is indeed constant.
9:56
It does not depend on n but the other terms here do depend on N.
10:01
Notice I've slightly abuse notation by using a four different things, so the A here is actually going to be an on this slide here.
10:07
So I hope that doesn't cause confusion. So, OK.
10:18
So we've got now different cases. So if R is less than one in the words, A is less than two.
10:21
Then the greatest term is obviously here because this this series is just going down.
10:30
OK. And so in that case, t n is just order.
10:35
N just take. This is the largest term here on the left. If A is too well then we can't apply the corollary because R is then one.
10:40
But we can sum this immediately ourselves and we just see that T N is actually K plus one times N OK, which is plainly order and log in.
10:50
So this is the case where the work is evenly spread at all the levels in the recursion tree.
11:00
And then the third case is that A is greater than two.
11:06
And so are is bigger than one. And so obviously the largest term is going to be at A to the K,
11:11
which is just a to the log N would be another way of writing it because N equals two to the K or turn it the other way round.
11:21
And that's and to the log eh. Because we'd like to see it as polynomial in name.
11:31
So. And then the total work done is t n equals order and to the log a k.
11:37
And this is the case where the base leaves the base cases predominate in the words the leaves that the recursion tree.
11:46
So we go back to our tree. Here it is.
11:54
And we've got the three cases. One is that the work goes down as you go down the levels that the work at each level goes down.
11:57
And then the top level will predominate. So the work is actually just whatever we did at the top level up to order.
12:05
Another one is where the the work is about the same all the way down.
12:13
And in that case, we just multiply by the number of levels, which is log N levels.
12:17
So it's N log N in that case. And the third case is where the work goes up as you go down the levels.
12:23
And so therefore the work to be done at the base case, the leaf case is here predominates.
12:31