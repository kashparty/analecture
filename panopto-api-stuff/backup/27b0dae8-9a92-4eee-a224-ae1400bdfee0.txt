ID: 27b0dae8-9a92-4eee-a224-ae1400bdfee0
Title: K2J - 4 : More Classes and Mutating State
Category: KotlinToJava
Lecturer: Robert Chatley
Date: 05/01/2022
Now that we created a class four points, let's go on and create a class for circles.
0:05
So we'll do this in much the same way. First of all, create a Java class circle.
0:10
And you'll see that this is created in a new file, so in Scotland,
0:18
we can put multiple public classes in the same file, but in Java, each file can contain only one public class.
0:22
And another important point is that the name of the class has to match the name of the file.
0:30
So here I have a class called Circle, which is in a file called Circle Dot Java.
0:35
If we change the name of the class to something different.
0:41
Then you'll see that now this is a compiler error because it should be declared in a file with the same name.
0:45
So let's fix that by just reverting to the previous name.
0:50
Now we can define the fields for a circle, so in a circle we have a centre, which is a point.
0:55
So again, I'll define that as a private final point centre.
1:03
And we also have a radius, which is just an integer. So let's define that as we can use a primitive type integer.
1:09
That's fine. Now again, we need a constructor to initialise these fields, so let's define a constructor public circle,
1:17
which is going to take both a point for the centre and hints for the radius.
1:28
And we just going to assign these constructive parameters to their respective fields.
1:37
Note that if I forget that this year.
1:52
Then effectively, what we're doing is assigning the parameter to its self centre without any prefix refers to this centre here.
1:56
And you can see that intelligence giving us some warnings about this saying that centre is not initialised, so this should be where we have.
2:04
Now, let's create a test for Circle. And again, we're going to create a new file for a new test class, so this will be a circle test.
2:13
I will do something pretty much like we did before. So this is going to be a test for the first method that we want,
2:25
which is includes that is whether a point is included within the circle or whether it's outside.
2:32
So again, this is a public void. Can determine.
2:39
A name like this, the round brackets and the block party.
2:53
So let's see, let's create a circle. So this time, I'm going to use this syntax for my local variable.
2:59
And let's have a circle that's centred at five five.
3:12
So here I need a new operator that I can't just do this.
3:16
I have to do new point. Five, five and a radius of three.
3:20
And then let's create a point anyone that is at.
3:32
That's, say, five four. That should be inside the circle.
3:40
And the point to which is a new point at 10 10, that should be outside the circle.
3:46
So let's say it true that the circle includes.
3:55
P1. It's an excellent and a set false that the circle.
4:04
Includes pretty. So let's import these assertion methods.
4:15
So again, these are static methods that are defined in the standard library classes, so this one asserts to us not true.
4:22
This one is a sad dataset, false and includes is the method that we are about to write.
4:30
So let's come back to your class circle and define this method. So this is a public method.
4:39
It returns a boolean, a Boolean. Again, we can use a primitive type because it's only going to be true or false.
4:45
We don't need to call any methods on the true or false value.
4:51
It's called includes and it takes a point to.
4:57
So now we want to calculate whether the distance between the point and the centre of the circle is less than the radius.
5:08
So let's say return. Senator, distance to he is less than the radius.
5:16
That process. Now, to make our radar wanted to be able to translate the circle,
5:38
so we wanted to move where the circle is so that we can scan across the field of view.
5:46
And we found that the cleanest way to do that seemed to be to be able to translate points,
5:51
creating new points, and then we could reassign the centre of our circle.
5:56
So let's, first of all, add some behaviour to point that allows us to translate them.
6:01
So let's make a new test for points. So let's create a point.
6:07
P. one. And then that's asserts that when we print it.
6:19
It's a woman. And then if we make another point by translating the first point.
6:36
Let's translate it three in the X direction and two in the wind direction.
6:48
Then if we print money to. That should be at four three.
6:53
But if we print P1 again, it should still be a one one, so we should be creating a new point.
7:05
So let's create translate on points.
7:14
One of the things that we can do here is to use intelligence to help us to generate some code so I can say whether it's something red.
7:18
I press, halt and enter and I can say create the method, translate in points.
7:24
This is going to return a points. So we get a skeleton generated for us, but it's not always quite right, so we can always fix that up.
7:29
This is going to take Delta X and a Delta Y.
7:40
And what we want to return is a new point where it's X is X plus D X and Y is at Y plus d y.
7:46
So let's run this test and check. OK, so that's worked, so now we have points that can be translated, leaving the original point intact.
8:04
That's an immutable structure, creating a new point. So let's check now that we can translate circles.
8:15
And if we take this circle and point p one, then at this point it should be true that the circle includes P one.
8:31
But maybe if we translate the circle. By six and six, that should move it far enough away that it doesn't include this point anymore.
8:41
And then again, I can create the method translate in circle that's using the jargon.
8:59
So in this case, this is a voyage method. That's correct. And it's going to take ADX and a dry.
9:04
And what we want to do in this method is to change where the centre is, so we're going to say that the centre is the centre.
9:12
Translated by the X and D Y.
9:22
Now you see again here that we get a compiler error, and that's because we've got a final field for the centre.
9:28
That means it's not assignable. So we want to make it possible to do this.
9:35
Then we need to relax our constraint on centre to say that it is very assignable and to do that, we just remove the final keyword.
9:40
So when fields can be final, we should make them final.
9:47
But where we need them to be non final because we need them to be mutable, then we would remove the final keyboard.
9:51
So this is like having a bar property instead of a vowel property.
9:56
We'd like a rental property where we can, but where we need to mutate. The state then of all property is OK.
10:00
So this is the equivalent to that in Java. So now hopefully, we can come back and run our circle test.
10:06
In fact, let's run all of the tests that we've written so far. OK, that's looking pretty good.
10:14