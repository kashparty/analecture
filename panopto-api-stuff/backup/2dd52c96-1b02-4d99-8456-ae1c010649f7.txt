ID: 2dd52c96-1b02-4d99-8456-ae1c010649f7
Title: kgk - A Brief Introduction to Website Development - Day 1 - Static
Category: WebDev
Lecturer: Konstantinos Gkoutzis
Date: 13/01/2022
This is day one. We are talking about static websites today and there's tomorrow day two.
0:03
It's dynamic. So by the end of today, in the next one and a half hour or so,
0:08
you should be able to create a simple website and publish it under your doc account because you all have an account where you can place web files.
0:15
We'll discuss about this. You should find that the web has so many keywords.
0:25
What technologies? But don't worry, we're just doing this for fun. There's no test on this.
0:32
You won't be assessed is just something that we thought is useful for you to know.
0:37
And then if you enjoy it, you can take it further by yourselves.
0:42
Now you can make money out of this. People are getting paid to create websites, as you know, and software engineering does include web tech.
0:48
So maybe you want to investigate this further for an internship over the summer?
0:57
Perhaps if you already know how to do all these things, it's fine.
1:02
You can just stick around to help others in the chat.
1:07
Now, the internet is a really large place, and it's called the internet because it's interconnected network internet, right?
1:11
There are many networks, so they're interconnected.
1:22
Now, if you're interested in networking, there is a module next year that I happen to teach and it's five or five.
1:25
So join us at that point to find out more.
1:32
But today we're talking about the web. Now, the web is not the internet.
1:36
Some people just confuse the two because, you know, the web is so popular.
1:42
The web is an application of the internet. It runs on top of it.
1:47
So when you are saying I'm going to access the web, that's an application that runs on the cables, on the networks of the internet.
1:52
The web is basically a collection of protocols and agreement.
2:02
And maybe, you know, the one that is most popular that the web is using, it's the hate TTP.
2:06
We had to write it in front of every single address, but now browsers do it for us.
2:13
Maybe, you know the sequel, which is secure?
2:19
Yes. So that's what most web sites should be using today, if not all.
2:25
They have to be secure. They need to have a certificate to make them encrypted.
2:30
But again, that's for next year. So the web has other applications.
2:35
Well, the internet has applications. It has email, SSA, Telnet.
2:40
Maybe you know some of these users who say. Hopefully all the time.
2:45
Email. Maybe use it. Maybe you don't. So if you're using a web client like Gmail or Outlook on the website, then you're not using email,
2:49
you're using the web because it's on the on the web, on the application of the internet called the web.
3:01
But if you're actually using email via Thunderbird or some other mail client, then that's the actual email application.
3:07
Instant messaging is another one. Gaming is also considered part of the internet, but specifically about the web.
3:15
How do you access it? Who speaks that protocol? HDB steps?
3:22
And of course, we know that the answer is the web browser. To access the web, you need a web browser.
3:28
You have this on your phone, your laptop, on your desktop. It's a web client.
3:33
So the web browser is the client software and the web server.
3:38
On the other side is where you connect with your client. Some examples of the web lines is Firefox Chrome.
3:42
Anything else? Do you know anything any more?
3:53
Safari. Safari, yeah, opera. That's about it, there are no other browsers.
3:59
So that's the end of it. So if if you want to speak eight s with someone, you need to connect your web client to a web server.
4:05
Someone mentioned Vivaldi. That's another. Similar to opera, it's not a browser.
4:19
Yes, to connect to a web server, you need to know its address.
4:24
It should be a unique address in some sort of domain or host name, and that name that you type actually corresponds to a number,
4:28
an IP address that you don't have to memorise the number because you know the name and someone
4:39
called DNS is responsible for converting that name that you type to the number of the IP address.
4:45
So, for example, every time you type in AC UK, it's actually converted to one four six one seven nine, whatever, right?
4:52
And if you look it up, you will see that the actual hostname is that gibberish thing at the bottom.
5:01
So, yeah, you don't have to memorise IP addresses because we know that servers hosting the domain name
5:08
the web server also speaks HTP and as they pass and has the files that you are looking for.
5:16
So the website is basically files on the web server,
5:23
and the web server serves the files to you if you know how to ask for them, some websites may need you to authenticate first.
5:27
Most web servers support multiple connexions at some, you know, a specific number of Connexions.
5:38
After that, they become overwhelmed and they stop serving, which is attack again now of service.
5:45
Now our web server, the doc web server, is one we're running within the department.
5:53
There is another web server that has our computer website and that's run by ICP, but we have our own web server,
6:00
and that's where you have free access to store web pages for yourself under your account.
6:07
Now you may have noticed when you connect to my SSA, it's to your account that there's a folder called Public hates the email.
6:15
Now anything you put in there can be made public using that URL you're seeing at the bottom there.
6:22
So if you type W W W Doc, ICAC, UK and then Tilda and your username, you end up in your own place on our doc web server.
6:28
Right now, it's probably empty, so if you go there, you will find that you're not authorised to enter it because there's nothing in there.
6:41
But as soon as you start putting files there, you will be able to see them, which is great.
6:49
If you want to create a website for yourself, just for fun, maybe you can be your CV online CV.
6:55
Maybe you can mention this on your CV. So on your actual PDF CV, you can mention the website with your student CV.
7:02
But until you graduate, because after that, your account after one year,
7:12
your account is terminated and you become an alumni and you no longer have access to this.
7:17
And then once you graduate, I'm sure you will be able to afford buying your own domain name,
7:22
which can look at something like this does have to be a co.uk.
7:27
You can be a comma or whatever you want. So a website is basically a collection of files, as we mentioned, so that these files can be the email files.
7:31
Maybe you've seen them. It's one of the languages will be using today, CSC says.
7:44
It's how you make them look pretty. Yes, which is JavaScript.
7:50
It's how you make them smarter or images like databanks, these GIFs and others.
7:54
So these files are stored on the web server and are served are offered to you with the web client.
8:02
A web page is one eighths HTML file a single file.
8:10
So when we're saying give me your website is the whole thing, your website address, but a web page is a specific, file specific page on that website.
8:16
Now, inside the web page, you can have many different things.
8:28
You can have text, of course, images, video, graphics, cache files, JavaScript,
8:31
whatever you want to, and all of these things are offered to the client from the server.
8:37
Once the client accesses that specific web page, you want to become a website developer, you will need to learn the process.
8:42
First of all, there's a customer involved. Usually unless you are the customer, you need to analyse the needs of your customer.
8:52
You have to find the requirements, the system requirements, which means interviewing them and collecting some knowledge.
9:00
Once you have these requirements, you need to design the mock-up, the storyboard, as we're calling it.
9:07
So you have some drawings and you saw these to your customer and get some feedback to improve them.
9:12
So these are just the mock up set drawings. Once everything has been agreed, then you start writing code, implementing the actual web pages.
9:19
It could be a series of files or more. And finally, once this process is done, you test and deploy it on the live website.
9:28
Until now, everything should be hidden from the world on a test environment.
9:38
It's only after you tested that you finally deployed the public to collect the specs.
9:43
You need to interview the customer, write them down in plain English and then agree with the customer on this.
9:51
The final specification. It's like a contract. If you don't write these correctly, you will not create correct website.
9:59
So this is one of the most important phases of the website creation process.
10:09
At some point, you will need to design the interface, the storyboarding.
10:15
So for UI design, you can have an entire new modular course.
10:19
So there are many books. Here are some examples here.
10:25
I'm not going to go in depth on UI, but if you're interested in improving your UI design skills, please take a look at these things.
10:29
There's also another term you may have heard you x the user experience.
10:40
So the UX is what the user experiences when they enter your website.
10:46
So the website needs to be useful and usable and desirable.
10:52
All these nice keywords say the elements here can be clicked upon, and it will take you to the place where this all started.
10:57
So have a look at it and you'll see more information about the experiencing self.
11:05
Static websites are a collection of web pages that never changes unless someone like a developer actually goes inside the file and changes them.
11:11
So it doesn't matter if you refresh the page a thousand times.
11:24
If I website static, then it will never change until the developer says so.
11:28
So for static websites like we're talking about today, we use HTML and CSS.
11:34
ASML is the actual write up the Mark-Up language, and this is the way you make it beautiful.
11:40
We also had JavaScript, but specific kind of JavaScript, because you can also add a script.
11:47
Makes the static website dynamic, which changes things, but that's what tomorrow and today we'll just create a simple static website to get started.
11:55
Come back tomorrow for a more dynamic example. Dynamic websites contains regardless of whether the developer actually is available,
12:05
so you connect them to a database or some sort of data source like not supposed to be a database, right?
12:16
And you can use queries. Computing students know what these are.
12:23
James sees queries are. It's that it's a command of some sort like a question where you ask the database to give you some data in the specific format.
12:28
We use the ask you URL, the structure query language to ask for specific data,
12:39
select data from the database so these queries can change if someone changes the data in the database with the appropriate interface, of course.
12:44
So if the developer creates these interfaces in advance, they don't need to be available afterwards.
12:55
They get paid and they disappear until something breaks. Now, the customer uses the interfaces to change the data in the database.
13:01
And then when you refresh the page, you see something new. That's a dynamic website.
13:09
Some websites that are dynamic and you use all the time is Google, Facebook and are now dynamic websites.
13:14
Use, of course, HTML. CSS ends JavaScript for the client side for what you see,
13:24
but on the backend they have different languages like BHP Spanks Perl Kate is written in part because it was written back in the 90s Python.
13:31
There's a server side version of Python Ruby, which is lapped.
13:43
Yes. JavaScript can be used on the server as well. Apologies.
13:47
So tablets can be used on the server, which is what Netflix used with react and so on.
13:52
So even though at the end of the day, you will be seeing the email see a set and samba script,
13:59
the way this is constructed for you is via these dynamic languages.
14:05
What's best? Well, it doesn't really matter since the competition starting websites is when you create something that you never want to change.
14:13
It's a simple thing like your CV, and every time you want to change it, you go inside and you change the files yourself.
14:22
Dynamic websites is when you want to allow the users to add content.
14:30
They're great. So if you create an commercial application, it's probably going to be dynamic, not static, right?
14:34
Right. Do you have any questions at this point?
14:43
Feel free to either raise your hand or type in the chat. It's up to you.
14:47
Oh, there's a question, right? Hmm.
14:52
How common is Java web development? Hmm.
14:57
Java used to be a thing for web sites.
15:03
We used to have Java server LEDs, which we don't use anymore because you'd needed a Java plugin on your browser that could be easily compromised.
15:08
So we stop using that even before we stop using Flash. And there was also say CSP, the Java server side language,
15:20
which we also don't really use anymore because there are so many other languages to use instead.
15:30
So Java is not really used these days.
15:36
Even though you could build stuff with Java, you eventually end up serving them using other means.
15:43
JavaScript is a whole nother language, and that can live both on the client side and on the server side, but they are completely different languages.
15:52
Can we switch between static and dynamic? Well, at the end of the day, the dynamic web site is serving is creating a static website,
16:02
so the user never really realises that you have coded dynamic sites because they can't see your code.
16:11
They can only see the static code that's produced from your dynamic web site.
16:20
So if you have a static website, your CV, for example, and you want to make a dynamic, you just write up some code specs,
16:25
whatever that produces that static website that you have built and introduces some dynamic features like Database Connexions, et cetera.
16:34
So, yes, you can use both. But at the end of the day, the user still sees the static version, even if it was dynamic on the backend.
16:43
So today we'll be talking about HCM, CIUSSS and the client side version of JavaScript.
16:53
If you know these, I mean, it's up to you if you want to stick around, but that's today, tomorrow.
16:59
The bug page be where do serverless technologies lie?
17:05
Well, that will be the dynamic aspect. But again, in the end of the day, these also serve HDMI.
17:11
Yes, that sounds good. So that's what the client knows the client cannot comprehend.
17:20
B Its specs cannot comprehend server side languages. How would you define a site that's dynamic on the user side?
17:26
For example, the site giving content that relies on a web site gets thermocline.
17:35
So when you add feature dynamic features on a website, for example, a JavaScript that uses a query to connect to a database and grab some data,
17:38
and you never have to refresh the paint,
17:50
it automatically refreshes for you or you use web sockets to connect to the stock market and grab the latest stock numbers again.
17:52
That's a dynamic web site. Absolutely. So as soon as you install you, you introduce even a single dynamic feature that becomes dynamic website.
18:00
The user may realise that something's going on because they don't have to refresh the page.
18:10
It magically does it for them. But again, if they look at your code, if they press control you and look at your source code,
18:15
they will only be able to see your HTML sizes and JavaScript. Nothing else, not your dynamic side.
18:24
So jumpsuit, Outlook.com, client side and server side? Yes. Different implementations.
18:31
For example, you can add a simple script in your client side by Hello World and an alert that's later on today and that will pop
18:36
up on the client and the user and actually see your code because that JavaScript was introduced in the client side.
18:46
So your code is visible. But then if you use React, which is JavaScript on the server side,
18:54
anything you write there is pre processed in the server and then that spits out that that produces whatever the email says, whatever.
18:59
And that user gets the output of that server side Zambo script so they never see your server side, Xbox game code or Node.js.
19:11
That's another example. How do we get the username, the doc username working?
19:21
Yes. So at the last slide of this presentation explains why this doesn't work for you yet.
19:26
But yeah, if you want to skip to the end, just download the slides from the science here.
19:33
Moving on HD, email the hypertext.
19:40
Mark up language, it's not a programming language, so don't call it that.
19:45
You can call it a computer language if you want to, but it's not programming per se.
19:49
It's mark-up. You just say this is something this is a text, this is or whatever.
19:54
It's not actual programming, so it's not compiled. So it's in version five and they're not going to change the version per se.
20:00
They're just going to keep adding things to it and just coordinates it HMO.
20:09
So it used to have versions like three, four and four point one, but we stopped doing that.
20:13
You mark-up things using tags. So you put things in side tongues and use these tags to describe what's included in that tank.
20:20
And that's how you present the content. It was invented by 13 Berners-Lee, and he was working at CERN at the time.
20:31
And maybe you know his name because he also invented they invented the World Wide Web.
20:39
So if you want to click on this link, you can find out the history behind this whole thing.
20:44
We needed the language for the World Wide Web, and the amount was the first real thing that became popular as the HTML was available,
20:50
but the HTML was the one that we ended up using.
21:00
So that's what was the killer up, so to speak of.
21:04
The W3C is the organisation that maintains it and updates it.
21:07
They have conferences and agreements every year on the new features.
21:12
And if you want to investigate it further, just click on the link to find out if you want to be included in this.
21:18
If you have used HMO files, you will notice that they have the concept of hyperlinks.
21:25
So it's hypertext. Because you have a hyperlink, you can link one document to the other.
21:33
You click here. It takes you there. So that's the hyper part of the hypertext.
21:39
And when you have many pages interlinked with each other, that's basically a website if you have a single web page.
21:45
Yeah, I guess that's a web site, too. But the real web site is when you have many pages interlinked with hyperlinks to each other.
21:53
Not, say, HTML. OK. The end. You can leave not only but by the end of this session, hopefully you can actually understand what this thing is saying.
22:03
The first speeds for static Web sites is called index aids HTML.
22:16
That's an agreement that specifically for the Apache Web server.
22:22
There are many different web servers.
22:27
We are using the Apache Web server and doc, but you could use other web servers, for example IaaS, which is the Microsoft one.
22:29
But there are many others. The one we're using here is the Apache, and we have agreed to call the first Bane's index hates HTML.
22:37
If you create a new file in your public HTML folder, like call it indexed HTML, and that will be the first page.
22:46
So when someone types filter your username, they will end up on this file.
22:55
And we can put more fires there as we go along. You will need a plain text editor for this purpose.
23:03
Maybe you have one of them works fine item, not a plus plus whatever you want, just don't use something that adds binary to it.
23:09
You open that file, you can do it now, by the way, you can open that file now.
23:22
If you write Hello World in there and open it in a web browser, you will see this text displayed.
23:27
So if you open a plain text file and you type Hello World,
23:33
nothing else and you save it as indicates the email and you double click on it and it opens up on your web browser.
23:37
You will actually see that text. That's not a web page, even though it's opened in a web browser and it ends in states email.
23:45
That's not a web page because web pages need HCM mail tags.
23:54
What you're experiencing is the web browser for giving you for forgetting to add the same old tags,
24:00
and it assumes that you want it to display this as a text.
24:07
That's why you're seeing it there.
24:11
So we need to learn some specific tags, mark-up tags and put them in a specific order in order to create the correct and valid web page.
24:13
Let's start with the first one HD email. I'll make a brief pause.
24:24
Someone's asking where the slides are. You can find them on science here.
24:30
It's under the general category at the very bottom. Someone else asked, What's the difference between a web application and a website?
24:34
Well, a web site can be either static or dynamic.
24:44
Our application has to be dynamic more or less replication just a cool way to say dynamic websites these days.
24:47
It's actually serves a specific purpose that's more or less it.
24:56
Yes. So HD email is the main tank for AIDS HTML documents.
25:01
That's where you put everything inside the edge of the email. Thank you.
25:09
Open it with less than eight html more than and you close it with less than.
25:13
Slash hates the amount more that. So everything you put within inside these two tags is basically your website.
25:20
Well, your web page, the specific web page. There are some different tags.
25:30
We call them self-closing because they don't have an open or closed to disclosing themselves, but we'll talk about these soon.
25:35
Now, web pages are like humans. They have a head and they have a body like humans do.
25:43
They don't have a head. That could be problematic so that after you start the CML tank, you should open and close the head tank within that.
25:51
So it's eight p.m. and then it's hand and inside the head is where you put useful stuff like method data or your title.
26:03
We'll see what that is in the body doc, which follows the hand.
26:13
So first comes the head and then comes the body. That's where the actual content of the website of the weapons goes.
26:16
In a similar version five, they introduce something called the doc type, the document type.
26:25
And that's how we know that the page conforms to its HTML five.
26:32
We don't just write it's HTML. We have to start these web pages with less than exclamation doc type 8's HTML more than so.
26:37
That's how you know that the developers of a specific website are using HTML five, not the same old version of it.
26:48
Ideally, all modern websites should start with this line,
26:57
and you can actually check as soon as you enter a website to suppress control you and you can see the entire code.
27:00
The client side version of that code, not the server side 20:00 tags are case insensitive,
27:07
which means it doesn't matter if you write them in all caps or all lowercase, or if you want to change between comps in your case for some reason.
27:16
But we have agreed to just use lowercase for everything, except for the word doc type.
27:23
OK, so let's just agree to use this. Everything is lowercase for these tags, except for a doc type and the ACM body itself.
27:30
So the place where you actually write your page is space agnostic,
27:40
and that means that it doesn't matter if you are in the million spaces or tabs or new lines with the Enter key.
27:45
It doesn't matter 8's HTML is going to ignore these what the web client translating these email is will ignore these.
27:51
Only one single space will be displayed. That's on purpose.
28:01
If you want more spaces, there are ways to introduce them.
28:06
If you want, for example, to have many, many spaces next to each other.
28:11
You need to use a special character, a special entity. That has the space within it.
28:17
So a new blank space is an actual space. You are the numbers on in front of it and a semicolon at the end.
28:24
That's a space. You do this a million times, that's a million spaces. So it is possible, but not with the space bar.
28:31
If you want many new lines, you need to use a tag, which is the B r tag.
28:37
And you will notice that b r from break is a self-closing tag, so it's less than break and then it slices itself before the more then.
28:43
So there's not an opening and closing for b r b r is one of the self-closing tags.
28:55
All right, so so far, we have this simple Web page.
29:02
It starts with Dr Bates, the email, and then we have the aids, the amount, the hand and the body, and everything is empty.
29:06
If you open this on a web browser, it will be empty because there is no content, but it will be a valid, empty web page.
29:14
The head of the page, we had stuff like what kind of character set we're using, what's the title of the page?
29:24
Any ceasefire or Java follow any to on JavaScript file we need to want and more.
29:31
So these staff, the technical stuff, the metal stuff go in the head.
29:37
Anything you want to do to actually show up in the page needs to go in the body because anything you put in the head will not appear in the page.
29:42
And I mean, this is the title. The title appears on the title bar on the tab that you have open, but it won't actually appear inside the web page.
29:53
Everything else is just metadata. If you want to define the characters that we have agreed to use, UTF eight, say set for a website.
30:03
There are others, but I believe that's the one you should be using if you create a web page these days.
30:15
So there's the meta dog met the date that dog.
30:21
Nothing to do with Facebook this coincidence?
30:25
So you open with less than meta and then you introduce a parameter within that self-closing tag, which is the car character set, which is car set.
30:29
And then you equal. You give it a value equals two double quotes UTF8 close and double quotes.
30:42
So what we did there is we opened a self-closing metal tank and we added a parameter and a value within that metal tag.
30:50
And that tells our page that the character set is UTF eight.
30:59
So that means we have all the English connectors, all the, uh, Slavic characters, the Greek characters, uh, Japanese, Chinese, Korean, everything.
31:06
Everything is in there so you can write things like this. For example, all the popular languages are included in there.
31:15
If you didn't use UTF eight, you would only be able to use ASCII, which is just basic English characters.
31:24
Nothing else. So yeah, UTF eight is the way to go.
31:30
It is useful, but not mandatory to add an extra parameter in the AIDS, the email dunk.
31:35
So you will have aids the email.
31:43
Lung equals and for English or other languages, for example, Chinese is is that Heinz or Ascendis, are you and so on?
31:47
So you don't have to do it.
31:56
But if you want your page to be absolutely perfect in the hasty meltdown, you should also mention the language that the web page uses.
31:58
If you have a website that has many different languages and because you have translated it in different languages,
32:07
then every web page needs to change the Lanc parameter of the age of the email you.
32:13
So this is our page now. It starts with a dog type its email, and then has the A.T.M. tank that contains the head and the body in the head,
32:21
and we have the character's head set to UTF eight. And now it's time to actually start adding things.
32:29
Now, the title that will show up on the bar, on the top or on the entire window is the title of your web page and that goes in the head.
32:37
It starts with title closes with last title. And within those inside those tongues, that's where the title actually goes.
32:47
So you can try it now. It will look like this. So title.
32:55
Welcome to my website. Whatever you want to add and close it.
32:59
And just make brief pauses to give you some time to actually do it.
33:06
You can don't have to do it, but if you want to do it, please go ahead.
33:10
Now let's move to the body. The dogs inside the body need to be valid.
33:15
So anything you put inside the body needs to be inside something you just can't write.
33:21
Text in there and hope it works. You could write it and the browser will show it.
33:27
But that doesn't mean it's a valid web page. If you want to write text in the body, let's start with paragraph that be open.
33:32
Be and last. P is where you can add text and you put it in paragraphs.
33:40
Every time you want the new paragraph, you start in closing you b and last p.
33:45
So let's say we want to say Hello world, do you open the P?
33:51
Hello, world use last AP And that's the end. So it looks like this now in the body.
33:55
We have included this text, and that's a valid web page.
34:01
It has a head with a character set and a title.
34:05
It has a body with text inside the paragraph. And if you take this, you will see that it's valid and will shortly see how you can test this.
34:09
Now, P is great, but it's very specific.
34:18
You don't necessarily want a paragraph, you just want some text. So if you want to be more flexible, we use Div from division.
34:24
So basically web pages are divided into different divisions, different parts.
34:33
So this is where the logo goes. This is where the menu goes.
34:38
This is where the text of the article goes or whatever. So during the storyboarding the design phase, you decide on these, there's these divisions.
34:42
And then when it comes, when the time comes to actually implement them, you actually use that they've tagged to build them.
34:51
Some examples at the bottom of this slide, Dave, this is my personal website's last Dave.
34:59
That's great. Now that works, you can put text inside the div.
35:04
You can also put the paragraph inside a div. So Dave, be personal website slash p slash div.
35:09
So we need to close things in the order that we in the inverse order so they need to close before the other one has opened.
35:16
So if you start div and then you start to be the first close,
35:26
the last thing that was opened be in this case and then you close the first thing that was opened.
35:30
OK. So if you open div and div, then you close division div.
35:37
But that first div that you closed was that last div that you opened, if it makes sense.
35:42
OK, so this is what it looks like.
35:50
Now you have the page and in the body we have a div that has some text in it.
35:54
And that's how it looks like to answer the question in the south, yes.
36:02
That's what it looks like now. Great. Let's add animals in the beds now, find the animals, make sure it's something that's public domain.
36:05
It's free for you to use and let's use the IMD's the immense dog to actually include it.
36:18
Now the Mustang is self-closing, so I just lost it at the end, and it has parameters and values to define where the animals lives.
36:25
So it's less than I am. Great. And then SIRC is the source.
36:34
So where are the flowers coming from? And that's where you put the founding.
36:40
Then what is the alternative text? That's what you show.
36:44
When they must has loaded or because it's broken or when someone has a screen reader, that's what it displays instead of name.
36:48
And then you have width, which is in pixels, in height, which also in pixels.
36:57
So that's a correct image call, correct image tag.
37:04
It needs a source and an art as a minimum.
37:08
Then you also add width and height on top of it. Let's have this image.
37:12
For example, this image is free. You can see the link on it.
37:17
It's from public domain pictures. So anything you use, make sure you have either created it or it's free for you to use in public domain.
37:22
Now, this image does not have to go inside a div.
37:31
You should put it in individual so that you are able to control it later with success.
37:35
But you don't have to just for vanity reasons.
37:40
Someone's asking about how do you want comments? There is a way to do this.
37:45
I think I have it later. If not, don't mention it. So so far, we have these parameters for the inmates, for the I Am Zeitung, its source.
37:50
That's where the fire's coming from alternative text. That's what you need to show if you don't have any events there.
38:01
The width and height. Now, please note that within the height is what you want, the size you want the image to appear in.
38:08
It doesn't necessarily mean that's the actual size of the image. So maybe the image is double the size.
38:17
But you are going to display it at this size that you have defined there, even if you'd change the size with width and height.
38:24
The actual image will be downloaded from the server to the client in its actual huge size.
38:33
But you can make it look smaller with these parameters.
38:41
That makes sense. So it doesn't mean that you're actually resizing the actual source file.
38:45
You're just showing it. You're displaying it in a different size.
38:50
Right? So that's how it looks like. And when you put your mouse on the elements, you can see the alt text in this specific example.
38:57
OK? Now, how do we know where the money is coming from?
39:08
Well, you need to put them on somewhere.
39:12
If your mother lives in the same folder where your HMO file is, then you just say that name of the machine, says Typekit Pansy.
39:15
Great. If it leaves in a subfolder, then you have to say the name of the subfolder class that found me great.
39:26
If it's one folder up, then dot dot slash and the name of the file.
39:34
If you want an absolute path instead of just saying relative to you,
39:38
if you want to say it's there, then you have to write the whole thing, the absolute thing.
39:44
OK, so a relative means relative to this web page.
39:50
And so compared to me, it's one path up, one file down.
39:55
Whatever absolute means, it's always there, always in that URL.
39:59
There's the concept of Houghtaling. So when you houghtaling something, it means that you are linking to a file of a domain.
40:06
But usually we use it in a derogatory term.
40:16
And so what linking means you are linking directly to a file that stored in a different domain than you, if it's in the same domain.
40:19
That's fine. But if it's coming from a different domain, you need permission, otherwise you could be blocked.
40:29
So if you decide to not download that imagined added on your server because you don't have enough space and you just link it directly from a separate,
40:36
a different web server, then you're using up that server's bandwidth every time you're refreshing your page.
40:45
And that's not good for that website. So they may decide to block you when they see this in their log files.
40:53
So make sure you avoid what linking, because of course not.
41:00
The URL could be changed on the other side, and they could break your page.
41:04
But also, it's not polite to steal other people's bandwidth or images without the same right.
41:07
So linking is only allowed if you have full legal access to the files if when they're on the same server, if they are owned by you.
41:14
That's great, but not if it's someone else's files.
41:20
If you have a website and you want to decrease the size of the actual website,
41:26
you can store images externally and calls them from there as long as you have legal access to do so.
41:33
And that's how you decrease your own storage requirements.
41:40
We can discuss about this tomorrow again, but don't do this unless you have permission to do so.
41:44
OK. So this is our page. So far, we added a new div with an image inside, which is a cut ties and not with insight height.
41:50
Great. So now it has some text and an image in order to link to add a link to this page and linking to another page.
42:01
We use the anchor tag the a tag, so it opens with less than a and it has a parameter and a value.
42:10
The parameter is hyper reference, hates ref, and the value is where that other file lives.
42:19
So again, this can be relative or absolute if it's a relative file.
42:26
It means that about the HTML is in the same folder as I am right now.
42:31
If it's an absolute thing like Google.com, then it takes you to that other website.
42:38
You leave this server, you go to another server.
42:45
OK, so it's fine to use either. Doesn't matter because you're not linking.
42:49
You're actually taking the user to a different option at the URL.
42:54
So that's absolutely fine just to save you some time.
42:59
Copy paste your index file in the same folder, rename it to about and hour.
43:04
You have two files and then add the link from index to about and then from about two index using this format that we just saw.
43:08
OK. And of course, change the text to make sure that people know where they're going.
43:18
And that's it. You just added a link in your web pages and now you have a website because it's two interlinked web pages.
43:25
OK? Before you ask, yes, you can add a link in an image instead of a text.
43:34
So instead of typing, click here to find out about me.
43:40
You can actually include an immense tag inside the a hyper reference.
43:45
And then that image becomes clickable and takes you to the other page.
43:50
All right, so thanks very much. Doesn't matter as long as it's inside an a non-core tag.
43:56
So our page looks like this now. It has a hyper reference pointing to a.
44:03
About eight similar, which means that about lives in the same folder as we are.
44:08
And it has a text. Click here to find more. We close the A, which is the last thing that was opened and then we closed the day you see it.
44:13
Right now you have the first file, which is finished, and we need to check if it's actually correct or valid.
44:24
We mentioned that basic HTML is not a programming language. It's a Mark-Up language.
44:33
So how do we test if something works in HTML? Well, W3C offers a validation service.
44:38
If you click on this link, it will take you to their web site and you can copy paste your code there or just upload the file itself,
44:45
and it will tell you if it's valid or not based on the same five standard.
44:53
If not, it will tell you what's wrong and you can fix it.
44:58
OK? Please note, just because something looks OK in your web browser, it doesn't mean that the page is valid.
45:03
It just means that the browser is forgiving you. And someone could say, Why should I care if my page is valid, right?
45:12
Well, yes, just because it works doesn't mean that it works everywhere.
45:18
So if you only focus on a specific web browser, so Chrome only, for example, or Firefox only, that's one way to go about things.
45:23
Yes. But if you want your page to be valid and make sure it's mostly compatible with most modern browsers, then that's how you do it.
45:31
You go and check with the validation service. W3C. All right.
45:43
It's ideal and important to make sure your pages are valid.
45:48
Someone could ask, So all these professional web applications out there, are they producing valid output?
45:52
No, not necessarily. Some of them are not.
45:59
And that's why the developers need to come up with different hacks to make sure they look similar to different popular browsers.
46:02
Firefox, Chrome, Opera or Safari, etc. I am back in the day when Internet Explorer was a thing.
46:12
It was a nightmare to make sure the website was actually looking decent on that browser because you are so much different than any other browser.
46:20
But these days, we don't actually care about this anymore. This is what you should see Green Line that says it's great and no errors.
46:29
So that's what you should see when you take your of code if you get any errors.
46:40
It will be highlighted and you can fix them, right?
46:44
Do you have any questions? So, yeah, someone asked, how do you read comments?
46:47
I didn't mention it, but it's mentioned in the chat. It's less than an exclamation that starts you.
46:53
Are the comments there and then you can argue with us does more than yes, that's correct.
46:59
I could include it, I guess. Yeah. And the other questions?
47:04
I would love the question, so these comments that you are adding in the email, who can see them?
47:10
That's where you come in, you have to answer no. Everyone, everyone, yes, because you are typing these comments in a static HTML file.
47:19
So if you control you the page, you should be seeing these comments.
47:28
These are not private comments for you and your developer friends.
47:33
It's for anyone who uses your web page.
47:37
So if you go on Amazon dot com and you control you and you scroll, you will see the comments that they have added and they're actually quite funny.
47:40
So feel free to do this while we take a break.
47:49
OK, let's take ten minutes until three three.
47:54
Thrilled to be back then. Thank you. And we're back.
47:59
Let's continue. So if you spend the time to create this paints, it should look something like this.
48:02
So it has text and an image and a link that takes you to the about page.
48:14
So that's more or less how it looks like, depending on the browser where you opened it.
48:20
Yeah, but it doesn't look very nice, and it's the HTML used to be responsible for the, you know, making it pretty, but it's not anymore.
48:26
Now, these days we use RSS. CSF stands for cascading star sheets.
48:37
And that's how we add, you know, colours and style and distances to our data contained in the hates the IMF has.
48:43
It's called cascading because it has layers, different layers of the star seats,
48:57
and we'll see how we can use them and every document should have a set of styles.
49:03
Otherwise, it's just a plain boring document. It's currently in version four, but four is not really a version.
49:11
It's just like some extra features and version three.
49:18
That doesn't concern you so much as the fact that different web browsers support different features.
49:23
Yeah. So that was our everyday reality back in the 90s, and it still is for.
49:32
So if you want to make your website look exactly the same in different web browsers,
49:40
you need to spend some time and add some cost hacks, as we call them, do make it look as close as possible to other browsers.
49:44
Now there are three ways to add CIUSSS in your AIDS themed page.
49:55
The first is write your code in a separate file, which is a Dot CSX file.
49:59
The extension is just you can name and whatever you want, and that file needs to be included in the head.
50:05
We mentioned it in the head of the web page. Another way to add CIUSSS is to create the style tag so you open westtown.
50:11
You can also start last now and within those tags, you write your CSS code.
50:20
And that's also another way if you want to write something specific for a specific just one web page.
50:27
Otherwise, you can use inline.
50:35
So if you want to change one tag and specific in web page, then you can just go inside that tag and add some CSX code in there.
50:37
Now, cascading, as we mentioned before, means that it's layers and those layers.
50:48
They are on top of each other and they overwrite each other.
50:53
So inline is at the top. So when you write something directly inside the tag that always prevails, that's the winner.
50:58
OK? The head style is in the middle.
51:07
So if you add Cisco in the head of the page in the style tag that's over here, it wants defeat in line, but it will defeat that found method.
51:12
So if you want to assess code in a file that's always at the bottom, it always loses.
51:23
So, yeah, it doesn't sound nice, but file is the way to go,
51:28
even though it's at the bottom of this cascading stylistic thing, that's the correct way of writing CSX.
51:35
So even though inline prevails, you should be using fast.
51:42
OK? Why do we have the other two?
51:47
If you want to make adjustments to specific web pages, so one web page only you add this in the head of that paides in a style tag,
51:51
and it overrides the style C2 file that you have included in all your pages for that one specific page only.
52:02
And that's great if you want good behaviour, and the same goes for the inline approach.
52:10
If you want to change only one tiny little tagging one page, you're going, that's not going to change it.
52:15
And that wins always. Oh, let's see how CIUSSS works.
52:20
If I want to justify all the tanks to make it justified of all paragraphs, then I go in my CIUSSS file and I say, You know, the p tag?
52:27
Yes, the paragraph doc open curly and close curly.
52:38
And every time you see a Pete dog change, it's text allowing property to justify value.
52:42
So Tex Allowing is a CIUSSS property of the paragraph in this case and justifies a valid value that you can use for the text line property.
52:50
Maybe this looks familiar because, well, CIUSSS was inspired by every single other language since.
53:01
Barred by sea, or, you know, maybe you've seen some Java today that should look like that too.
53:07
Yeah. So if you want this code in the external file, this browser says and include it in your email page,
53:15
then all of the paragraphs in that specific page where that file was included will change the paragraph text to be justified.
53:23
How do we add this? Well, you going ahead and either at the beginning of the handover at the end of the head doesn't matter.
53:32
Somewhere inside the head you type link, which is the name of the tag in the parameters are type value equals text to assess
53:39
relationship equal rel equals stylesheet and hyper reference equals star access.
53:49
So the link is the name of the tag and it has one to three parameters in every parameter has a value,
53:56
the type parameter says What are we trying to link inside the page?
54:04
We're trying to link something of type text sucess. OK, what's our relationship of this page to this link?
54:09
It's a star. It's our star. Great. And what's the hyper reference pointing to that link?
54:17
This is it relative to this page. Of course, this means that this is inside the same folder as ourselves.
54:23
Great. So that's how you add a link to a ceasefire inside the head of your page.
54:31
If you want to, you can. Instead of adding a file, you can just copy paste this CIUSSS call directly inside the star tag on in your head of the page.
54:41
It opens westtown, closes with last sound. And inside there you can write access.
54:54
I mean, that's the fastest way to go right now if you want to,
54:59
but the proper way is to just write it in the external file because that way you can just reuse that file as easy as adding this line of code, right?
55:02
Otherwise, you have to copy paste this thing again and again in every single page.
55:16
So it's much easier to have it in a file instead of copy paste.
55:21
Now not suggested, don't do it. But yes, it does work.
55:26
If you want to justify a specific paragraph, then you go inside the P tag and then you add a parameter called style,
55:30
whose value is c a source code so you can go in almost any single female tag that has some style properties.
55:40
Add the style parameter and inside the value of that support after you add some CAC code.
55:49
So this text would be justified when presented in a web browser, right?
55:56
In order to group up collections of changes of style styling changes, we create two different kinds of groups the classes and the ideas.
56:04
Now, a class is a collection of styles that can be reused many times within a specific web page, not website.
56:17
So within specific web page.
56:26
So if you want to use the same collection of styles again and again in the same web page, you should create a class style for it.
56:28
If you want something to only appear once in a web page, then you can create an I.D. for it.
56:36
It's almost exactly the same.
56:43
But if you want this code to be valid, your I.D. Your collection of stars that's defined as an I.D. should only appear once within a web page,
56:45
whereas if it appears more than once, it needs to be a class.
56:55
OK, so how do you define a class in your CSS has called the DOT and then give it the name?
56:59
I went with my styles, whatever.
57:07
So you may remember that when we wanted to create a style for our paragraph, Windsor's added p because that is an existing HTML tag.
57:10
Yes, but that means that P needs to exist if we want to create a collection of styles and applied to many different tags.
57:20
We create our own name, our own class. So Dot my styles is something that we created.
57:31
And inside there we can do whatever we want. Justify the text, make the text green, make the background black, whatever.
57:38
So whenever we use this class, all these features, all these properties will be applied.
57:47
If you want to have an I.D. you instead of a dog, do you use hash this this icon?
57:56
So it's almost exactly the same, but class has a dot in front of the name and I.D. has this last.
58:04
Otherwise, they're exactly the same.
58:14
If you want to use the class, you go in that you want to apply to and you just say class equals and the name of the class.
58:17
Great. So this Dave now has green text with a black background that's justified.
58:26
And this one as well, and we use it twice, which is allowed because this is a class collection of styles.
58:33
If you want to only use it once, for example, this is your page title and suddenly appear once in the page.
58:41
Then we say I.D. equals my style.
58:48
And that's great, because now we know that this specific div is now called my style.
58:52
That's the idea. It's like naming it. So if we want, we could retrieve it that it's called my style now.
58:59
And so as a way to do this, we'll talk about this in our script.
59:08
There are many CSX attributes. I haven't even mentioned a few.
59:13
So these are just common examples.
59:19
There's a whole link here that has everything and all the different views you can use, some of which are supported by different browsers.
59:22
So you will need to play around a bit to see what works where, but more.
59:32
Most websites reference this. You don't have to memorise it.
59:37
You just need to be able to know that, yes, that thing exists.
59:42
I will check the bibliography to see how it's called.
59:46
So you don't have to actually memorise all the values for all the properties.
59:50
Your Cisco now works and you have applied it.
59:55
And that's great and does something. But is it valid?
1:00:00
Just like with age, the amount you can't tell because there's no compiler, but you can check with W3C validation service.
1:00:03
It's a different one compared to the previous one. This is the ce ss one.
1:00:14
And again, you either upload or copy paste and it tells you if it's valid or not.
1:00:18
But again, as we mentioned, it's sounds because something looks right doesn't mean it's valid.
1:00:24
So make sure you check and you get this and take care and the validation service.
1:00:30
Otherwise, your code is not valid and will be more difficult to make it look exactly the same in different browsers.
1:00:37
Yes, now there's something called responsive web pages or responsive web sites.
1:00:46
That's when a website resizes itself to match your resolution.
1:00:53
If you go in a Facebook dot com, for example, on them on the on your laptop,
1:00:58
you will see that it spreads and it covers the entire area of your screen.
1:01:04
That's great. And then you start decreasing the size of your screen and it adapts to it.
1:01:08
Then things start going smaller and smaller.
1:01:13
They don't just show you the scroll bar, they just adapt themselves to the new resolution of your web browser.
1:01:16
You can try this with most websites that are responsive. They don't have a scroll bar.
1:01:25
Suddenly, that appears. No. It just adapts themselves, and they do this with CSX media calls.
1:01:30
So media calls say when the resolution drops below X and Y do this and they resize some controls,
1:01:37
they hide some controls in their sandwich pattern or whatever.
1:01:45
So proper websites these days should be responsive, which means that they should use media calls to resize themselves to the size of the browser,
1:01:49
and they should look at almost exactly the same, or at least usable in different resolutions if they introduce a scroll bar.
1:01:59
It means they're not responsive if you can't use them at all, so they don't have a scroll bar, but it's just hidden.
1:02:08
That's also not responsive, and Google will downgrade you in their rankings if you're not responsive these days.
1:02:15
Yeah. Cool. Do you have any questions on CC?
1:02:22
Yes. If you're what if you're like one of you're on a phone and it's like two big.
1:02:33
So would you go for like percentage of like the screen width or something?
1:02:40
Mm hmm. So that's one way to do this with percentages.
1:02:46
Yes, depending on what you want to achieve if it's a wallpaper on the whole page, a bit of background of some sort, or if it's an actual image,
1:02:49
you can say to your page when the resolution drops below 1200, change the image width and height, display width and height to this size.
1:02:58
So as we mentioned in the image, Doug, you are not actually changing the actual size of the format, you're changing how it's displayed.
1:03:11
So with a media call, you can make it smaller when you drop below a specific resolution.
1:03:19
But again, during the design phase, you would also design storyboards for different resolutions.
1:03:28
So when someone is using your website on their phone, which may have a small resolution, you may need to increase the font size.
1:03:34
You may need to hide images.
1:03:43
You may need to hide the controls in a sandwich button or other things, too, to make the website usable in different resolutions.
1:03:45
And so I hope this answer your question. Why don't we use it instead of glass?
1:03:52
Well, if you said something as an IED and you accidentally use it twice, you will fail the CSF test, then you will know that something went wrong.
1:03:57
So if you specifically want something to only appear once like a title and you accidentally use it twice because you have two titles for some reason,
1:04:07
then that that will catch this mistake for you.
1:04:16
Another reason is when we come to JavaScript, you can call a name.
1:04:20
You can call an attack based on its idea. So the name you're giving to that tag is the idea of a sign to it.
1:04:25
And by adding an I.D. for it, it means that you can specifically reference that specific div with that specific I.D. If you use a class,
1:04:32
you just grab all of them in an array when you talk about those thieves.
1:04:42
I thought there was another question, but it's not there anymore. OK, so moving on.
1:04:50
So, yeah, to make your Web page smarter, you need the scripting language, because that's that adds the magic in the actual pains.
1:04:58
JavaScript looks like Java, but it's not the Java in any shape or form.
1:05:09
It was developed shortly after WW W appeared and has not changed a lot.
1:05:14
So it's still if you find code from the early 90s, you can read them.
1:05:21
It's exactly the same as today. It's just added new libraries.
1:05:26
It added new features, but the original JavaScript. They're still around and they could still work because they are almost the same.
1:05:30
There are two ways to add JavaScript to your page.
1:05:40
You can add them in external access files and there are.
1:05:45
There's another collection here. You can add them directly in the pages, in script tags or directly in the eights, the HTML tag.
1:05:52
So maybe this reminds you of something CIUSSS so you can either put them in a file and include them somewhere in the paint,
1:06:01
or you can add them directly in the the email, either in the script tag, somewhere in the page or in somewhere that has a tag like the body.
1:06:12
And then you add the script there or a div and you have the script there. So it's similar to KSAZ, but not identical.
1:06:24
Now the location does matter. It's not that you should always have it in a file.
1:06:31
It does matter because it depends on the purpose. If you want something to execute on when the body loads, it should be triggered from the body tag.
1:06:37
We'll see some examples. Let's say you want to pop up an alert to greet your visitors.
1:06:49
That's very annoying. So don't do it. But let's use this as an example.
1:06:55
So let's say alert, which is the command, and then you open a parenthesis and you add the parameter in double quotes within a string.
1:07:00
Welcome to my website and then you close with a semicolon at the end of the line.
1:07:09
So you will see this in Java as well. It has like a method name and then in parameter, the parameter value goes inside the parentheses.
1:07:13
And because it's a string, you put it in and double quotes.
1:07:21
So when you use that as a JavaScript, it pops up an annoying thing that says, Welcome to my website, and it looks something like this.
1:07:25
If you want to include this as a separate file, you create that new text file, you name it, whatever you want to do.
1:07:37
Yes. And you go in the head and you have a script dog whose SIRC is the source of the file, which is relative or absolute.
1:07:44
If it's relative, it needs to be in the same folder, for example. In this case, if it's absolute, you are pointing to an external, a script file.
1:07:54
Sometimes that's also allowed now when you enter the page as soon as the head loads and that stack is triggered, this script is going to run.
1:08:02
So you're going to get this annoying alert in the middle of your browser window waiting for you
1:08:17
to press the OK button and you won't see anything else because execution will have stopped.
1:08:25
It won't load the rest of your page until you have press that OK button because the alert this one,
1:08:31
the alert method of JavaScript or function if you prefer because this is a scripting language, this is this poses the execution of the whole page.
1:08:40
It's quite annoying, so don't use it. Mike, it's good for fun just to check things.
1:08:52
Now you will notice that we open the script tag and we close the script tag, but we left it empty.
1:08:58
The script is not a self-closing one. You need to open and close it, even if you end up leaving it empty.
1:09:05
In this case, the content is in the source parameter, so this file has your JavaScript code.
1:09:11
So when you write code and you put an external file, you call, you still call with a script tag, but you leave it empty inside.
1:09:19
For now, you actually wanted to include this code inside the script tag.
1:09:27
Then you open this script and you write your JavaScript and you close it.
1:09:34
You get the similar result. But remember wherever you copy, paste this script in your web page, that's when it's going to launch.
1:09:38
It immediately launches this alert function in this case.
1:09:47
So if you put in the head in happens, they're put in. A body. It happens at what whichever part of the body you have placed it in.
1:09:53
OK. You can also put it inside a dog.
1:10:00
As we mentioned, that's the last part. It's still inside the paides, but it's inside the specific tank.
1:10:05
Now, it's not enough to just say script. Now you need to link it to an event.
1:10:12
So JavaScript is also some power and event driven language, which means you can launch set on a specific event.
1:10:19
For example, this is the body tank, and we added the Unload event.
1:10:29
So when the body tank loads, that's when you pop this annoying alert.
1:10:34
So inside the Unload event, we can actually write them a script.
1:10:40
So it's not just that we type script this inside the Tank Yorke's we type that the event on which you want this code to run.
1:10:46
And there are many different events you can use, like on click on Double, Click on Focus, etc.
1:10:55
Right, mouse over is another one context menu means right click if you click here,
1:11:03
you will find that there's a large collection of these things and yeah, feel free to use them if you want to write.
1:11:10
Do you have any questions at this point before continuing? No, cool.
1:11:22
So you can say that JavaScript is an event driven language, but it's not just an event driven language, it's it can act as an event driven language.
1:11:26
You don't have to trigger it on events like this.
1:11:40
You can just use a script tag and run it directly wherever you want it.
1:11:45
But JavaScript is definitely on typed, which means you don't have to define the types of the variables it.
1:11:50
Then you can use a variable and you can add the string inside it.
1:11:59
And you can either. No, you can add an entire object.
1:12:03
It doesn't care sites and Typekit, which means you have to be very, very careful when you learn Java later this term,
1:12:06
you will find that every variable needs to have a very specific type,
1:12:14
and you cannot put different things inside that variable JavaScript because the scripting language doesn't care.
1:12:18
So don't accidentally you reuse your variables in ways that break your script, right?
1:12:26
Usually we have lots of code. We put it in functions.
1:12:36
You have done this in hospital, of course, and calling. But we do this in JavaScript as well.
1:12:40
We previously used the alert function that someone else had written for us, and that was great.
1:12:47
It was just running. That was fine. But now let's put something inside our own function.
1:12:53
So we start with the keyword function and then we give it a nice name and we open and close parentheses,
1:13:00
which means that this one doesn't have any parameters. Even without any parameters.
1:13:06
You still have to have the parentheses there, open close carols and then you do stuff inside this function.
1:13:12
VAR is a key word that means we are defining a variable in the name of the variable is output great.
1:13:19
The value is assigned with the equals sign and we are assigning this string.
1:13:26
I am writing this code near to this variable output and then we use a different function that was created by an Xbox for us document dot, right?
1:13:31
And we write this output to the value of this variable output onto the document and document being their web page.
1:13:42
So when this function is executed, it defines a new variable it the this string to it and then it executes document,
1:13:50
right, and writes this string onto the document onto the web page.
1:13:59
It doesn't care about data types. You could add numbers here.
1:14:05
You could have objects here. It wouldn't matter. Now you can call this script in script tags anywhere.
1:14:09
You know what? Page doesn't have to be in the head. It can be in the head can mean the body can be wherever you want.
1:14:17
You can have an event. Write script here. Script there, script anywhere, right?
1:14:22
But when you add this in in a script, let's say that you have added this year you need to call this.
1:14:28
You actually need to call this. Let me just go back for a bit and point to the alert one.
1:14:37
You will notice that the alert one was directly appearing inside the script.
1:14:44
So as soon as the execution of the page reads this line, it was running immediately.
1:14:50
It wasn't waiting for anyone to call it alert. An unknowing alert box.
1:14:56
Great, but now our code is inside the function.
1:15:01
So now if you want this function to execute, you need to call it.
1:15:05
So when we went in the head and included this script, the page found that, Oh, there's a function there, great.
1:15:09
I will keep this in mind, but it didn't actually run it.
1:15:17
You need to have a new script tag and call that function to be able to run it.
1:15:21
And this is where it actually called it. From here, we briefly mentioned before that you can assign names to tax IDs or classes,
1:15:27
so that document object model is how you can take advantage of this.
1:15:39
Everything in A. DML file is like a tree.
1:15:44
And the things inside the file are like the leaves of that tree so everything can be accessed.
1:15:49
Everything can be retrieved. So JavaScript is how you can take advantage of this and call all of these things and use them in some way.
1:15:57
Stuck. There we go. So in order to retrieve, for example, all the paragraphs based on their dog, which is the P, you just use that document.
1:16:09
Don't get elements by tag name and elements is important because you may have more than one paragraphs.
1:16:21
You can't know in advance how many you have. It's only after you retrieve this that it gives you an array of zero or more elements.
1:16:29
If you if it found it maybe didn't find any paragraphs, but if it found more than one, you will have more than one records in that array.
1:16:38
And that's great. All the paragraphs will be retrieved and then you can scroll through the array and do whatever you want to them.
1:16:47
Now, when you say document, get element by I.D. and you type an I.D. name here,
1:16:55
you know that this is going to work because if you have a valid page, you should only be using these once, as we mentioned before.
1:17:02
So if you have one title or one logo in that page, they need to have an I.D. and when you call them, that's retrieved and then you can change them.
1:17:11
You can do whatever you want to them refresh them or something. Now, classis is the last one.
1:17:20
Yet elements elements by class name, it's plural again, because you can use classes more than once.
1:17:26
So if you want to get all of the tags that you have, use the class thumbnail on them.
1:17:33
That's how you do it by class name. So this is the DOM module.
1:17:39
You can grab any part of your page with an ideal class name or just based on their tag
1:17:44
name and retrieve them and then use them and edit them and change them in some way.
1:17:50
And that's what makes your page smart, or at least look smart in some way.
1:17:55
However, there is no validator for JavaScript.
1:18:02
There was one for the email. Yes, there was one for CSX, but there is no such thing for JavaScript.
1:18:08
Yes. That's why people hate JavaScript.
1:18:19
But what can you do? I mean, that's life. Instead, you have to use your web browser.
1:18:24
It has a debug window and go in the JavaScript console to see what error messages are being displayed there and maybe try to find where it is.
1:18:31
Sometimes it's pointing to an entirely different line where the problem is, but then slowly, because you forgot to put a semicolon somewhere.
1:18:44
So it does things that line continues all the way to the next one.
1:18:52
So maybe you should look up a couple of lines. Yes.
1:18:56
It's a very tedious and sometimes boring and annoying process, but JavaScript is very powerful and quite modern, to be honest.
1:18:59
So if you have some time and patience? Feel free to learn it.
1:19:11
Or at least learnt sibling TypeScript, which is very popular these days as well, too.
1:19:16
It's quite useful if you want to learn a single web based language.
1:19:23
JavaScript is the one to learn. You can work both on the client side and on the server side.
1:19:29
Can has many applications. So, yeah, you're free to explore this further.
1:19:36
Now there's something called a day query day query is JavaScript, but it's not a new version of it is just a library for it.
1:19:42
It's written in JavaScript, and it's meant to make your pages look dynamic.
1:19:51
You can even use the query on a static beads. You don't necessarily need to use your specs.
1:19:56
You can have the email system a script and include the query library and suddenly your page looks dynamic.
1:20:02
You can use a query to connect to databases, and because it's based on Ajax, which is something that allows you to make dynamic calls.
1:20:10
And in this way, you can retrieve data from databases without even refreshing the page in refreshes the div automatically in a smart way.
1:20:18
It retrieves that they've been named.
1:20:28
The I.D. and then refreshes the content based on something that it got from the internet, so it's very powerful and it has a learning curve.
1:20:30
Remember anything you write on the client side is visible,
1:20:39
so don't use this to actually connect to a database because they will see them in connexion information.
1:20:42
But there are ways to use this to connect to a service,
1:20:50
and the service can connect to the database on the backend so that they can reconnect to service.
1:20:54
The service does the dirty work and just returns the results to your website and then your website looks smart and dynamic,
1:21:00
even though it necessarily isn't. Yeah. Questions.
1:21:07
Can we run TypeScript on the client? I expect there's a way to do so, but uh, I think a student was working on that I would need to check.
1:21:15
But yet JavaScript is the one I've seen on client side web pages.
1:21:26
I would need to check that I can let you know. And you have other questions.
1:21:33
Someone says that they had this already. I mean, I can relate.
1:21:39
Many people can relate. There are so many memes out there, but the end of the day, if you want to make your website usable,
1:21:43
you will need to add JavaScript to it on the client side and maybe even on the server side.
1:21:51
I mean, look at Netflix. Yeah, I mean, React is very popular these days and easy to learn as well.
1:21:57
So. Yeah.
1:22:06
OK, so no other questions, I guess. Um, one final thing before we complete the static session.
1:22:08
So do I have to actually write everything myself from scratch?
1:22:16
No, not necessarily. There are frameworks, so some people have created the collections of eight seamless JavaScript files for you.
1:22:22
You can just adopt, adopt them and use them, and in your website, you don't have to write them from scratch.
1:22:30
Of course, you will need to learn and know it's they must. That was great to be able to use them and adopt them.
1:22:38
But yeah, once you do it, once you will be able to do it very fast the next time.
1:22:45
The most popular one is still being bootstrap these days, but there are many others, of course.
1:22:51
And the only problem here is that all these websites that are based on frameworks and look almost exactly the same to each other.
1:22:57
So you will need to spend some time to customise it and make it more personalised to the needs of your customer.
1:23:04
Don't just go with the default setup.
1:23:10
You can easily tell when the website is using a bootstrap, and the developer wasn't paid enough to care.
1:23:14
Yes. Yeah. So depends on how much time you have, how much they pay you.
1:23:21
So how, how in-depth knowledge you have of the languages out there.
1:23:30
You can also buy frameworks and templates for from bootstrap or other like.
1:23:36
WordPress, for example, offers different templates.
1:23:43
You don't have to create a website from scratch every single time, you know.
1:23:48
Yeah. OK. So quiz time.
1:23:52
Go to mented dot com. Use this code and let me open up my browser to actually allow you to run it.
1:23:58
Let's see what you remember.
1:24:08
Answer fast but correctly in order to upload your website files on our Docs server, you need to put them on the public web.
1:24:12
Public hates the amount public CSC public say yes, and the correct answer is public obligates the email correct?
1:24:20
No public web is not the thing.
1:24:32
Even though we call it the World Wide Web, a patsy by default uses public, hates the email, and there's no such thing as public cynicism.
1:24:34
OK, next question to.
1:24:44
The hate mail in Zeitoun closes.
1:24:52
With saying it does not close itself, closes with slaps more than there is no armed guards, the ammo tank itself closes.
1:24:56
Remember, there's no last names. Right? So it's I am Z and then you close it itself closes.
1:25:08
So unlike, for example, the paragraph where you have to open it with a b and closure with its last B.
1:25:16
Next, one question three. The CIA says in line style.
1:25:24
Prevails or other is always overridden, is in the middle, should always be used.
1:25:35
So that's the in-line one. So that's the one where you go inside the tank itself and you have to start tugging at always wins.
1:25:43
It's at the top of the cascading star seeds. But yeah, it's almost never be used unless you really, really need it.
1:25:52
OK. Even though previous question Number four.
1:25:59
JavaScript is. Strongly typed static type and typed all the other answers are correct.
1:26:08
And the answer is typed in doesn't care about your types, that's other languages real programming languages know, for instance, how a script.
1:26:21
But yeah, and I love that script. Don't worry about it. And the last one?
1:26:34
Question number five. Dynamic Web sites.
1:26:38
Here's one that links to tomorrow can connect databases, contains their content even without a developer, can be written in Python.
1:26:45
All the other answers are correct. Yes.
1:26:54
All the other answers are correct, so always read the question before you just click something fast, which is what they said at the beginning.
1:26:58
So if you care about scores and stuff well done to.
1:27:05
Yeah, almost say. You when place one.
1:27:11
Yeah, fastest. Well done. OK.
1:27:16
So I'm just switching back to the out of the window now. There we go.
1:27:20
And I also want to see you. Great dating life.
1:27:43
Cool, right? So just to summarise, websites are collections of web pages.
1:27:52
Web pages are using client side languages for your web browser,
1:28:00
such as a seamless RSS and JavaScript web servers, run server side languages that can also connect to databases.
1:28:06
That's for tomorrow, and at the end of the day, the server side language is still going to give you client side code.
1:28:15
Now, come back tomorrow to find out more about server side.
1:28:22
Now this is not coursework or homework. This is just for fun.
1:28:27
Create a simple website for yourselves. Put it in your public SDMI folder.
1:28:30
It's going to look like this the URL and you can use any anything you want.
1:28:34
You can just bootstrap in there and you can use whatever you want.
1:28:40
Just don't download any illegal photos in there, and just everything you use should be public domain.
1:28:43
OK. Or something you made yourself so nothing copyrighted or plagiarised in there.
1:28:50
For example, if you don't know what to put in your web page your website and would be like an introduction about yourself or welcome to the visitors,
1:28:59
a CV or contact information, but don't put any private information there, because if Google comes around and spiders and scans your web page,
1:29:07
it's going to actually have your contact information on the internet and you don't want that.
1:29:16
So just write your college email or something that you don't care about because you don't want this ending up on spammers list.
1:29:20
Maybe your projects portfolio a link to your GitHub account or LinkedIn profile and your interests and hobbies because you are human beings after all.
1:29:31
Right? So you should also show that you're not just writing code all day, even if you are right, so you can include that as well.
1:29:40
Now the most common issue and the question I get every time is I can't see my files when I go to that URL.
1:29:49
That's because when you created the files by default, they were created to only be visible by you.
1:29:56
But the way our web server is accessing them is from the public side.
1:30:03
So maybe you remember this, these access rights are about yourself, your group and the world,
1:30:08
and the web server is the world as far as this folder is concerned.
1:30:15
So you need to change them to be visible by anyone, which also means that anyone can see your publication of foreign content,
1:30:19
which is fine because you should only be using client side code, so they would be able to see that anyway, right in just control you in the seat.
1:30:27
Yes, you can add some server side scripting with Python or CGI barrel, for example.
1:30:38
Yes, you can. But trying to keep that outside of the public domain.
1:30:48
Otherwise, if you have any passwords, you're going to be visible.
1:30:54
So only use this for static files, you change their access rights to be visible to the public.
1:30:58
And if it's a folder, you also need to make them executable like this.
1:31:07
So seven, five five. OK. So by doing this, these files become available to the public and also to the web server.
1:31:11
Our Doc Apache web server that serves them to the world. Some books if you're into books, but who reads books these days, right?
1:31:19
There are many tutorials on the internet free that you can find about how to build your own web site.
1:31:28
And once you are done tomorrow, a new world of server side scripting will be available to you.
1:31:35
And more tutorials? OK. Any final questions?
1:31:41
Thank you for coming. It was great to see to see so many people here.
1:31:47
If you have more questions that weren't answered, feel free to post them on Edstrom and come back tomorrow if you want to see more dynamic stuff.
1:31:54
Thanks, everyone. Bye bye.
1:32:04