ID: 5c17bd1c-20a4-483b-b3a5-ae2d01490198
Title: 6.4 Decision trees
Category: COMP40008 - Graphs and Algorithms (Spring 2021-2022)
Lecturer: Iain Phillips
Date: 20/02/2021
So in order to get all lower bound results, we want to express our sorting algorithms as decision tree.
0:01
So let's talk about these decision trees.
0:07
The internal nodes are going to be the comparison with the internal nodes of the red nodes in this example diagram.
0:10
And the leaf nodes, the ones that have no children, are the results going to be the rearranged list?
0:17
So the Leafs are in black in this diagram. And we then argue about the number of leaves that we have to have.
0:23
How many different outcomes do we need to have from assort?
0:30
And if we need a certain number of levers like we need six leaves, then because these trees are binary trees,
0:35
the tree must have a sufficient depth to give us that number of leaves. And the depth notice is the worst case number of comparisons.
0:42
So in this example, we've got a tree of depth three, a three.
0:49
And we've got three comparisons in the worst case.
0:53
There are some better cases, but in the worst case, we need to do three comparisons, either down the left or the right hand branches here.
0:56
So let's make this a bit more concrete. Now let's have a look at an example algorithm.
1:05
I call these three sort. This is a rather simple minded algorithm, only to only sorts lists of limned three.
1:11
And rather than writing it down in the normal ways in pseudo code,
1:18
then we're just going to express this algorithm directly by giving the decision tree.
1:22
So I'm going to index the list by one, two, three here rather than zero one, two.
1:29
So apologies, but I hope that won't cause any confusion. And the first thing this algorithm does is to compare the first and second elements.
1:34
And if they're in the right order, then we go down this Left-Hand path in the tree.
1:44
And if they're in the wrong order, we go down the right hand path. But notice, we don't actually do any swap here.
1:50
This algorithm just does comparisons. The decision tree just expresses comparisons.
1:56
So if one and two are in the right order, we next compare two and three following the algorithm.
2:01
Well, if two and three are in the right order, then obviously the rest is sorted.
2:07
So we just output the correct the order in which we should have the elements, which is the one, two, three.
2:11
Order the existing order. If, on the other hand, two and three are the wrong way round, then all we know so far is that two is the greatest element.
2:17
But we don't know about whether one is below three or above it or should be in the sorted list.
2:27
So let's do a final comparison of one and three. And then if they're in the right way round, we say that the correct order will be one, three, two.
2:33
And if they're the wrong way round, we say three, one, two. So this is to be interpreted as saying that we output the list as l one.
2:42
L three, l two. Etc. Well, the other case is the right hand branch.
2:50
And similarly, well, the two in the one are the wrong way round.
2:57
But we next do the same comparison anyway. The two and the three.
3:02
And if they happen to be the wrong way round, then actually the list is in reverse order.
3:06
So we just say, well, the correct order is the three to one. The reordering.
3:11
If, on the other hand, the two and three are the right way round, then all we know is the two is below one and below three.
3:17
So we do a final comparison of one and three, and then we have the final two outcomes, depending on which way that went.
3:25
So we can see that each leaf is a possible permutation of the list.
3:34
And in fact, there are the six possible permutations. I mean, it couldn't be a correct sorting algorithm unless it had all of those six permutations.
3:38
I suppose you could imagine that some of them could be repeated, but at least we need to have those six leifs there.
3:47
Otherwise, it's not a correct algorithm. And we can see that the worst case number of comparisons is three year.
3:55
In the case of these four outcomes, the sorted list of the list is sorted, we get to get away with two comparisons.
4:03
Or if it's reverse sorted again, two comparisons. Well, we'd like to fit insertion thought into this same framework.
4:10
So that's what we have to do. Let's on this exercise is to find a decision tree for insertion sort.
4:20
And let's stick to lists of Science three to compare with our three sort algorithm.
4:28
Notice that the decision tree does not mention swap setting.
4:36
It explicitly, of course, insertion sort does use swaps.
4:40
But the way that the decision tree works is that you just do the comparisons following the order in the
4:45
tree and then you don't you just reorder the list in one single go at the end of the decision tree.
4:54
So we need to even though we are doing swaps in insertion sort, they are not part of the decision tree.
5:01
Okay, so let's have a go at that. And you can have a go at it yourself first if you want to, some pause the video.
5:10
But let me now do it. Let's put up the previous slide just to see what we kind of thing that we're looking for.
5:18
So we're going to be taking a list of land three.
5:27
So and let's so we've got our three elements.
5:32
And while here's our list, and it's indexed by one, two, three. And what we have to do first well, is to insert the two.
5:37
The second element into the sorted list. So compare the two and the one basically.
5:46
So we get a one two comparison, just as we did with three sort.
5:51
And then we've got two possible outcomes the right way round or they're the wrong way round.
5:55
If they're the right way round, then the one two is already sorted.
6:05
So we insert the three into that. So obviously we compare the two and the three.
6:09
And then again, they're the right way round or the wrong way round. If they are the right way round, the three can just stay where it is.
6:14
And now there's nothing further to do. And the order is one, two, three, four, the list.
6:21
So that's the leaf outcome. Again, just the same as in three thought.
6:28
On the other hand, supposing the three and the two are the wrong way round, then.
6:34
In that case, we actually swap them. So we swap. Two, three.
6:38
And let's write down what the list now will be. The order will be one, three, two.
6:44
OK. Just that these are just mental notes for us.
6:51
And the three still has to be compared with the one. So one and the three get compared.
6:57
And we've now got two outcomes. Obviously, if they're in the right order, then the three stays where it is.
7:04
And that is our final outcome. Otherwise, the three and the one swap over.
7:12
So that's what. Three.
7:17
And then we output three, one, two. Just the same as in three, so let's go over to the other side.
7:22
Well, let's say that now that they're the wrong way round, then we swap. One and two.
7:32
And so we've got basic interest, mental notes. This is not part of the decision tree proper.
7:39
We got two, one, three. And so the next thing we do.
7:44
Well, okay, the two one is now incorrect order. We insert a three.
7:49
So that means the three has to be compared with the one. We get that comparison.
7:54
And now, again, we've got two possible outcomes. If the one and the three are in the right order, the three doesn't need to move.
8:00
And the we just output two, one, three.
8:07
So notice now we are diverging from the three sort of algorithm, otherwise we have to swap the one and the three.
8:11
So now we swap. One in three.
8:18
And then we've got to. Three one is on order.
8:24
But what comparison do we do now? Well, the three is still locked. We don't know where it should be.
8:31
So we need to compare the three and the two. And then again, we've got two possibilities.
8:35
Maybe they are the right order, so three is found its position.
8:41
So we just output two, three, one. Or else they have to swap over swap.
8:45
Two, three, and then obviously the order is three to one.
8:54
The reverse sorted order like that. OK, so that is how to get the decision tree for insertion sort on less of land three.
9:00
And what we see we learn from this is that we have got a worst case of three comparisons.
9:14
That's the depth of the tree. And we see that we have six leaf nose.
9:23
Of course, the worst case number of comparisons, we already had that from our formula for W of N.
9:27
But in terms of the lower bound argument, we can generalise from this an equal three case.
9:33