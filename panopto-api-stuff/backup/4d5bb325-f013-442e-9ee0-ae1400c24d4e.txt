ID: 4d5bb325-f013-442e-9ee0-ae1400c24d4e
Title: K2J - 10 : Boxing and Autoboxing
Category: KotlinToJava
Lecturer: Robert Chatley
Date: 05/01/2022
Now that we've created our PAT costs using generic type parameters, there's one more issue that we should look at to do with how this works in Java.
0:04
Here's an example of us creating a pair of strings. And so we're using the cost that we've already defined and we're passing into tight
0:14
parameters string and string for TeamViewer so that we can make a pair of strings.
0:23
And because we implemented our of method, we can say that this is a pair of high and by.
0:29
And this works fine. Let's have a look at what would happen if we used numbers instead, so let's make an ex.
0:38
I mean, why? And then a pair of pants and it.
0:47
I can see that this doesn't work. There's a problem here if we look at the problem, it says the tight argument cannot be of a primitive type.
0:56
So we've already looked how, in fact there are reference types, object types,
1:05
but there are also primitive types for a small number of commonly used types, particularly numbers, brilliance, that kind of thing.
1:11
So here we've used a primitive type, but the rule in Java is when we have a class that takes a type parameter,
1:19
that type parameter must always be a reference type. It can't be a primitive type.
1:26
So in this case, using integer is not allowed. And instead, we have to use integer instead.
1:31
So you'll remember that for every primitive type, there's an accompanying reference type,
1:40
the primitive types are all identified by having names that start with a lowercase letter,
1:46
and their corresponding reference types have names that begin with an uppercase letter, as is the Convention for all reference types in Java.
1:50
For example, this class and all the classes we've defined have had a capital letter at the beginning.
1:58
So if we make a pair of integer and integer, then.
2:05
We could pass in two inches, so I can say new integer X and new integer Y.
2:11
And this works, but you'll see that actually encourages giving us quite a lot of warnings here.
2:22
And the reason for that is that we've done more work than we need to.
2:28
So actually, although this works fine, we can get away with letting the language and the compiler do some more work for us.
2:32
And actually, we can use X and Y directly here, even though they're a primitive type int rather than a reference type integer.
2:40
And what happens here is that the compiler notices that we need a reference type and it builds an integer object wrapping around our primitives.
2:49
So it's going to build an object of type integer, which contains X, and this is called boxing.
2:58
So boxing is when we build an object wrapping around the primitives so we can treat it as an object.
3:06
When we had new interview here, we were doing the boxing ourselves.
3:13
We were building an entire object and commercialising it with the value of this primitive.
3:17
And when we don't specify that explicitly and we allow the compiler to put that in for us, then that's called auto boxing.
3:23
So we're automatically getting this boxing effect where we're building an object
3:30
out of this primitive integer in order that we can use it in our pan of integers.
3:34
This works the other way around as well, sort of we have numbers and we get the first elements of the pan.
3:44
Then we can see that that will be of type integer. And so we have integer F is numbers there first because first quarter,
3:51
then the definition returns a T and T is the first of our type parameters, which we've found to be integer in this case.
4:02
So we've got a box to value.
4:10
And if we want to unwrap it and get the primitive out because we'd rather work with primitives for the rest of our programme,
4:12
we could say int value and that will give us.
4:18
A primitive unit. But in fact, again, I don't have to go through this unboxing process manually.
4:25
I can just put it here and then that will be done automatically by the compiler because it seems that we have that type integer.
4:32
We want to Typekit and it knows that that conversion can be done simply by unwrapping the object and converting it into an it.
4:40
So the thing to remember here is that whenever you create a collection or some other type that takes a type parameter,
4:47
that type parameter has to be of a reference type. So if you are creating a list of integers, then you have to use nested integer.
4:54
But then also boxing means that we can take our list and we can add packs and we can add wine,
5:10
even though those are primitives, because they'll be automatically boxed into integer objects by a compiler.
5:18
And when we get something out of the collection.
5:24
The reverse process will happen, so that means we have the convenience of using primitive times where we want to in our programme,
5:33
and we don't have to go to too much manual effort to box and box because the compiler can take care of that for us.
5:39
It's just important to know that this is happening so you understand how the code is being compiled and how it's executing.
5:47