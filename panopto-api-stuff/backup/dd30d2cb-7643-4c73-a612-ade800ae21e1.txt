ID: dd30d2cb-7643-4c73-a612-ade800ae21e1
Title: L14 - Arithmetic
Category: COMP40001 - Introduction to Computer Systems (Autumn 2021-2022)
Lecturer: Bjoern Schuller
Date: 22/11/2021
Welcome to lecture 14. And today we will be talking about computer arithmetic, so we're moving slowly towards putting together our many old processor.
0:01
And finally, our microprocessor. So first, we will be dealing with additions,
0:11
will then go into a subtraction multiplication sort of division and then finally put this together to an algorithmic logic unit, a u.
0:17
But let's go into the first things first single bit additions.
0:26
So again, we want to scale up as we did the functional design approach recently and start from
0:30
reproducing the building blocks to scale up to a larger bit numbers or word lengths.
0:37
And the addition of two bits can be specified by a truth table.
0:46
Of course, we have for two variables and b to be added.
0:49
No, some is has, the name says the sum of the two zero zero zero zero plus one or one two zero one each.
0:54
But now we have the case of one plus one and then we have a sort of overflow.
1:03
And for that, we need a so-called carry out. You could imagine a written on the left side of some, then the output would read as one zero.
1:08
And that, of course, would be binary two. And that would make sense because you have one plus one equals two.
1:19
Or you can just memorise that if you have an overflow, you need the carrier and the carrier stores that extra bit.
1:26
So if you use midterms, we get two billion equations sum.
1:36
If we look at this is a prime and B or A and B prime, which of course, is exclusive.
1:42
And Carrie is simply and b we have zero zero one.
1:51
That's simply and b. So the excuse of war, and that is what we have for some new future.
1:55
Remember, some was a prime or inverted and B or A and B prime or a b inverted that equals a exclusive or B and, you know,
2:07
exclusive war like in war, but was a circle around to show that it's the exclusive war to remind us that is the truth table of exclusive war.
2:17
It's like an or only that for one one as an input, we have zero.
2:27
It mean it has to be exclusively one or the other being high and the other one being the only.
2:31
In that case, you output is high. The same Somalia is used in the symbol for the circuit.
2:38
So we have like an object here. But we put this plus with a circle around to indicate that it's an exclusive war gate.
2:47
Now, an exclusive or gate on a hardware level on chip level can be designed not much bigger than an end or more.
2:55
So it's something that we can use as a gate for compact circuits, and we can also try to spot it in our truth.
3:05
Tables came ups and the likes. So on the other hand, side, there's also an exclusive Moorgate, which is simply an exclusive or gate inverted.
3:13
So the output here is one zero zero one. And they're going to use both or in order to simplify rules and Boolean algebra.
3:26
Only thing is that they are a little bit hard to spot in the Cayman.
3:34
Now, to summarise what we have so far, we have a one bit error, which is called a half error.
3:41
It's represented by the following equations and circuit. Carey is a and B and some is AA exclusive or B.
3:48
This is to the circuit, very simple one, Carrie is a and B here, so we have an end gate here.
3:56
Some it's exclusive will be so the excuse of or gate here for some.
4:05
No, you may ask why is it called a half error? And what we are missing is a carry in.
4:11
So if you want to scale up with our functional design approach, we do not only need to carry out, but also a carry on.
4:16
Which brings us to the full letter next. And then we're able to really scale this up.
4:23
So the idea is that we want to be able to scale up again with functional design,
4:31
and that is useful if you want to have final numbers longer than one bit, which of course is a standard or the standard case.
4:37
We need to propagate the carry propagate, meaning we need to forward it to the next hierarchy level.
4:44
So to the next bit, processing this means we must add three binary digits at each stage and in the Abbey end the carry in.
4:52
Now let's look at that. So we have now the two input variables A and B, and we have the additional carry in input.
5:03
If all three are zero on the input side, of course, the of zero carry out its zero,
5:11
if only one of the three input variables is one, so zero zero one zero one zero or one zero zero zero, of course, zero sum.
5:16
It's one each and carry out a zero. Now what about if two of the inputs are one?
5:25
Then we have the case. That's before some is zero, and Carrie is carry out as one.
5:33
Same in the other two cases where two oh, one here, some zero carry out one.
5:42
Again, you can imagine the carry out column to be left of the same column.
5:48
Then this would be read as one zero and it would be to. And what if all three are one, then no, the left hand side or right hand side carry out,
5:52
and some will read as one one year together as a rule of or as easy way to memorise this,
6:02
meaning it is three the output because you're adding three times one or simply, we have the same cases.
6:08
We'll see how error will be at one one. And.
6:18
Now we also heard Senator Kerry carrying one.
6:24
So with this truth table, we can again find the Boolean equations.
6:29
Was midterms, so for some, we simply see where some is one for the midterms,
6:35
and this is not a and not B and one and Korean or C simply the first term here next term is A and not B and not C.
6:40
Not A and B and not the next one is A and not B and not C.
6:55
And finally, A and B and C.
7:04
Now we can pull out not a head of the bracket from these two years and then inside to find B and C or B and C prime from this one year,
7:08
or we can pull out a from these two terms ahead of a bracket.
7:22
And yeah, hey. And. In brackets, be prime and see prime or be and BNC.
7:26
Now we can spot two exclusive wars here. This is our one exclusive war here because of what we see.
7:35
And in this bracket, we will see another exclusive war. And finally, we can consider this as.
7:43
A exclusive or b exclusive we see now in the similar fashion we can find them in
7:56
terms of carry out like we did for some years and then pull out of the bracket,
8:03
find an exclusive for that's led to this in detail, but we can find in the same way the brilliant equation for carry out.
8:07
We can have this a little bit.
8:18
Exploit it here in the circuitry that we have excuse for, be in both some and carry out.
8:24
We only have one source or gate for A and B. And on the other hand side, we need.
8:30
This. Gate here for A and B.
8:41
And, of course, this one year for C and a exclusive, it will be such that we have also good for the full air.
8:47
Now this full letter will allow us to scale up and set, and the half ed is so useful because on the first least significant bit level,
8:55
we will need the half editor we don't need to carry in there. However, for the next most significant bit,
9:05
we will need to carry on and hence we will scale up by combining half error was as many full errors as we need,
9:12
and at the end we still have a carry out from the last full letter to see if you have overflow.
9:21
So and this is our bit zero bid, one bit two to be added from A and B, and on the output side, we have for some zero sum one and some to.
9:29
Now, if you need a carry in, that makes sense, of course, if you want to consider this as a block,
9:45
as a building block of a larger word, lengths for addition of to million variables.
9:51
And we can, of course, also use a full letter on the least significant bit, such as we have a carry in here.
9:59
And so we then also have a more homogeneous architecture here because we're only using four letters.
10:05
So this allows us to use the functional design approach using larger building blocks,
10:14
and we could, for example, build a 32 bit ad about combining for eight bit areas.
10:17
And if you want to do that, if you want to use the eight bit areas as a building block to scale up again,
10:22
of course, we need to carry in to stack those eight bits decoders.
10:27
The Caribbean can also be used for other purposes that we will be seeing later when we put together our menu processor.
10:33
Now we look at a. Ripple through Carrie, No.
10:42
The previous circuit is called the Ripple through carry error.
10:51
So this one here, because it ripples through the carrier from stage to stage or from flatter to flatter.
10:56
Belfast, the circuits, which are designed to propagate the carry faster and the books, you'll find many others like the look ahead carry out.
11:05
But in this lecture, we will focus on building up the algorithmic logic unit and moving on,
11:13
and not just because all these different variants of errors.
11:21
But please be invited if you're interested to have a look at other variants with error.
11:25
One, however, we will look at that is a little bit different as it is a sequential circuit,
11:30
the so-called serial error, which is very easy to to put together.
11:38
You just need a full letter and the flip flop and the flip flop will have to be
11:42
used to propagate the carry and your input and your output would be serial.
11:52
So if you have serial and input and output, rather than parallel input and output like we have before in the through adder,
11:57
we can use this very simple architecture here to just add one bit at a time, of course,
12:05
and we'll see flip flop store the carrier for the next bit to arrive and feed it back here as carrying.
12:11
So this circuit, of course, assumes that the Brits arrive on the serious input was the least significant at first,
12:25
and of course, that means on the output side, it'll be the same way this significant but first.
12:31
Now inside the computer lab, we're usually not having serial data processing, but parallel.
12:38
So this is just curiosity. No, we get additions mixed up is a little bit more complicated, and in fact,
12:44
it will get even more complicated as we move on to multiplication or division, but it's no big deal either.
12:53
And let's do this subtraction can be defined by a truth table using the borrower and payback method you may remember from school for decimal system.
13:00
So we're not really talk much about it, but I'll give you the truth table here.
13:10
The truth table for a minus B is as follows rather than.
13:16
Carry in and carry out, we now have borrow if you need to borrow one and pay back to them at the next higher stage, pay back, sort of.
13:23
So let's look at it. Zero zero zero for a payback of a difference, if I do a minus zero zero.
13:36
We don't need to borrow anything. If, however, payback would be high.
13:45
The difference would be one because we need to payback from the last stage.
13:53
And at the same time, we need to borrow one because we did zero zero and had to pay back.
13:57
So the difference is one and we need to borrow one.
14:06
Zero minus one is the difference of one, and we need to borrow because it was smaller than B was paper zero in this case.
14:11
And then finally, we got zero minus one and payback and then we have a difference of zero and borrow one.
14:23
Yeah. Table goes on one minus zero, of course, is one.
14:34
And if there is nothing to pay back, borrow is zero. We don't need to borrow.
14:38
But if you do need to pay back, the difference simply will be zero, because we're paying this back here by subtracting it from one.
14:46
As be a zero, we don't need to borrow one minus one and nothing to pay back is zero and zero to borrow.
14:58
And finally, of course, one minus one and zero what we need to pay back.
15:06
Hence it's one and we need to borrow.
15:11
So I really encourage you to look into this example of you evaluate one one zero zero one minus one zero one one zero and using the truth,
15:16
say, Well, we've just been talking through and yeah, familiarise yourself with this one, how this works.
15:31
We're all looking now into the circuit, and the midterm message can, of course,
15:41
be used to determine and circuit for the tractor just like we did before for the half Erin flatterer.
15:45
Let's not do the algebra again. We've done this for the half hour in more detail,
15:51
but just note the simplified final equations are different just like some excuse or be excused
15:55
for payback and borrow this a little bit more cumbersome term your B or p sorry BNP or a prime,
16:03
and in brackets BRP, we can simplify a little bit more to and B and P or a prime and B exclusive or P.
16:13
Why can we use an exclusive war here and then settle this war simply because the case?
16:25
Of B and P, both being one is already handled in this term year.
16:34
Which says that around one gate, because we have the excuse of war, be excessive.
16:42
Peter, I'm already up here, so we will not need an extra gate as if we would need, if you would leave it like this here.
16:50
So again, we can put this into a circuit, of course, and different looks like some before, obviously, because it's also the same billing equation.
17:01
And we have this little bit more complex. Borrow circuit here and the subject, OK,
17:11
and then we rebuild following the same methods used for the and bit ever meaning that we simply scale up again.
17:21
However, there is a much, much simpler way to build a subchapter, and that is by using to complement so A-minus B equals a plus to complement of B.
17:32
So we need to be represented in twos complement and to complement its simply form by flipping each bit of a number and adding one on the bottom.
17:46
So this method is, of course, very attractive as we can reduce our error, which we did.
18:00
We would not have even had to do a. And do the following eight plus b's complement and asset b's complement we will obtain by flipping each bit in B,
18:05
so meaning the inverter for each bit and adding one now adding one is done simply was set in Karriem to one.
18:20
And if you only use the full errors here, you remember that we also have a carry on year on the least significant bit level.
18:29
So this gives us 2's complement of B and it gives us overall, it's full every year a plus to B, hence the output is Heyman's B.
18:38
Yeah, we didn't even need to think about how to do a subtract or.
18:49
Now that we are gradually move up to more challenging multiplication coming up next.
18:57
Now how do we multiply this work by using the familiar method of long multiplication?
19:03
And again, you may remember this from school. Twenty 21 times thirty four.
19:10
And what we're doing in here is that we go sort of.
19:16
Position my position here. So we do one times for.
19:22
Gives us four here and at the end for. Or let's look it up directly here in this equation.
19:32
We use a zero times zero plus a one time can be zero is times 10.
19:41
So meaning this here times this year, this is two times for an eight and a zero times be one times 10.
19:50
I mean this here times. This year, so this year, Times 10 gives you three in this position.
19:59
And then finally, we do a one times B times multiplied by 10 to the second one multiplied by 100 to be in the correct position.
20:11
This is two times three of six. And TIME100, of course, means six hundred here and previously times 10 means sodium eight three eight.
20:21
And then we sum up so 000 plus for giving you four three plus eight, giving you 11.
20:32
So we carry one over. And then seven.
20:39
So in this way, we can also do it for binary numbers, of course, so it's the same more or less you only use his powers of two rather than 10.
20:45
So a one and zero times we want to be zero same.
20:56
You're a A1 and be one times two to the second, rather than if you remember 10 to the second year.
21:00
And then crisscrossing a zero and b one times to an A-1 tons, b zero times to.
21:09
And finally, the least significant bits here, eight times a zero times be zero times miserable for binary digits,
21:18
we can replace the multiplication by an end and implement multiply by two, if you remember from our shift shifter with the shift left operation.
21:29
So now we're good to go more or less.
21:38
We have simply replaced our.
21:42
Multiplication here was our end, and our multiplication was two to the ends by shifting by end bits.
21:48
So you can see now we're having the same equations up here ready for a Boolean operations.
21:58
Now, if you want to put this into a circuit, of course, this means we need end gates to do all these different ends here.
22:10
Each with each other. Zero zero one zero eight zero one eight one.
22:20
We need to do the three additions here.
22:28
This is actually. Done by half errors, it's not an audit, but it's an addition, really,
22:33
and half errors are enough here as we simply need to add these two bits without any carry in.
22:43
We don't need a full error here.
22:48
Now, the shifts are simply done by putting these into the correct position of the output, so we don't need any shift register or anything complex.
22:50
We just do this by wiring into the right position of our four bit results output.
22:59
Now we multiply two numbers with two bits, and for that, we need four bits for the output and said we don't need to.
23:11
Using the same complex, we just have shifts on by wearing to the correct pitch in the output.
23:21
Now, if you want to do a four bit multiplier,
23:30
it's not as elegant as the functional design approach before we need to do with a little bit more cumbersome approach,
23:32
but it's so possible to scale up. It works in the same way, using base for arithmetic rather than based tourism magic,
23:39
which means that we ride to phobic numbers as P Q and R S, where P, Q, R and S are to build numbers then.
23:49
So we have our. PCU bloc thought of four pair multiplied with R-S, which is now for big numbers here formed up by the sequence of two two big numbers.
23:59
Times are Earth, and if you have a base for arithmetic, this sort of stays the same principle.
24:16
We now have, however, the base of four rather than the base of two am or originally the base of 10 year.
24:24
So you had our have to ensure we had our base of 10, if you remember.
24:34
The principle, however, stays the same.
24:42
We have to multiply the most significant bits here, P and R and have for two the second, then we do P and S and Q and R.
24:45
Here was what blood was four to the first, which of course, is four.
25:01
And finally, plus the least significant bits modified Q and S.
25:06
The two bit products P modulators are P multipurpose ERS, Cuban roots are in Q1,
25:12
as all those combinations can be computed using the TWO-BIT multiplier.
25:19
We just assign because if you remember, these are two bit numbers.
25:24
So for each of these, we can use our two bit multipliers, meaning that we will have for the Fobbit arithmetical already,
25:28
for two bit multipliers involved and not just scaling up by using the same lock.
25:36
Again, the multipliers before can be implemented by shifts again,
25:43
created by firing the arrows appropriately, just like we did before and put into secretary add.
25:50
Looks like this. We have our inputs no. Four bit numbers each.
25:57
And it said we need these four multipliers to do the four permutations of multiplying these two big numbers.
26:04
P, Q, R s. And then we need to use three errors to add, one thing to note here is that in this case, here at the end,
26:15
we need to use, carry out and carry in to get from the four bit errors to an eight bit error.
26:30
So at the end, we have an eight bit error that is needed, of course, like before because we have the multiplication of two four bit numbers.
26:38
And then this means that on the output side, you will need eight bits before,
26:46
if you remember we had to to omit inputs and be forward for the outputs, and it's an eight bit output.
26:51
And here you can see the wiring up is from the areas to the correct positions of the output that is 10 or eight times.
27:00
So is that unfortunately the scaling up is not as simple and it needs more hardware than just twice the hardware.
27:12
When we have the four or eight bit Edison from Two-Bit or eight bit whatever, we always just double up the hardware.
27:20
But here we have four times the multipliers and we have some more errors.
27:29
So about going larger than that, eight, 16, 32, 64 bit multipliers,
27:37
we can use the same method to design those like an eight bit multiplier from four forward multipliers and three eight bit errors.
27:42
But you need to be careful, of course, again with the wiring, the errors to achieve the required shifts.
27:50
And same for a 16 bit modification built out of four eight multipliers and so on.
27:57
Up to the precision that we need scaling up.
28:03
That isn't as elegant, but it still gives us something at hand to manage the complexity rather than fully designing this from truth table.
28:06
The circuit works for unsigned integers, of course only cosine multiplication.
28:19
We need to take care of extra hardware to see if both are negative and one is negative.
28:25
For example, again, using Multiplex her.
28:32
Now, last one coming up is division and the most challenging one, and on older systems, it was done procedurally using shifting subjects.
28:36
This process is algorithmic and can be thought of as programming. So you basically don't do this and hardware.
28:46
But on programming level, combinatorial hardware devices have been designed, but they are complex and we will not discuss them here.
28:52
For us, it's good enough that we have looked into the principles.
29:02
Who's design this all knowing that you could do this also on the programming level and with what we have done so far.
29:07
Brings us finally to the the algorithmic and logic unit, which we will just get a sneak preview no more or less.
29:15
We bundle all these bits and pieces together in a multifunction package, which gives us arithmetic and logic operations at hand.
29:25
For now, we will just have a first impression deciding and add and subtract circuit.
29:36
So no logic operations yet. And basically,
29:42
the add subtract circuit means that we have a block here where we have a functional control line that chooses if we want to add or subtract A and B.
29:47
And if you remember, we can use multiplexes to choose which of the results we want.
29:58
That was when we did the course work and less and less time.
30:08
If you remember very handy, we need, however, to multiplexes one to select if we choose A and B that is passing the subtract or B passing the error.
30:11
Remember that we need four way multiplexes here.
30:27
For four bits and the example of year we have for this subject and for that area.
30:35
But we need a second multiplex a year for the carry because both the subject and the error, of course, have a carry out.
30:41
So we have on the one inside the four bit result to choose whether we do the subtraction or the addition of this moment.
30:49
And the second one for the carry out, which means that the add subtract control line,
30:58
of course, is connected to both multiplexes such that we are simultaneously choosing.
31:05
If you wanted to add or subtract. Similarly, the Korean is also connected to both subject and error,
31:12
and this means it maybe appears wasteful at first that we do both no matter what we're interested in.
31:21
But this is just combinatorial logic,
31:27
so we're doing the subtraction and the error at all moments in time and then we're choosing which one we're interested in.
31:29
But that makes the design much, much easier. That's it for this lecture,
31:37
and I hope you're already all eager to look into putting together a manual process and getting
31:46
more complex was putting a view and things together to slowly move towards a real microprocessor.
31:53
Thank you very much.
32:02