ID: 8c955f52-5ee6-44be-9b01-adee014ccfd7
Title: Kotlin - s3e3 - Nullable Types
Category: Week3
Lecturer: Robert Chatley
Date: 28/11/2021
When we write programmes that deal with data, we often have to deal with situations where that data may be incomplete, inconsistent or invalid.
0:07
Let's look at an example where we use two maps to organise some data about people working for companies and the addresses of their offices.
0:17
In the first map, we make a link from people's names to the names of the companies that they work for.
0:26
And in the second map, from the company names to their addresses. Then we can look up different people in these maps and find out where they work.
0:31
For example, Tim likes the Apple, and Apple's headquarters is at one infinite loop.
0:41
But what happens if we try to do this for Jeff from the first map, we can find out that Jeff works at Amazon.
0:48
But when we look up Amazon in the second map, we don't have a record that corresponds to that key.
0:55
In this case, we get back a special value. No to symbolise the absence of an object.
1:01
No can be useful, but it can also cause problems. In fact, Tony Hall is one of the most famous computer scientists,
1:07
and the programming language designer who first introduced the notion of now into programming called it his billion dollar mistake.
1:14
Let's have a look at how having potentially null values in our programmes can affect our code.
1:23
Here we have the coupling code for our employees and addresses example.
1:29
You can see that we've constructed two maps one from name, two company name and the other from company name to address.
1:33
And I've defined the class address to hold the straight number and the street name.
1:42
Given these two structures, we can write a function and iterate over a list of names and then for each name,
1:48
get the company name and then using the company name lookup in the second map to get the address.
1:54
And then we could process these addresses in some way or simply just print them out, for this example.
2:00
Before we finish off writing this coding cocoon, let's have a look at the equivalent Java code.
2:06
So here's some code that does exactly the same thing, but in Java, you'll probably notice some slightly different syntax,
2:16
but hopefully you can see that the basics of what we're doing exactly the same.
2:22
We've constructed two maps one from strength to string and the other from string to address, and we've got the same data here.
2:26
Then we've got our same loop and we're going to extract the company name from the
2:33
first map and then use that to look up in the second map to get the address.
2:37
And then we'll print out some detail here.
2:41
So we'll say that a certain person works at a certain company and that their office is on a particular street.
2:43
So let's just run that and see what happens. OK.
2:50
Everything works fine, as we would have expected. Now let's see what happens if we introduce Jeff into this list.
3:00
So I'll just run the code again. This time, you can see, actually what's happened is our programme has crashed.
3:15
We successfully completed our link for Mohawk.
3:25
That's been looked up correctly, but as soon as we get to Jeff, we get a no pointer exception and the execution finishes at this point.
3:28
And the reason that we get this exemption is the we've looked up Jeff in our first map and we've got back Amazon.
3:35
And then we looked up Amazon in the second map, but we didn't have an entry for Amazon in that map.
3:41
And so we got back null as the address. Then when we came to print, we tried to access a member of address.
3:46
But because this address object was no, there was no object there.
3:54
It wasn't possible to access this property. And so immediately that we tried to access a method or a property of a no.
3:58
Then our Java programme will crash and stop executing normally with a slightly unhelpful error message.
4:04
So this is a situation that we have to deal with quite a lot in Java programmes.
4:12
And the way that we would do this is that we need to put in a check into the programme to check that
4:16
the address that we're about to deal with is not now before we try to access a property of it.
4:21
So here I would just say, if the address is not now, then we can proceed with this print statement.
4:26
And now if I run the programme again. The programme runs to completion.
4:36
It just skips over Jeff's record because we don't have the address that corresponds to Amazon.
4:44
So as long as we're careful to make the right checks in our programme, then we can handle this, OK?
4:50
And that's not a problem, but it is easy to forget to put these checks in.
4:54
And sometimes this causes programmes to crash at runtime in unexpected ways.
4:59
Let's see what happens when we do the same thing in Scotland. So here's the clean version of our programme.
5:05
I'm just going to write here the same line. So we're going to print.
5:12
Like this using a string template.
5:25
And what you see here is that as soon as I've written this line of code, we actually have a compiler error on the compiler.
5:28
Error appears when we access this property of address that's just reformat it so you can see the full error.
5:35
And it says that we have a potentially knowledgeable receive a type of address question mark.
5:45
Which is interesting. And so what's happening here is that the compiler is actually detecting the possibility
5:53
of address being no and not allowing us to write this code without a check.
6:00
And so in order to make it compile, we actually need to add in the same check.
6:08
And protect our print statement once we do this, you'll see that now the code compiles and we can run it.
6:17
And so one of the nice things about Colin is that the notion of something being potentially now is integrated into the type
6:35
system that allows the compiler to give us much more information about potential bugs in our programme as we compile them,
6:41
rather than waiting until we run them or until someone else runs them later on.
6:48
So the way that this works is that the type of address here is not actually address.
6:57
And if you mouse over it, you can see that when we get something back from a map,
7:02
we get an address question mark which we read as multiple address rather than just an address.
7:07
And that's because we have the potential with any map when you look up an arbitrary key to get back another value.
7:14
And so in Scotland, there's a distinction between normal types and multiple types.
7:21
Normal types are not allowed to have null values, so we can't have an address, which is not if there's a potential for it to be null.
7:26
We have to say that the type of it is null of the address,
7:33
which we write with the question mark at the end, and there's an equivalent Nullarbor type for every type.
7:35
So we could have a Nullarbor string or a Nullarbor list or another.
7:41
Will anything really? So this code should now compile and run successfully.
7:45
And it should also compile and unsuccessfully if we add Jeff.
7:56
Richard does. There is another approach we could take if we don't want to have to check for nails everywhere,
8:12
and that's to decide that we don't want to have any valuable types in our programme.
8:24
If I remove this check again, we'll see if we go back to the states where we have the compiler error because this address has type address question
8:29
mark Knoller will address because get might be returning us now if we change yet so that instead of calling,
8:40
just get we get would default then, as well as passing in the king.
8:46
We can also provide a default value to return in the case that he's not found in the map.
8:51
So instead of returning, no, we can return in this case, a default address.
8:56
If we do that, then we see that the type of address is still addressed in this case, not none of that address.
9:06
And now this plan is compiling, even though we don't have a null check because ghetto defaults returns an address, not an address.
9:12
And so where we can, it's useful to be able to avoid having multiple types in our code because that means we can rely on them being no, no.
9:20
And we can avoid explicit checks, which can clutter up our code. So here, Caitlin,
9:27
stronger type system is really helping us to prevent runtime errors by being able to detect potential problems
9:33
at compile time and forcing us to check for these potentially null values and to deal with them gracefully.
9:39
Otherwise, it won't compile our programme. Not all languages have such strong type systems.
9:45
And in fact, as we've already seen, Java doesn't have this property.
9:51
So when we write Java programmes, we have to be mindful of this possibility and remember to deal with it ourselves.
9:54
But Scotland helps us to remember by enforcing it in the type system.
9:59