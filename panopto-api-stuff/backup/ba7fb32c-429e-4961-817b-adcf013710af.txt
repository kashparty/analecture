ID: ba7fb32c-429e-4961-817b-adcf013710af
Title: L09 - Synchronous Digital Systems (part 1)
Category: COMP40001 - Introduction to Computer Systems (Autumn 2021-2022)
Lecturer: Lluis Vilanova
Date: 28/10/2021
All right, so hello and welcome to the ninth lecture of our course.
0:02
So remember that we just looked at using sequential circuits with flip flops, asynchronous circuits,
0:07
and we are going to at the end of it, we looked at how to use the clock signal to build the synchronous circuit with this flip flops.
0:16
And in this lecture,
0:24
we are going to go a bit farther and generalise this to build any kind of circuit that can be useful for anything we could ever think of.
0:25
And this is known as a synchronous digital systems.
0:35
So basically we are going to examine how flip flops can be used to define these synchronous digital circuits,
0:40
systems that will allow us to perform any kind of operation, including your computer.
0:47
It's basically a single digital system.
0:54
And as an example, we will examine how we can build binary counters as the simplest possible example, that of a synchronous digital system.
0:57
And that's part of it. We will see some of the trickery that we can apply to make these circuits or systems are more
1:09
efficient by using the don't care stage that we learnt in the early lectures of this course.
1:17
So just as a quick reminder, we have the dequeue flip flop that we saw, which is a synchronous because it has the input signal.
1:25
So as we saw, we can read the value, the output queue at any time or not kill also.
1:35
And then we can write into this whichever input value or that we have, but only when the clock input changes its value.
1:44
And remember that there's two possible points in time where this rate depression can happen.
1:56
We can either design a flip flop that works with raising it, just as would be the the example in this place.
2:03
So when the clock has apprising, it's over here.
2:09
We are going to be writing whatever is the output of the majority's input value, which then goes into the output as one.
2:15
Or we can have, as we saw also in the previous lecture, you flip flops that are going to write a value on the following edge of the clock.
2:26
So we we also saw that this flip flop can be expressed as a finite state machine.
2:38
And we are going to be using this figure here to signify this flip flop, even though we saw how it is internally implemented.
2:47
And this is a really, really simple example of a synchronous digital system that we are going to build on on the on the rest of these lecture.
2:57
So it just also as a reminder, we have the Jaquet flip flop that has in this case to inputs and of course, a clock.
3:09
So technically it's three inputs to for data and one input for the clock.
3:19
So with two input bids, we have four states.
3:24
And just as a very good reminder, zero zero means that we don't change the state.
3:28
So the output is what whatever we already had as an output on the previous cycle or timestep zero one is going to
3:33
reset the value and set it always two zero one zero is going to always hated to one and one one is going to toggle.
3:41
The values of the output is going to be the inverted value that we had on the output on the previous cycle.
3:48
OK, so here's our refresher for flipflops.
3:56
Now, of course, just as a quick note, we have two inputs here, but we only have two states because there is one single output, which is skill.
3:59
And the two inputs, what they define is the types of transitions that we can have, not that the states that we have,
4:11
the states are defined by the output of the circuit of this flipflop in this case.
4:17
So sequential DeGeeter circuits these all these different types of flipflops are examples of them.
4:25
Remember, this is because we are going through a sequence of states that are controlled by the inputs.
4:33
And another example that we could look at for a sequential digital circuit is a very basic digital watch.
4:40
So the watch at every second is going to change its data.
4:50
So it's going to first be in a state that displays a zero then on the Mexican state of this place now number one,
4:53
then on the next second on the state of this place, number two and so forth.
5:00
And until well, it basically comes up time using a circuit.
5:04
Now, remember the concept that I we already discussed in the past lecture,
5:10
this seems we have a clock is a case of synchronous circuit because the state changes occur at very exact times that are controlled by a clock.
5:19
So every synchronous circuit is, by definition, a sequential circuit, but not all sequential circuits are synchronous.
5:29
Remember that we also have the asynchronous sequential circuits, which would be those that are sequential circuits,
5:39
meaning that we have to account for outputs as part of the inputs, but they do not have this precise clock timing to change the states.
5:46
So what we are going to do now is that with a simple flip flop on our knowledge of combinatorial or computational digital circuits,
5:58
we will build a very general model for building any kind of circuit that we would ever want.
6:09
So this is a representation of this generic system, synchronous digital system or synchronous digital circuit.
6:18
So basically, in the middle of it, we are going to have a set of flip flops to store state.
6:28
And these flip flops are controlled by a clock, so that's going to be fine when we are reading the inputs.
6:38
Uh oh, of the flip flops. I'm writing them into the actual flip flop and of course, the flip flops also have upwards now together with these like,
6:47
let's say, a central piece, which is the memory of the system, we are going to have to other types of circuits on the left here.
6:58
We will have the state sequencing logic,
7:07
which is basically going to be a combination of circuit that takes the output
7:12
of a flip flop and applies it together with some additional external inputs,
7:17
perform some logical operation and then gets an output that gets written back into the flipflops.
7:22
And this is basically how we are going to retain our state with this flipflops and then operate on it and generate some new state that we write.
7:30
In back into the flip flops on the next cycle, so remember that the clock will have a fixed frequency like this.
7:41
So this would be our signal. Now, let's assume that in this case, we are going to be writing data on a falling it.
7:52
So here we have all the fun images in the clock.
8:02
These are all the cases where the input of the flipflopped is going to be committed
8:06
or written into the flip flops and then uploaded during the rest of the cycle.
8:11
So this means that these state sequence, sequencing logic has all this amount of time over here to perform its operation.
8:18
So since right after writing,
8:30
we know by definition that the flipflop is going to be giving its output without any kind of changing any kind of change,
8:33
regardless of what the state sequencing logic is internally doing.
8:42
So this means that even if this piece of computational logic has some variance
8:46
on its output because the signal is still travelling through the circuit,
8:54
because remember, on a physical level, there are delays and it takes time to track for electricity, to travel through a circuit.
8:59
And therefore there can be some slight changes.
9:07
But we have all this amount of time until the next clock cycle to perform whatever piece of logic we have in here.
9:11
And this is exactly as I pointed out, what is going to define the clock frequency of a computer.
9:20
We will look at the computer using this model and then we will calculate or look at the state sequencing logic that we
9:27
have to calculate how much time it would take for the signal to travel through this circuit on the very worst case.
9:36
And that's going to tell us what what our clock frequency needs to be.
9:44
So as as long as our clock frequency is exactly that amount of time, that as a clock period,
9:48
that equals the sequencing logic delay, we can have a period that is either that or larger and then we are going to be safe.
9:55
Our clock is going to be able to synchronise with the circuit.
10:04
Of course, if we chose a much higher frequency in the clock, meaning a smaller time period for the clock,
10:08
our, uh, state sequencing logic would not have enough time to stabilise it its output.
10:16
And therefore we could we would be most probably storing garbage on our flip flops,
10:23
on our separate simply would not be working because we are throwing out the window all the performances of having synchronised digital circuits.
10:27
So. This is what we would have in this mother here on the left with statements and logic, and then, of course,
10:38
we would we can also have in some cases an output logic or if we think, for example, of a digital clock,
10:46
the output logic would basically be taking the state, storing these flip flops and applying some logic so that this state,
10:55
encoded in flipflops, is translated into switching on and off different parts of a digital LCD display, for example.
11:04
And of course, if this is specific to the output of the system and is specific to the state transitions that we have for this system,
11:15
but what is important and important to remember here is that these are generic design, a computer, basically it looks like this.
11:26
And each of the logics here, the state sequencing logic and the output logic are computational circuits.
11:32
So they don't care about time. We only care about time on the flip flops.
11:38
And we are going to define a clock frequency that allows these circuits to work properly according to their delay.
11:43
So in a more general way,
11:51
we can think of that of the state of the circuit as a some kind of binary number whose beans are stored in the dequeue flipflop.
11:57
So if we have ten different bits, 10 different dequeue flip flops over here, we are basically storing attended state in our system.
12:07
And of course, the number of inputs and outputs depends on the circuit specification.
12:24
We could have a state sequence in logic that comes, of course, as many state inputs as flip flops have.
12:29
And the number of inputs will depend exactly on that kind of system that we are building.
12:36
Then what's important here, just to reinforce this concept, is that all depend on the on the state.
12:42
Of all of that, the circuit is in,
12:50
so this part over here just read the cues from each of the flip flops and performs some operation that gets Off-putting to,
12:53
let's say, the physical world. And the next date or hear the next date depends on the current state and the circuit input.
13:04
So that bit of a flip flop depends even some function that is specific to the circuit and depends
13:15
on the all the various inputs of the circuit that we had over here on the state of the circuit,
13:23
which is basically what we are recycling over here.
13:33
And, of course, given how flipflops work, the state of the output,
13:39
not the output value of a flip flip flop at some point of time plus one depends on the input that that Flipflop had on the previous time to.
13:44
So with this, we can now get a bit more specific and see how we how we can implement a binary count,
13:58
which is probably the most simple synchronous digital system that we can build.
14:05
So as I was saying, we are going to be looking at binary countries which will have just clogged,
14:14
there's not going to be an input because it doesn't have a binary counter, doesn't depend on anything outside of the state of the country itself.
14:20
There's no interaction from the outer world.
14:30
And also it will not have an output circuit because we are just going to be reading the state in the flipflops.
14:33
We don't want to show the state to the outer world just to keep it simple.
14:42
So what we are going to do, basically, is that the output is going to be a repeating sequence of binary numbers and this state,
14:48
these numbers are going to be stored in the flipflops.
14:58
So first of all, we we have to see what kind of state we need to store in our system, so for us to come to we are going to have four states.
15:04
What we represent is to complement, as we already saw, we can basically establish that we are going to represent,
15:15
as I said, four states, numbers zero, one, two and three. And then we are going to my convention represent zero a number of zero zero zero.
15:25
Number one zero one. Number two as one zero. A number three as one one.
15:33
OK, so now we know how many states we won on our system.
15:39
And this is going to tell us how many flip flops we need because if we have four states to beat or enough, so that means to flip flops in our case.
15:43
And now next thing we have to do is establish what exactly is the sequencing of states because a minority country is not enough.
15:57
We need to define what it is that we are counting.
16:06
So we could be counting like zero one, two or three and then zero one, two or three to one, two, three over and over.
16:08
Or we could be counting zero one three two zero one three, two and and so forth.
16:15
And there's many possible options here and even more if we could be skipping states or not be repeating.
16:20
So the first thing we need to do is define one specific sequence that we want to follow,
16:33
which in our case, it's going to be zero one zero one, two, three and then all over again.
16:39
I didn't want to three. Over and over, so as I said, this is four states, which means that we need to be asked to represent four states.
16:47
So we have the two dequeue flipflops over here.
16:57
And then we are going to get the output of each of the flip flops and feed it back.
17:03
As input. To that input sequencing logic, now,
17:09
we are going to have a separate input sequencing logic for each of the bits of state in the system, in the system.
17:14
So we are going to have a circuit, one on circuit to and of course, we have this external clock that feeds into all the flipflops in the system.
17:24
And of course, we can represent this as a state diagram with four states.
17:34
We are in state zero. We will then on the next clock cycle, two states in one, then we move to one zero.
17:39
To one one and finally to zero one again, and we just kept circling around this state's.
17:48
Until the end of the world. So the first thing that we are going to do once we have these basics covered with the fine we established,
17:57
what is the state that we want to go through and let's say high level or general way, informal way.
18:06
The first thing we are going to do is construct a truth table for these synchronous circuit.
18:16
This circuits one and two over here. We're going to build the truth table for them, which, of course, there's time involved here.
18:21
And this is going to be a transition table.
18:29
Now, what this transition table is going to do is show us what is the the output of the output values of the system as stored.
18:33
And they will be stored in the flipflops as a function of the previous values that we had in the system.
18:44
So the input of these circuits is going to be the output of the previous circle.
18:54
So cycle. So remember, that's the next the now columns that we already talked about in transition tables in previous lectures.
18:58
Now, it seems that with these type of dequeue flipflop, it's all one and the same, it can be a bit confusing sometimes.
19:09
So it seems for this type flipflop, the output, which we name Q is equal to the input after Gloc transition,
19:19
that the transition table will become a very simple input output to say, well, we will see now.
19:32
So let's start building these truth tables, so first thing we do, as we already learnt, is put all the inputs of the system, which is that now state.
19:40
Which so happens, of course, to be the output of the flipflops on the previous times that we have this as an input and for each one of them,
19:58
we define what the output of the circuit needs to be.
20:08
And remember the output of this combination of circuit of this.
20:12
This is not sequencing logic. Its output is connected to the input of the flipflop.
20:17
So that's why this is named the one undie two for the Flipflop one and Flipflop two.
20:22
So once we have this truth table over here, we simply construct the.
20:31
Um, Colonel, maps for each of the bits that we have.
20:37
So we can we have here that for the Daewon.
20:46
And to the on the colonel mobs and we simply translate this transition table using the colonel up form that we know already from previous lectures,
20:55
so basically we are taking all the inputs for this one output that we are generating.
21:07
And again, we take all the inputs for this one output that we are generating.
21:13
So these are the two outputs. We basically feel it fill it in very easily from the table that we already have, and then we do the circles on the map,
21:19
as we already know, to compute what is the volume equation for each of the outputs.
21:30
And of course, after building this whole integration over here,
21:37
we can realise that this equation over here can, in fact, be translated into an excerpt of Q1 and Q2.
21:43
And then in the case of the bit output with these two, we see that this is not a good Q uh, two.
21:53
So now that we have the Boolean equations and we have. That we have got from the granola bar musicians, we can now finally build a circuit.
22:06
So again, remember that for day one, which is this one over here, because this is Flipflop one and this is Flipflop two.
22:18
So this is. Q One. Day one. Did you get to remember we said that this one is Q1 Xochitl, so we take it over here.
22:28
Kiwane. And then we take. Queta.
22:44
We exhausted. And put it as they want.
22:51
So we have the first part of the circuit now, we look at the other, uh, flip flop and we see that the two is defined as not to.
22:55
So remember that the, uh, this, uh, flip flop has already two outputs, which is cute and not cute.
23:04
So all we can do is take not. Let me, uh, erase the previous lines.
23:10
We can simply take not Nuku and feed it straight back into the we don't need any additional gains because the flip flop already provides the state,
23:15
uh, the value that we wanted. So here's the circuit to implement this, uh,
23:25
state or a finite state machine or state diagram that we initially defined that we wanted to implement with our country.
23:32
So this is our very first very simple, uh, digital, uh, synchronous circuit.
23:39
And from now on, up to the point where we get to build a very simple computer,
23:46
this is just adding more of what we already know just to make these circuits do more elaborate operations.
23:51
So, in fact, we are going to start doing that in the second part of this lecture where we go,
24:02
we are going to go a bit further and build a three bit counter that does some stranger operation.
24:08
So with this, I will see you on the next part. Do you know?
24:17