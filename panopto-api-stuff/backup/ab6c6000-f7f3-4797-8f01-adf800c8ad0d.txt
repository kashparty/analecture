ID: ab6c6000-f7f3-4797-8f01-adf800c8ad0d
Title: idb-topic-25-concurrency-control
Category: COMP40007 - Introduction to Databases (Autumn 2021-2022)
Lecturer: Peter McBrien
Date: 08/12/2021
In this topic, we give a brief overview of how Sue Liability and recover entity can be maintained, which gives us concurrency control in our database.
0:02
In fact, many different techniques that can be used for this, and we're going to be concentrating on something called two phased locking,
0:15
which directly takes the idea of conflicts in transactions, analyses them and uses locks to prevent problems occurring due to that conflict analysis.
0:22
But there are other techniques that have been studied and implemented.
0:33
Timestamped and snapshots allow you to view the data as belonging to a certain period in time and transactions.
0:38
In essence, take a view of the data that corresponds to a certain time an optimistic quality control techniques.
0:48
In essence,
0:56
do nothing until a transaction commits and then analyse the operations of the transaction to ensure that there no problems occurring with concurrency.
0:56
And this works quite well with those very few conflicts occurring between different transactions.
1:06
Let's keep this discussion short. I'm going to be focussing just on two phase locking,
1:13
and the two phase locking protocol has the name to phase because it goes through a two phased approach where
1:18
it gains locks and only gains locks until it reaches a maximum number of locks and then releases the locks.
1:26
So there's a growing phase and a shrinking phase in the two phase locking protocol.
1:34
And the basic concept is that if you're going to read an object before you read it,
1:39
you must obtain a read lock at some point before you do that read and after you've read it, you should release that lock at some point.
1:46
And similarly, if you're going to write to an object,
1:55
you should have a right lock on the objects before you write to it and then you release that lock sometime afterwards.
1:57
And then there is a policy about how locks can be gained.
2:05
In particular, if a transaction guy wants to gain a read lock on an object and some other transaction has already a right lock on that object.
2:10
It would be refused, and the transaction has to wait until the right lock would buy.
2:21
Another transaction has been released and thought white rocks.
2:26
When you're trying to gain those, they will be refused.
2:32
If any other transaction has a veto override, lock on the object and hence sometimes reed locks called nonexclusive locks.
2:35
Because you'll see from this that multiple transactions can hold Reed lock at any one time.
2:46
But right locks are called exclusive locks because no transaction can hold more than one write lock on,
2:52
not object any one time it blocks any other locks. Beethoven Reed locks all right locks from been obtained.
3:00
Before going on to study this in more depth, this just consider by looking at these alternative histories,
3:11
which one of them is not a the two phase locking protocol.
3:18
Because see, the most popular answer is C. But the alternative is reasonably popular and sexy is the correct answer.
3:29
The reason why C does not maintain to face locking is because it releases the lock on a one a seven before it gains the lock on a 100.
3:38
And this is specifically banned by the two phase locking protocol.
3:51
You're not allowed to release any locks and then gain new locks afterwards whilst in Transaction
3:55
A. We have something of the looks a bit suspicious in terms of bright locking on a Windows seven.
4:03
And then I also read lock on eight one seven, then right lock on a one to seven, but that's in the same transaction.
4:09
And that's in fact an example of a lock escalation occurring in within transaction one.
4:16
And you can not have right locks refuse when you're trying to gain them for an object where the stock's already held in the same transactions,
4:23
when you has a different transaction that the right lock would be refused.
4:30
Now, let's see if these loss can prevent some of the problems that we started before now, suddenly one of them,
4:39
you can look at the other ones in your own time to consider whether they would prevent the anomaly from occurring.
4:45
So in the last update, to remind you of what it was about,
4:52
if I took a couple of transactions trying to read and write to different objects and I interleave them,
4:57
such as I had two transactions both Reading Branch 34 and then both and writing to Branch 34, the right one would be 34.
5:04
Here is being effectively lost or ignored by the combination of read and write by transaction to surrounding it.
5:13
So I can replace that right one on B34 by a lost update study because effectively the action of that right is ignored.
5:22
Now, let's put in some right looks, and we lost and to save time,
5:32
I'm going to assume that a grab a right lock before white both lead and right to the object,
5:36
which simply means I don't have to write so many operations.
5:45
And the key thing to note here is that if I have correctly locked the different objects before access to them,
5:49
when I begin transaction to the first step it needs to do is gain a lock on B34,
5:57
which will be refused because there's already a right local exclusive lock on Branch 34 being held by Transaction one.
6:06
And therefore, this sequence of operations would not be permitted by the two face locking protocol
6:16
because at the right lock or by transaction to be 34 is a conflicting lock.
6:22
Therefore, it would be too late and be delayed until the lock is released.
6:30
So transaction one will in fact be allowed to complete with the unlock of B34 containing
6:35
Cook Commitment Time and after which the transaction too is allowed to resume.
6:42
Gain a right lock on B34 and it can proceed to the end.
6:49
And so you see here what the two first locking protocol has done is spotted the fact that some problem was about to occur and caused.
6:55
In fact, they do transactions to execute serially, so transaction to try to begin in the middle of transaction one.
7:03
But because of the problems which are about to occur, is delayed until the locks could be released at the end of transaction one.
7:10
Let's just review why and to face looking works,
7:20
and the basic idea is that because you have this points where you have the maximum number of locks and it's guaranteed,
7:25
you cannot have two such points. It must be the case that if you're going to update an object, say at this point in H.I,
7:33
the value that you can to update it to must remain the same until at least this points to the maximum loss because you must have a right block on it.
7:42
And simply, if you're reading an object at this point,
7:51
the value can't change until the point that the maximum lost cause you must have held a bead lock.
7:55
And so for operations which occur later on, they can be regarded as having occurred at the point of maximum loss.
8:00
And because every transaction will have a point of maximum looks,
8:08
then becomes quite clear that you can regard the whole transaction as having executed at that point where it had the maximum locks.
8:12
And then it's right clear to see from the fact that you got two exclusive locks preventing to transactions,
8:20
reading and writing to the same objects that you get a serial execution from this process.
8:26
There is, however, one problem with two things looking protocols, and that is that they deadlock.
8:37
It's a study how reckless can occur and how it depends on little subtle changes in the order of operations about whether a deadlock can occur or not.
8:44
So starting the seem to transactions and seeing how they can into these and possibly lead to a deadlock or not,
8:54
let's suppose that the two transactions have both executed the first two operations and I'm assuming indicating lots as necessary.
9:00
So transaction one would start off by gaining a veto first on B 56 and then escalating it to a roadblock on day 56.
9:10
And Transaction two was simply getting a lead lock on B34 and escalated to a right block on B34.
9:18
So we've reached the stage now where the two transactions have both started, and in my wait for graph, I can represent that fact.
9:26
Brothers and no for transaction one and the Note four transaction two.
9:35
But otherwise, there's no refusing of lots in occurred.
9:39
Yes, and there's no problems. Yeah, let's suppose that transaction one now tries to perform this next operation, which is a read on branch.
9:42
34. Well, this is going to be refused because Transaction two has already gained a right lock
9:52
on B34 and therefore transaction one must now wait for transaction two to finish.
10:00
And this can be represented by adding into the weights for graph and arc between transaction one
10:08
and transaction to labour with the fact that transaction one wants to gain a read lock on branch.
10:14
34. Transaction two can now proceed.
10:21
And it's locked for reading and writing to be 67,
10:29
which won't be refused because transaction one has not gained in lots metal object and can then commit.
10:34
And when it commits, it will release all its locks. In particular, it will release the right lock it had on B34.
10:40
Remove itself from the graph and transaction one commences no longer waiting for any active transactions and can itself complete.
10:47
Changing things just slightly will lead to a deadlock situation.
10:59
Now the supposed transaction one executed its first three operations, gaining a right lock on beef 56 and a week lock on be 34.
11:03
And Transaction two executed just its first operation, gaining a Reid lock on B34.
11:16
Recall that multiple transactions can have a lock on the same object, the weight loss and nonexclusive.
11:22
So we have a graph of two running transactions, neither of which is waiting for the other supposed.
11:30
Now that transaction one continues and tries to write to be 34.
11:38
Of course, it needs to get a flat lock on B34, and this would be refused because Transaction two already has a Reid lock on B34,
11:43
so transaction one waits for transaction to complete.
11:54
Transaction two can then carry on.
11:59
Of course, the next thing transaction two wants to do is also gain a right block on B34, and that will cause it to wait for transaction one.
12:01
So we end up with waits for graph, where two transactions are waiting for each other.
12:11
There's a cycle in which our graph.
12:16
And as soon as there is a cycle in the works for Graph, you've reached a deadlock state where all the transactions involved in the cycle.
12:18
In general, it can be more than two will not be able to complete and you have to abort at least one of them to allow the execution to complete itself.
12:27
So at this deadlocked state is something that will happen very occasionally,
12:42
and when you're unlucky in the combination of read and write operations or execution in transactions.
12:47
And it's also one of the ways you can tell your operating over a database is implementing to say
12:54
it's locking because you'll have these occasional deadlock reports of that transaction occurring.
12:59
You have enough information now to complete the worksheet, which is on studying how debt levels can occur in transactions.
13:08
To finish this topic,
13:18
let me just remark that the whole combination of maintaining sewer ability and recoverability of considerable load on the database,
13:19
and sometimes it's decided that not all transactions need to maintain at least civilise ability.
13:30
It's particular if you want to have some transactions run perhaps more speedily, but they only need to have approximate results, say,
13:39
by gaining a say average figures of the value of transactions that occur for your bank
13:47
or estimates for the total amount of money that's new for the bank during the day.
13:52
And you do not necessarily need these things to be completely accurate at the time.
13:57
You can allow transactions to execute without maintaining all the concurrency control.
14:01
An escrow provides statements which allow you to alter the level of currency control to let your transactions execute more efficiently.
14:08
But, of course, with the possibility of errors occurring.
14:19