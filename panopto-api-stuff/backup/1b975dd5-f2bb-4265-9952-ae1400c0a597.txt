ID: 1b975dd5-f2bb-4265-9952-ae1400c0a597
Title: K2J - 7 : Switch Expressions
Category: KotlinToJava
Lecturer: Robert Chatley
Date: 05/01/2022
In this section, we're going to have a bit more of a detailed look at Switch and how switch expressions and switch statements work.
0:04
So here I've made an example where we're going to just do some simple examples about
0:12
months and we're going to determine how many days there are in a particular month.
0:17
I've created a tie here for months, which is an enumeration. We saw this briefly in Kopplin.
0:21
And so in an enumeration is just a type where we predefined what all the objects are.
0:27
So we can't create a new month. These are all of the months that can and do exist, so we predefined and enumerate those in the tight definition.
0:33
So what we've done here is to say that we've just picked a month and we're going to pass it into this function days in.
0:44
I'm not going to pretend it's the number of days in that particular month. So one way that we could do this is to use a switch expression,
0:51
which is very similar to a when expression in Scotland so we can return switch
0:59
on the month at some basis and then we could say in the case that it's January.
1:06
Then we use this arrow, and then we're going to say that Jan has 31 days, so we'll just pretend that.
1:15
Then we can do the same for February, which has 28 days and so on.
1:24
In fact, intelligence can help us here because it knows that this is a switch expression and it's a switch expression over this enumerator type,
1:30
and therefore it knows that there should be branches in the switch for each of these 12 fatties, and it can actually generate ice for us.
1:39
Let me just have to go through and fix up the numbers. And finally, we need a semicolon here to complete the expression.
1:50
So if we run this programme, hopefully we should see the results. OK, that's good.
2:11
September has 30 days we can actually tidy this a little bit because you can see here that intelligence giving us some more suggestions.
2:19
It says that there is a duplicate branch that is there's more than one branch that does the same thing, returns the same value.
2:28
So there's a number of branches that overturns that he won. So if we pick this one to start with.
2:35
You can see that its suggestion is to merge with the case for January, so we can do that just by putting the next family after a comment.
2:42
So in the case of the monkeys, either January or March will complete this branch and return thirty one.
2:50
We can continue to do that. For all of these other cases.
2:56
And that gives us this rather shorter expression. Just run it and make sure that it does the same thing.
3:21
And still does.
3:30
And then the other thing we could do is to say, well, let's take the most common case, which is this one and just treat that as defaults.
3:33
I mean, typically we'd put the default case as the last option.
3:42
So here we've got case February 28. These four months 30 and the default is 31.
3:45
Good. So he can use his switch expression with enumerated types, we can use it with strings and we can use it with integers or channels.
3:57
We also can't put an arbitrary expression here. We can only match on particular values.
4:11
An alternative is to treat speech as a statement rather than an expression.
4:22
So perhaps we could change this so that it doesn't return a value.
4:27
So something we could do here is to declare a variable for the number of days and then in each branch of the switch, rather than returning a value.
4:32
Let's assign something to that terrible.
4:42
So in this case, let's assign 28 in this case 30 and in a default case 31 and then down here return the value of that variable.
4:45
Here, we actually don't need this semicolon because now we don't have an expression.
4:59
Now we just got a block and we've got a number of different statements that we might execute.
5:03
Let's just run that one more time just to make sure it's still doing the same thing. Yes, it is.
5:09
Let's get. There's one more option, and this is what you'll see in a lot of more traditional Java code,
5:17
as the Switch expression with the Arrows has only been introduced more recently in older versions of Java.
5:29
You'll often see a Switch statement where this is a colon rather than an arrow.
5:36
Consider this might occur here, and this might go here.
5:44
So if we run this programme, you'll see that something slightly different happens.
5:54
OK, so this time we got the wrong result. September has 31 days.
6:04
That's perhaps not what you were expecting, given this code. So the reason that that happens,
6:09
and perhaps a reason that you might want to favour the new style of switch expression
6:15
with the arrows is that this style has a behaviour that we would call fall through.
6:20
So what happens in this case is that we have the month of September we switch on that month.
6:25
September is not equal to February, so we don't match this branch.
6:32
Then we do match this case and then we execute this line.
6:37
But then we continue and we also match this branch.
6:42
And then we do this line. So this is the final assignment that we do, and then we return thirty one, which shows the end result that we got.
6:46
So this fall through behaviour means that you can match a case and do something, but then continue and match later cases as well.
6:55
Sometimes that's useful, but more often than not, we might want to prevent it.
7:03
So what we need to do if we want to prevent it is to have another segment here where we say,
7:07
if we match this case and we have assigned numbers to it, then we break and we break out of this switch and carry on with this line.
7:12
So we don't try to match these cases. Let's do the same here.
7:22
OK, so now we have the right behaviour again, because what we're doing is matching September,
7:45
executing this statement and this statement, which caused us to skip the rest of the Switch blog and go down to here.
7:51
In fact, I don't need a break on the last one because it's the last one.
7:59
And so there's nothing further to pull through. So this is a style that you'll see in quite a lot of existing and long standing Java code,
8:03
so it's important to know about it and to recognise it and to know about this full screen behaviour.
8:15
But if you're writing new code, I'd recommend to you to try and use the new style with the arrow and the switch expression when you can,
8:21
because then you don't have to worry so much about the break and the full three.
8:28