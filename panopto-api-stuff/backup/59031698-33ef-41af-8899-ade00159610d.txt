ID: 59031698-33ef-41af-8899-ade00159610d
Title: L13 - More on Registers, Multiplexers, Decoders, Comparators and Wot-Nots
Category: COMP40001 - Introduction to Computer Systems (Autumn 2021-2022)
Lecturer: Bjoern Schuller
Date: 14/11/2021
Now, welcome to the next lecture lecture 13 on registers, multiplexes, decoders, co-operators and whatnot, so what else?
0:01
So we will be talking a little bit again about or no actually be talking about functional design.
0:12
That means that after case maps or maps, what's next? We already know how to design both common combination and sequential circuits.
0:20
So with or without a clock signal and with or without flip flops involved, what else is there to learn about digital circuits?
0:28
Well, actually, most practical digital circuit design problems are just way too large to be solved with minimisation and case maps.
0:38
If you remember, we said that was a few flip flops, more the fun and safe machines.
0:47
For example, the assignment of numbers to the states sequences becomes notoriously exploding, so we have to think about something better.
0:53
And our tool of choice here is to use digital building blocks,
1:06
so re-use sort of templates for smaller scale solutions and then from those templates, build up and scaling up.
1:11
We will call this usage of digital building blocks.
1:23
Functional design and functional design will accompany us throughout today's lecture, but also throughout the following lectures.
1:27
This is like super useful.
1:35
Not going through a large large came about optimisation, but really using very small templates and reusing them to scale up,
1:37
and we will be seeing that our tool of choice here is an enable line.
1:46
We will be adding a lot of enables and engaged gates for that reason and then builds up from smaller pieces to larger circuits.
1:50
Now, let's, however, go back to registers and then we will be doing register transfers,
2:02
register transfers are very, very essential and our microprocessor to be built at the end.
2:08
So leading towards actually putting together a computer registered transfer will be a key thing in making that happen.
2:13
So the register to remind you is the most fundamental digital building block of a digital computer.
2:23
It is an audit group if you're a member of single bit flip flops like the GQ type flip flops with one clock signal connected to all of them.
2:29
So that's a synchronous we have here the docu flip flops side by side.
2:39
At the D Input here, we have the register input for each bit of the Q output of the flip-flops,
2:45
we have the output for the bits of the register and you can see the clock signal here is given or provided to each of the flip flops,
2:54
so it's fully synchronous. Each flip-flop has the same clock signal.
3:04
No registers of a convention, the bits of an end bit registers.
3:11
No, it's from zero to and minus one. They can be interpreted as a numerical value, for example, summing up from small and to capital.
3:17
And so the capital and number of fits in the register is two to the ends small and times B of N or B of A. Of course,
3:28
the bit zero one in that position.
3:41
So that is one interpretation, but it is important to remember that bits can be interpreted in any way required by your application or use case.
3:47
You also have shorthand notations for registers and you can see three of the most common ones.
3:57
So just this box here are four saying that it is a four bit register in this middle case.
4:02
Here we have the bits. Sorry.
4:09
Now that is a phobia register, but that it is registered them before. Here we have are two of the register.
4:17
Two was the bits on the button here.
4:22
Zero two three four two seven So this also gives you an indication, which is the least significant bit and which is the most significant bit.
4:25
And how many bits are inside really register registered seven year on the right hand side also follows this principle,
4:33
but no, it is explicitly giving place orders for each bit here in the notation.
4:42
Registers can contain either data or control bits when we put together a microprocessor,
4:50
we will be seeing that, for example, commands to be executed, of course, can be put into registers.
4:55
Then it's controlled bits, really. Or if you read something from memory, we will be putting a memory together later on.
5:01
We will also be putting memory into a register to be accessible to the microprocessor and a specific moment in time for operation.
5:07
No register transfer operations asset or a fundamental operation in any processor to transfer data from one register to another.
5:19
Imagine you have, for example, two registers A and B, and you're calculating something, then you're doing register transfers.
5:26
We'll be seeing this when we put together the algorithmic logic unit later on and register transfer.
5:34
It's doing the following things. Select the input. Register the source.
5:40
Select the output. Register the destination and then transfer data from the source.
5:45
Register to the destination register. Now, obviously, as long as you don't do the actual transfer, you could change the order up here,
5:50
but you select the source of destination and you do the actual transfer when that is ready.
5:58
We write this was a very intuitive notation. The destination register here is fed from the source register,
6:03
hence this little arrow here pointing from the source to the destination, indicating that we are.
6:12
And transferring from source to destination. Now, to do these operations,
6:19
we can think of a schematic diagram first before replacing the schematic parts with actual circuitry like we have done last lecture,
6:25
for example, with those switches, if you remember, we use the multiplexes to do that today,
6:34
as you may guess, already we'll be using multiplexes again, but scaling up.
6:39
But no to this schematic diagram we have here eight registers numbered from our zero to our seven.
6:45
We have each register, have a couple of bits, so we have this line.
6:55
Here was an RN indicating that it is not one bit, but several bits.
7:01
So it's a set of end wires, a bus, we call that.
7:05
So if you put together a couple of wires, we call that a bus one for each register bit.
7:09
Mm-Hmm. So for example, this could be an eight and an eight bit computers 16, 32, 64 and 64 bit computer and so on and so forth.
7:16
Meaning that the register in such a case would have 64 bits inside and 64 flip flops.
7:23
And those 64 flip flops, of course,
7:30
all need to be put together into this bus to then be able to select this register and wire the bus, feed it into another register.
7:32
So we have two switches here. One here to select the source register on the right hand side and one here to select the destination register.
7:44
Let's start with the easier part and the source register in the scheme. Here is a purely combinatorial thing.
7:53
We have no clock involved. We just need to switch here to choose the register from which we want to transfer.
7:59
And then we have.
8:08
The other side here, the destination register selection again was selecting one of those registers, but we're feeling the clock signal into this.
8:11
Then why? Because we have dick flip-flops and was a falling edge of the flip of the clock signal.
8:23
If you remember, it will read and store from input D and to its Q value the new values and hold that and the flip flop.
8:30
OK, so that's up now into putting this into actual hardware that we can use,
8:42
and we start with the right hand side, the easier part selecting the source register and we do this,
8:47
as you may have guessed again by multiplexes, like we did with our shift register last time,
8:54
what we needed to switch between parallel input or serial input.
9:01
At first we had a two way multiplex at first,
9:05
then we extended that for parallel serial plus plus shift like left shift right operations and we went up to a four way multiplex or.
9:10
Now what we need is one multiplex for each bit of the register,
9:23
so this is not a single multiplex here, but we really need one per bit in the registry.
9:27
In other words, if you have a 64 bit register, we really need 64 multiplexes.
9:34
That's important to memorise. What we are having here is a four to one multiplex, sir.
9:39
This would mean that we can so far choose between four different input lines.
9:49
But you remember we had registered zero up to seven, so we would actually need to choose between eight different ones.
9:57
And now we come to the actual functional design approach to the scaling up from elementary building blocks.
10:04
This here is our building block. That's a four way multiplex over a four to one multiplex.
10:13
So we're choosing from four potential inputs one to be followed.
10:20
If you remember we doing this with these two control lines here.
10:24
Zero is one, each of which is presented not only gated and gated or inverted to these gates,
10:28
which is a gating part here to select which of these is put through at any moment in time,
10:37
meaning that only after this 18 year, one line here is active at a moment in time,
10:44
and hence we have an or gate again to sort of collect all of these different lines and put it through to the output.
10:50
We can see this in this truth table here.
10:58
First of all, we have this enable here, and this is exactly what will allow us to scale up, but we'll see that in the next moment for now.
11:01
Enable zero means, of course, that we don't care about these select inputs.
11:10
The output will always be zero simply because Enable is gated with this and gate here.
11:14
Once enabled zero, the output will be zero. However, once enablers one, it means that we are enabling to follow whatever happens here,
11:20
and the output will be what is coming from from over here and now as the select lines choose one of the four inputs here.
11:30
It means that zero zero gives the output a followed and zero one be followed and so on and so forth.
11:40
So we're selecting with those which one to follow. And again, it's done by these.
11:45
Three way. Three input and gates, so one input being the extra line to follow.
11:53
And the other two inputs being at zero and as one as an input in different combinations of inverted and not inverted to select only one at a time.
11:59
Now, what I need you to remember is this enable you? This is what we need to scale up.
12:10
The Enable zero means that the output is zero and able being one and able to actually use this kind of circuit and follow the input.
12:16
Now, in the next step, we do the actual scaling up. We use this building block of four to one multiplex to lead to an eight to one multiplex.
12:26
And that's what we need. We have eight registers are zero two R70 seven, if you remember.
12:38
And we do this by using this enable trick if you wish as another input line here.
12:43
So just like the other two select lines here representing at once inverted ones not inverted to the enable inputs of our four to one multiplexes.
12:49
So we have two four two one multiplex is use.
13:01
This is the one you know from before and ABCD. Now we have to give new names here FTTH, but it's the same circuit as up here.
13:05
And because we need to choose one of eight lines to follow,
13:13
we will need another selection with select from a two and this election bit is given one's inverted.
13:17
And once non inverted to these two one multiplexes to their enable line.
13:24
So in other words, if selection too is zero, the upper.
13:32
Multiplex enabled, and it will follow one of the four lines ABCD if selection of two one.
13:38
The lower multiplexes will be enabled while this one will be disabled and it will follow one of FTTH.
13:46
So you see, we now have really scaled up from a four to one to an eight to one behaving the same way.
13:54
We have one more selection line.
14:00
And of course, you can already imagine that we can put this as a larger box so we could put here around a box again saying this is an 81 multiplex,
14:03
so we need to add new and able to then be able to scale up from two thirds to six to one, for example.
14:12
And we do this over here. You can see here we have another enable and enable us always realised by an end gate,
14:19
as you have seen already in the last circuit at the final output.
14:26
And we put another end gate here and this enable here enables or disables the output to to do whatever
14:30
comes from the previous output here or to follow what has been arriving from the previous output.
14:40
Of course, you could do an 81 multiplex also at gate level. But of course, it's much, much easier to scale up this way.
14:47
And we will be revisiting this today a few more times.
14:54
But remember, the principle is always we scale up from a small, simple circuit by adding an enable.
14:59
The Enable is done with an end gate close to the output or at the output.
15:07
And then this enables input will be used for the actual upscaling for the next higher degree of complexity.
15:13
While presenting it inverted and not inverted to two building blocks, we combine to build up a twice as large one.
15:25
Right. So that is the multiplexes here.
15:36
So this last circuitry now simply written as a two to one multiplex.
15:41
For now, we simply put in a bill as high, so it's always enabled.
15:48
But with this enabled,
15:53
we would have the opportunity to later on extend our hardware to a 16 bit processor by simply giving away another eight to one multiplex.
15:55
And this further as three year. We have the.
16:02
Registers here and now we have the circuit for a bit, I shown here.
16:09
So for an eight bit register, we would eight times.
16:16
If you remember, I need this kind of circuit for a six image register, 16 times and so on and so forth.
16:19
So this is the actual. Selection of the source register.
16:26
And that makes us move now to consider how else we could be using the multiplex.
16:33
And that has something to do with your coursework.
16:40
If you could have used a four to one multiplex or your assessed coursework would have been kind of trivial,
16:44
really say you need a exclusive or B for the combination of the control or intellectual lines?
16:50
Zero zero. Let's say you would need to be as a combination for the combination zero one for these select.
16:58
A prime and B for one zero under control and could a prime or B for one one.
17:07
And no, that a excuse for B equals A and B prime or a prime and B and a prime or B equals in brackets A and B prime.
17:17
Prime. Giving you this and simply using a multiplex here to choose which combination, depending on the sea zero one two two two output here,
17:29
and you simply put the circuit here in place to realise these combinations that thought maybe it was an easy one.
17:44
B four zero one. So you can see in the B input line here we simply follow B.
17:52
A prime and B for input C here.
18:01
So we're having a prime.
18:09
And B and so on and so forth.
18:14
Basically, you can look into this, but you will see that it's these logical combinations here or Boolean expressions.
18:19
And what you're doing with the multiplex is that you choose which one of these to take.
18:27
So after hopefully having done the coursework and seeing this,
18:35
you can probably believe that saving time is worth consideration and of course, it saves a lot of money.
18:39
Also, if you would have had to pay for doing your coursework. Now we need to load the destination register.
18:51
So far, by using the multiplex of you have been able to select the source register, whose contents are fetch back to the inputs of all the registers.
19:02
But in order to complete the transfer, a clock pause must be applied to the destination register and of course, only to that one.
19:12
No clock was hence should be applied to any other registers,
19:19
so we're using some registry selection to then apply a clock pause or a clock following arch,
19:22
for example, particularly to one register, only to then load the data from the selected source.
19:29
Register into that register only. Now, Woody Multiplexed can be used to switch a clock plus on one out of eight lines.
19:36
So we will be now needing a multiplex or it has, of course, again three selection inputs because we have to again choose one out of eight registers.
19:47
Hence, we need three selection lines, and it will also have an enable input to be able to later on scale up,
19:55
let's say, to 16 bit versions and eight outputs.
20:03
So here is two to four demand picture. You know this from last lecture as a binary two honorary converter,
20:13
if you remember binary two honouree means that whatever the binary input here, only one of the outputs at any time will be one.
20:23
So we have one one one one here if you have zero zero zero one one zero one one and also this invitation here.
20:32
This is again done by presenting the select lions, not inverted and inverted to four indicates here to gauge.
20:43
We now use again three inputs and gates, but this time not to follow an input here.
20:52
This time we use it to also integrate enable such that we are able to scale up the enables help to a larger multiplex, as we will be doing next.
21:00
The multiplex that can also be called a decoder. And with this kind of deep multiplex so we can select one output at a time only.
21:15
And then, of course, as you can imagine,
21:27
we will also need the clock signal and an engaged after this to present the following apps to only one selected a destination register.
21:28
So let's look into a truth table to describe what we just said in a more formal way and above zero means that the output will always be zero.
21:41
Of course, that's what the Navy is all sustaining for. We're disabling it sort of by setting enable zero.
21:53
This means that we do not care about the combination here for the two select lines.
22:01
The output will always be zero. However, if we do enable it said we have a binary two honorary converter,
22:06
and this means that only one of these output lines at any moment in time can be one and will be one.
22:14
So we're decoding from a binary number to this kind of representation,
22:22
but we say this is zero zero zero one, the next and so on and so forth until it long one.
22:28
This line is one. So again, if Enable is set to one, exactly one output is one.
22:33
Meaning there is always one one and only one is one. The binary number on one and see what determines which of the two goes to one.
22:44
And so if you multiplex or decoder. Now, this being a two to four, we need, of course,
22:51
all to scale up again to three two eight three two eight because we need three bits to encode eight different.
22:58
No registers on our case. And again, we're using the enable trick.
23:06
So we're having an added input line here, the three rather than two two x the multiplex.
23:15
And as always, we present it one's inverted ones, not inverted.
23:25
And again, like with the multiplex, are also the DX multiplex, the case we presented to the enable inputs here.
23:29
This way, we're scaling up from two to four to three to eight multiplexing, and of course,
23:38
we want to be able to consider this a new, larger building block three to eight multiplex as a whole.
23:44
So what we need to add is another new and able line to be later unable to
23:51
scale up to a four to 16 multiplex or so and able is unfortunately requiring,
23:55
in this case, eight and gates.
24:06
So it's a little bit expensive for consuming gates, but we need to get each output line here individually with the new and able year to realise that.
24:09
Meaning that we're able to set any output to zero if an able and zero and that we follow the correct one, if enabled, it's one.
24:25
So now we have both sides, we have the source selection,
24:37
we have the destination selection and we can do a complete register transfer circuit for the sole selection we have or a multiplex.
24:42
And for the. Destination selection, we have our multiplex.
24:53
And one thing that is of interest here, maybe to to watch,
25:02
is that we use here for the enable input one because we're not using something higher a
25:08
bit or whatever or more waste or even more way like 16 at this moment of the circuit.
25:17
Here, however, you can see we're connecting it to the clock signal.
25:24
Hence, we don't have to use any gates as previously suggested for each output line here, but rather we're in a very elegant manner.
25:28
Connect the clock to the enable of this into one hour or three to eight.
25:40
The multiplex of. To do the trick that we do, the actual transfer was the clock falling at.
25:45
So we can select a register. As a source, one as a destination, and then we will do the actual swap or transfer.
25:59
And let's look a little bit into other uses for decoders.
26:11
We have already seen that multiplexes are very powerful circuits and indeed so are also the multiplexes of the multiplexes.
26:15
We could, if you remember, simplify our homework or coursework.
26:25
But now what can we do with a four to six multiplexes?
26:33
So scaling up from two of our three to eight multiplexes, we can put together four to 16?
26:39
Do you multiplex or decoder? And you will see this will help quite a lot more on doing the homework very rapidly or the coursework.
26:45
So we have now for select inputs here and of course, 16 outputs.
26:53
Again, remember, this is a binary to unwary decoder,
27:00
so any only one of these lines will be one at any moment in time, depending on the selection, of course.
27:05
Now, let's assume we have the same coursework, and for C zero three one zero zero, we needed to do a exclusive or B.
27:15
So what we do know is the trick is that we use select two and three zero and C one,
27:27
but we're using a and B as the other two inputs into our four to six decoder.
27:33
So, for example, an s, one, B and zero. So we're using not only the control lines as input to our four to six and CO two, but also our A and B here.
27:39
And then we can do a choose table here like like this for C ones zero.
27:49
We have to provide the function exclusive or B. And if you do the truth table here for A and B, we need to write the desired output here.
27:53
Zero one one zero Because this resembles a exclusive would be next combination
28:04
is C zero is one C one two zero and we put the a b here such that the output.
28:11
Follows B or is B, so if B is one, it should be one.
28:21
Be zero, it should be zero. So we're here, we have our bias, and I would put.
28:29
And so on and so forth next in line is a prime and B for the combination, one zero for the seas, and we're simply doing this here.
28:33
Hey, inverted and B gives us zero one zero zero.
28:43
And finally, a prime or B, so you get the picture was simply writing the truth table of what we want to see output
28:50
such that we get the functions we need here for the combinations of our control lines.
28:57
Good, but how do we do this now, all that we need to do is have an output that is zero or one.
29:02
So we could actually do the following. Again, we add a big, big or gate here to have one or all of these collected sort of again.
29:11
And now we cut. Wires, or we do not connect all of these such that they fit these.
29:25
Zero's and one year. So the first one here is cut because we have a zero here in the next to our connected.
29:34
The next two are cut because we have zeros here. The next one is connected and so on and so forth.
29:45
So these red lines here fit two to this column here.
29:52
And as you remember, it's a binary to unwary.
29:58
Circuit the four to six in the court of meaning only one at any time is one.
30:03
And those are forced to be zero.
30:10
These can be one, but only one of those can be won and hence through this gate we get exactly this output that we desire.
30:12
So the demoted blacks, who by that is a midterm generator and in such a way you can do your sorry your homework in a few seconds,
30:23
let's say in 30 seconds or you need to do is write down this truth table.
30:33
You use a four to six decoder and all gate and connect the right wires here.
30:37
Now this brings us to another essential function that is comparing two registers.
30:49
Basically, it's what gives the computer intelligence because without if, then you can only do continuous input output processing without branching.
31:00
So you wouldn't have any kind of conditional operations.
31:11
Hence, you would only do some well known intelligent processing of labour.
31:15
Now this is what actually leads to whether computer intelligence, of course,
31:21
is far off from deep learning or something like that, but it is needed to be able to do something depending on the condition.
31:27
So computers implement one of the most important operations that computers carry out because it said without that no conditional branch,
31:35
they are at the centre of decision making because they are able to do that conditional on decision making.
31:43
However, a simple forward collaborator will have nine inputs and outputs.
31:51
Because we will have to for bit bullion numbers to be compared.
31:58
Hence, we have two times for resulting in eight inputs, and of course, we want to have an an able to be able to scale up.
32:05
So nine inputs and three outputs for a greater be equal would be a smaller B, if you would if you were to do that.
32:13
We have. Nine inputs, three outputs, meaning two stable, that was 512 entries, so a huge piece of work.
32:23
Of course we know thinking of can we do this with functional design? Can we somehow start from a basic building piece and scale this up?
32:35
But before we do that, we realise that came are kind of useless.
32:42
Imagine we're scaling up to eight bits or six 64 bits, how much this will become large.
32:48
So let's look at Boolean algebra next. And if you were to find if a is greater than be,
32:54
we can go down from the most significant bit to least significant bit and compare them bit after bits and for a to be greater than B,
33:02
it would require that a three. So in our case,
33:12
the most significant bit is true and B three isn't so the most significant bit is high for of from from a from a billion number a while.
33:15
At the same time, it isn't high value for B.
33:26
Then, of course, A is greater than B because in most significant bit it's true, but but only for a not for B.
33:30
Of course, that's not the only possibility for it to be larger.
33:39
So the next in line would be they are the same because that is the other case here and we would have to.
33:43
Look at what's next. So next is or they're the same three and be three or a prime MP, prime, so A and B are the same.
33:54
And the most significant bit and a.
34:06
To the next in line is true, but be true isn't.
34:10
So in other words, we're going from most significant bit down to the least significant bit seeing if if it's true and isn't,
34:15
if they're the same with Typekit for the next most significant bit and go down all the way to the least significant bit with this expression.
34:24
This is cumbersome already for four bits and you see Boolean algebra won't do the trick either.
34:35
So what we can do next is, of course, to the functional design approach.
34:43
And what we would want for that is a very simple building block and the most simple one we can think of, of course, as a one bit comparator.
34:50
And then we want to scale up from the one bit contractor to an end bit arbitrary lengths, a bit comparator.
34:59
So let's do that one bit cooperative first. One bit contractor is fairly easy.
35:05
You would say, let's do a truth table here. We have a here zero one and be here zero one.
35:10
If A and B are zero, it means that A equals B, obviously.
35:16
If a is one and be a zero as greater than be, if bowever is one and a zero, we have a being smaller than B.
35:23
Finally, we have a or B here. In the case of one one, that's not too important.
35:35
If you don't, you can think about this.
35:43
Why A or B, but you can almost imagine it's again a equals B, your writing, your A or B to show that it's like an or and and then not an X or.
35:45
So a larger than B means A and not be and Boolean expression, a smaller than B means a not and B and equal in B means a prime and b prime or Amby.
35:59
I can put this into circuitry here. So. A and B.
36:16
Put together by these ends here, A and B inverted would be this case here a greater than B, so this would be the output line for a greater than B.
36:22
Then we have a smaller than B for a prime and B,
36:38
so we're going to convert it into this and get and share directly into this market and have a smaller than B.
36:47
Now, what about the last one?
36:55
Do we need more circuitry from the input side or can we simply use the fact that if it's not greater or smaller, it has to be equal?
36:57
And of course, we can use that. You don't need to come from the input side, but we simply say if it's neither greater nor smaller, it has to be equal.
37:05
Hence, we are having here an Aldgate and inverted such that we say it's Nora and we have a equal view that way.
37:16
So this gives us actually exactly what we wanted. We wanted a.
37:29
One bit, comparator. And.
37:36
Of course, in order to do our functional design approach, we again do need and enable input as an additional input.
37:43
Otherwise, we're not able to scale up. We will drop the smaller B output.
37:51
We don't need all three, meaning of course, we could also drop a equal B and not do that.
38:00
But this is simply more elegant, as you will see in a second.
38:07
So we don't need three outputs. We keep a greater B and equal B. To simplify the circuit, but we're not adding and able,
38:12
and if you remember enabling means to an end gates at the output connected to an able and connected to the original output lines.
38:21
So we having two more and Kate's it in relation to our previous circuit, so we're cutting this lower line here and we have these two more engaged.
38:32
If you were to keep a smaller bee, it would basically and another engaged for the enabling gear, so we wouldn't need another end gate here.
38:42
So by disrespecting that or cutting it, we're saving one end gate.
38:50
Now comes the scaling up. And the trick here will be that we will and it cascaded way, enable the next comparator in line,
38:59
going from more significant bit down to least significant bit. In the case that the most significant or next most significant bit are equal.
39:13
Whereas if a is greater be,
39:24
we immediately can say that A is greater B overall because we're going down from most significant but to any significant bit.
39:28
In other words, like we did in the Bulleen equation beforehand, we.
39:36
Go for a more significant bid, checking if it's greater, if it is greater than the whole billion number is greater.
39:43
But if it is equal, we're enabling the next comparator to see if the next most significant bid should be greater,
39:51
if it is well for them is greater than be.
39:57
If not, we enable the next one.
40:02
We do this down to the least significant bit, if the least significant bit still should be equalling be, then there are the same.
40:05
And if you need a smaller bee, we can still add another gate here at the very end.
40:15
But we don't have to have the kids here to enable each individual co-operators a smaller bee.
40:21
So we're saving a couple of hand gates, but only putting this F.D.A. again.
40:28
And of course, we're having a big audit here again, depending on the length of our of our words.
40:34
And we need as many co-operators as our words have bits.
40:40
And hence this Big Oil gets collects all these a greater billions lines here to
40:44
put them through to make a decision on the world level of these two numbers.
40:51
So, yeah, hooray for functional design.
40:57
We're now able with the very basic circuit complicated circuit at one bit complicated circuit to do and bit co-operators no became.
41:00
It's no boolean expressions. And I hope you have seen today and you've gotten to cherish functional design.
41:10
We have been scaling up multiplexes, we have been scaling up to multiplexes and finally operators.
41:20
The other thing that you saw today, again, is the power of multiplexes and in particular and multiplexes as midterm generators.
41:27
You could do your homework in a few minutes and finally 30 seconds with that.
41:35
So I hope you could enjoy today's lecture and the benefits we're seeing from multiplexes to multiplexes and functional design.
41:41
And we already got intelligence sort of in our computers with our comparison.
41:49
Thank you very much and be excited about the next lecture.
41:55