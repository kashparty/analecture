ID: ed2d5cbe-574f-43a2-9ad8-ade00159272a
Title: L12 - Registers
Category: COMP40001 - Introduction to Computer Systems (Autumn 2021-2022)
Lecturer: Bjoern Schuller
Date: 14/11/2021
Now in today's lecture, we will be talking about registers,
0:01
no registers are very essential building block of computers and then at the end of this course, we will be building a microprocessor.
0:05
You will see that registers are really what we will need all over the place now and set in a central processor.
0:14
They are widely used in computers, the registers and you will have met or will meet them.
0:22
Also, in other courses like the architecture course, there are just some examples of the classics and address register data registers.
0:29
The programme counter where you have the next instruction stored or the stack pointer and many other registers.
0:37
So registers are essential, and we will be looking into the known sighting was the state registry of use,
0:47
the register and our synchronously sign, if you remember in the last lecturer's to restore the state of a finite state machine.
0:55
So remember, we have been going around in circles for counting up from state to state or when we were looking into the traffic light example,
1:02
going through the different phases of the traffic load we had to the states of the funded state machine.
1:11
And you can consider the set of flip flops that we had been using as a registered.
1:16
So that set of end flip flops could store an unsigned integer up to two to the ends.
1:23
And basically, we had a set of flip flops like here side by side triggered by the same clock signal,
1:29
so they were synchronous, hence the name of synchronous circuit.
1:38
And this was sort of our stage register flip flops encoding the state of the finite state machine.
1:42
So. Now we will look into other uses of such a set of flip flops in a synchronous manner.
1:49
And for that, let us first look into parallel data now inside a computer, data is organised in a parallel form,
1:59
meaning that you have several lines having the bits, for example, of a byte or of several byte running parallel codes to speed things up.
2:07
Does a data register that contains, let's say, 32 flip flops will have a common clock and all 32 bits will be set at the same time.
2:19
That is, of course, parallel data processing.
2:29
However, for communication with external devices, for example, see what data is used in which the bits of a 32 bit word are sent one after the other.
2:32
You all know what such a serial bus for communication with the external periphery that is USP, the universal serial bus, for example.
2:43
Basically, you do not have many wires put together side by side, which could also result in electromagnetic interference.
2:54
But rather than that, you have one line and you send the bits one after the other over this line.
3:01
And that makes it clear that if you work inside the computer with the parallel processing,
3:07
but with the outside world, we communicate with serial processing.
3:14
We somehow need to go from one data representation to the other data representation, and that is what we will do now.
3:17
So serial to parallel conversion so the registers are used to convert data from serial form to parallel form.
3:24
Now, as we have a couple of flip flops put together side by side in a synchronous manner, so wired up to the same clock signal of the clock input.
3:35
And if you remember that each successive bit as read on a falling clock edge, we can draw this as a graph.
3:45
So here we have the clock signal. The time goes from left to right.
3:52
And this is, of course, zero and one for the clock signal on the clock falling edge.
3:57
So when we go from high, back to low, we will change from dd to Q, so we will change the flip flops, Q state.
4:03
So we put the input to the output, and that means that at that moment we take in what is.
4:15
Coming in into the input line, so for example, we would read at each clock falling at the Sierra data here one zero zero one,
4:26
and that means that we can now put together a full bid, for example.
4:38
And of course, we can easily scale this up to any number of bits by putting more flip-flop side by side.
4:42
Two to power conversion.
4:49
So Fobbit means we have four flip-flops here, side by side, and we have the clock wired to each clock input of those flip flops,
4:52
hence it is a synchronous circuit we have here on the left hand side, the cerulean.
5:02
So this is where the data stream comes in. One zero zero one, for example.
5:08
And with each clock for an answer, if you remember, we move from D from the input and take it over to CU,
5:13
which then is the input for the next flip flops d input.
5:22
And what's the next four folding edge from the clock? We will move that into Q and and so on and so forth.
5:27
So we need to know how many bits will.
5:33
Sifting through this serial to pelo converter such that we know, for example, after four floating edges of the clock,
5:40
we're done and we moved in the data from material input line and can read
5:47
parallel out because we know that all four bits are now shifted to parallel or.
5:53
So let's look at our little example here.
6:01
Remember, we have the clock signal here and the falling attributable to these flip-flop takeovers from Input-Output,
6:04
and this will be our serial data that we'll be reading from the serial bus input put one zero zero one.
6:15
And this means that we have the first one year arrive on the input here.
6:24
What's the next clock falling edge? We will load this one into the flip flops queue output.
6:31
And the same time, the next zero here will arrive from our series of data here.
6:39
What's the next club falling? What will happen, of course, we will shift this further to the right,
6:46
so we have no one taken them from the input side here of this flip flop to the output to the Q output,
6:52
and the next zero will arrive from the input and next stock falling edge.
7:00
We shifted one further to the right here. And this one moves here to the third flip flops Q output virus from the Sierra Leone.
7:06
We have the final one here arrive and final falling edge,
7:16
and we have fully loaded one zero zero one into the parallel output ready to be read register.
7:22
So let's just do this quickly again and watch it move.
7:32
So one zero zero one arrives and we're shifting it clock falling out of the clock,
7:36
falling inch fully into the register such that now after four o'clock, 14 edges, we know that we're ready to read the data here.
7:43
And you can imagine that inside a computer, we have a much faster processing speeds than for this preparation of data,
7:55
so we often have two different clock signals. One inside the central processor and one for this data conversion here.
8:03
And at any moment in time when we're done reading the data, we can use this for parallel processing.
8:11
So again,
8:21
timing serial input notes that the length of time taken to load zero data will depend on the length of the shift register makes sense, right?
8:23
So you've seen four four bits we need at the four o'clock filing edges.
8:30
Of course, if you want to load from cereal to parallel eight bits, we will need eight falling edges.
8:36
So it will depend on the length of the shift register or in other words, how many bits do we want to load in?
8:42
In practise, it sets here. Data is loaded at a much slower rate than the processor clock, so you have a number of reasons for that.
8:50
One is, for example, an electromagnetic field issues and the external data bus with this data and might have its own issues there,
8:57
and hence a separate clock is used for the purpose synchronisation with the main
9:07
processor is achieved using other control lines that we are not looking to.
9:13
So we will just leave it there. But you know, we know how to do a serial to parallel conversion with TCU flip flops.
9:17
Now, what about the other way around? Parallel to serial conversion?
9:26
Well, it's pretty much very easy to say something more or less.
9:31
We load parallel, you know, onto the D-type flip flops.
9:35
So probably unloading from zero and we and our load onto each Flip-Flop D and put the parallel data and sieve the data out in California,
9:40
rather than shifting it from the input side into the register.
9:51
Meaning that we must somehow switch the inputs of a D Q flip flops if we want to have
9:56
one universal registered to do zero to parallel or parallel to serial conversion.
10:02
How does this look like first in a schematic representation?
10:10
The inputs to each flip flop are changed to change the function from parallel note to serial input output.
10:13
So we have one converter now and we have.
10:21
This choice here, whether we want to go serial in or parallel in to convert from Syria into parallel out or from parallel to Syria out,
10:28
this means that we still have, in our case, for the flip flops all fed by the same clock signals.
10:39
So it's all synchronous, everything like before. And you remember, this is what we had before we had cereal in two parallel and.
10:47
Now what we're doing here now is that we also give a parallel in option here to load immediately at the same time,
10:55
each input from each of those flip flops with the parallel bits.
11:04
But then we keep shifting like we did from left to right to shift to cereal out here.
11:10
So with this blue dashed line here, this would be our selector,
11:20
how to put these switches that we want to convert from zero into Poland or imagine we would pull these switches or down at the same time,
11:26
then we would read from in and move it to zero load.
11:35
As you can imagine, we will hardly have a manual switch there, but we will need Gates to to do this on a chip.
11:41
So the circuit of our choice as the old friend multiplex, sir, now just to recap the multiplex.
11:51
We have two input lines A and B in this case and this single sorry binary example to input lines to choose from.
11:59
So we have a control line that controls if you want to read from A or from B, and we simply do this with two end gates here.
12:10
And Control Line is once inverted, presented to the first and gate and once presented directly to the second and gate,
12:20
meaning that whatever the value of control zero one,
12:28
it will only through this gating here allow one of the two input signals A or B to pass through here now is only one of these two.
12:32
Here is pass through at this moment. What we need to collect both of these is an or gate at the end so that at the end we
12:42
have the output here following either the input line or following the input line B.
12:50
In our case control here it's zero. It means that the negated or inverted control signal here enables this and gate
12:58
sort of and allows a to be put through while at the same time as control to zero.
13:08
It will block B A will be forwarded and here it will pass through the old gate.
13:13
Whereas this year we'll say zero and will not put any interference here and the other way around.
13:19
Of course, if control equals one, it means that inverted it will be zero.
13:25
It will disable this line here and the B line and then at the output, we will follow B.
13:29
No, that we can put it together, it's a four bed shift register,
13:39
and we can now instead of having these schematic mechanical switches put on a nice multiplexes here,
13:44
one ahead of each of the flip flops and hands we have our.
13:52
Fully electronic circuit here for Syria to parallel or parallel to Syria conversion.
14:01
So what you can see here is our control line load shift, you know,
14:11
quite a load shift load because it would load from Sierra Leone or shift because it would,
14:17
after loading from parallel input shifted out here for the Sierra load.
14:22
So this is essentially our control line. And of course, the control line is connected to each of the multiplexes in the same way such that each
14:27
of the flip flops is either loading from parallel in or loading from from Syrian.
14:36
Yeah, so that's a forbidden shift register. You know, what else could we do with shifting?
14:46
We could multiply and divide by two. Why could we do that?
14:53
Because multiplying by two in binary arithmetic is equivalent to shifting the bits of a
14:57
number of a binary number one place to the left and then filling the bottom bit with a zero.
15:03
So once again, multiplying by two and binary is equivalent to shift one place to the left and then fill the button, which was a zero.
15:12
Imagine you have zero zero zero one so that it would be a one in decimal.
15:22
You would shift this one one digit in binary to the left, meaning it has no the position of the two.
15:26
And you would fill in from the button but with zero,
15:32
meaning that you have multiplied one by two and it is now two shifted one time more to the left in your imagination.
15:34
You would have it in the position of four and decimal and the set, but namely you would again fill in with zero,
15:42
meaning you would have to multiply it by two and you would get four. You can continue this, you would get eight, 16 and so on.
15:48
So I hope the principle is clear shift to the left means and binary multiply by two.
15:54
Now we can do this again with such a shift register shift register.
16:01
As you have seen, we have been shifting from zero in through to the register, and that's the same principle here.
16:04
Of course, we are shifting in such a register. And the same way around, if you would go to the right, of course, you would divide by two.
16:11
So you but you can be done by shifting to the right one space and discarding the bottom bit.
16:20
So basically. And we then have.
16:26
Multiply by two and divide by two. Now, think a little bit about it, problem breaker.
16:33
What possible errors can you get using shift left to multiply a number by two?
16:39
So you shift left, and at some point, of course, you would run out of your register, so it's sort of an overflow.
16:46
If the topics are not filled with zeros, but you're nearing the end of the register,
16:55
you would lose once thought of to speak and hands, you would have an overflow.
17:00
The other thing that could happen is that you're not taking care of signed representation.
17:06
And of course, you have to take care. If you have a sign in the top or most significant bit for months or plus,
17:14
then you have to handle that some of the same now when you use right to divide in no way to what well,
17:20
you put into the top it when you have to be careful, of course, if you're using a signed representation.
17:28
So we already put together a two function register with our control line and our multiplex that you select to
17:36
either convert serial to parallel or with the other controller line setting to convert parallel to serial.
17:43
Now we could think of adding some more functions and do also the arithmetic shifts.
17:51
So an example will be a four function shift register.
18:02
It will be a shift register with the following functions zero zero four hold,
18:06
meaning that you do not shift once you have the data on the register, you keep it there.
18:12
So just using it as a storage, let's say zero one.
18:15
So now we have four functions and we need to control lines and code are four different commands or selections here.
18:20
Zero one would be no shift to the right, so once a day doesn't register,
18:27
we would shift the data through to the right or in other words, as we just learnt.
18:31
Divide by two. That means on each clock filing each.
18:36
Of course, you would always keep shifting. So hold or shift, right?
18:41
With clock filing matches. Next one one zero for our control or select lines would respect here.
18:45
Shift left, so multiply by two on each following edge from the clock.
18:53
We would go left in one one parallel load.
18:58
So meaning that we can load data from the parallel input lines that we will be giving for this to do or to enable a parallel to zero conversion.
19:02
So. It was a four way multiplex that we can do this,
19:17
we can and give a shift register for functions using such a four-way multiplex and no to select the inputs to the D,
19:22
to the flip flops of GQ flip flops and designing a four way multiplex similar to the two way multiplex.
19:30
But we will do it in two stages to generalise the design process.
19:36
Now this is a very important thing that we will be revisiting from known very
19:42
frequently doing at the elegant way we will call this functional design approach.
19:45
So we could think of holistically aiming immediately at a four way multiplex approach.
19:50
Or we could think, how can we scale up, scale up from where to where your multiplex?
19:58
So. And this will will be gradually doing over the next lessons,
20:06
so binary to honorary converter or decoder has these two input lines that we will be using to encode or for different functions.
20:15
The input is a two bit binary number. The output is its honorary representation.
20:25
Of course, this is for a binary Two-Bit honouree two honorary converter.
20:31
Of course, you could think of longer string sequences, but the principle now is why is it binary to an area?
20:37
Because for any given input, only one output is non-zero, meaning that an unnatural representation gives you a string or only one of these outputs.
20:44
Here is. None, zero at any time.
20:56
So you're converting, for example, in a two to four binary tube to a four bit binary to convert to something where you immediately.
21:01
Zero two zero one two or three zero.
21:11
So this zero one zero one two or three, depending on which of the output lines, is different from zero, but only one at a time of the output.
21:14
Lines here use zero two. You three will be one at a time.
21:22
Now, how is this solved simply by presenting similarly like before each of these control lines once directly?
21:28
And once inverted. To the gates, to our end gates sort of enabling and this way round, we have the same effect, but beforehand.
21:39
We can now use the binary to honorary converter with our two select lines.
21:57
To choose which one of these input lines or these four input lines we put through or we follow on the output,
22:04
as you remember, the binary two honorary converter sets only one of these output lines you want at any time.
22:11
So the select inputs here are here in this block name to be for binary and here you
22:18
for honouring and converting the binary to bits here to the four honorary bits.
22:26
Then it's only one of these is one that any time we can use it to get our input lines, each input line here has its own end gate.
22:34
Was only one of these being one at a time,
22:45
it means that only one of these ABCDE input lines here to the end gates is being followed and just as before was
22:47
on multiplex ever using an augured to sort of collect them here as all others are disabled when one is enabled.
22:54
We will only follow this line here to the output. So that's a four way multiplex or putting together a binary two honorary converter
23:01
and the gating circuit to follow only one selected input lines at a time.
23:09
So now we will connect this up for.
23:19
The shift register, we can make it as long as we like, of course, again by adding as many GQ flip flops side by side as we need.
23:24
The clock and the selection blitz again are common to every state as a single printed circuit,
23:34
so each sticky flip-flop has the same clock and put here and each of the multiplexes is connected to the same to control lines,
23:39
select zero and one to select one of the four functions. If you remember, hold shift right, shift left or parallel load.
23:50
No important here is that we will now name these different flip-flops here because we can make this as long as we want
24:02
to stage I or a current stage I minus one and this is the one to the right of mine that's important to remember.
24:09
So the timeline minus one is to the right of Stage II and Stage II plus one, on the other hand side on the left side of Stage II.
24:17
So they're trying minus one on the right hand side of nine plus one on the left hand side.
24:24
Now we need to do the wiring up. We connect the individual stages as follows takes a moment to think about this.
24:31
If you remember, a year was zero zero, that was for hold and holding means that we want to have the output of the flip
24:38
flop here put back into its inputs to watch the next falling X here load again,
24:47
the output into the input and hence hold the bits in the register without shifting.
24:57
So again, this is your flip flop. This is our o'clock input.
25:04
And when the clock falling at your comes, we want to be sure that at the input of the C q flip flop,
25:07
we have the same information present as at the output to hold it.
25:12
Hence, we wound up with a which for the select zero and one zero zero case will be put forward to the output and hence it will hold the information.
25:16
Now, B I here was the case of shift, right?
25:28
So we need to wire this up to 2Q of the stage i +1.
25:34
Let's go one slide back and remind ourselves that I +1 was to the left of the Stage II.
25:39
So if we feed this cue here into the multiplex and the B and trigger, this means that we will have this as input and on the next clock falling edge.
25:48
This cue here will become the same value as this one was before, meaning that we actually do shift as we want to to the right.
26:00
Now, obviously, if you want to shift to the left, we have to choose the C input here accordingly from this.
26:08
Flip-Flops Sausage Iman is one flip-flop into the sea and put such that we shift to the left,
26:19
so let's look it up and see I, we will connect to cue off stage.
26:24
I'm on this one. And finally, if you remember, we wanted to have four select lines being one one parallel note.
26:29
So to the input line of our multiplex a year, we connect parallel in AI such that we can load parallel AI into a flip flop on the next floor.
26:37
Look for edge. So that's our four way.
26:50
Shift register and we can shift left, right, hold or load power,
26:57
and hence we can do divisions by two multiplications by to convert zero two parallel parallel to zero.
27:01
Now the rest of the time, we will also look a little bit into clock dividers.
27:08
No clock dividers are important if you need to measure by the clock.
27:13
For example, if you have a quartz giving those to a higher frequency clock signal,
27:20
or if you need to have different clock speeds in the same circuit and clock dividers are an interesting use of registers.
27:23
Hence, we're looking in to this now as we're talking about registers. Let's start with some easy case.
27:31
Let's say we want to halve the clock frequency so we do a synchronous divide by two,
27:38
and all we need for that for each section is divide by two as a single data flip-flop.
27:44
How does that work? We connect the inverted output to the input.
27:51
So on cue, it's our output signal here that provides us half the clock speed.
27:59
And the trick is that we connect the inverted output of Q Prime to video and flop the input of the Q flip flop.
28:06
And now let's look at the clock signal here in relation to the Q output here.
28:16
This is the clock signal here and at each falling, it's here.
28:20
So these are the falling objects here, the three falling edges we can see Q will become.
28:25
What is taken over from the body is wired up to inverted Q, So in other words, at each clock, falling askew will change its state.
28:34
And if at each of the following edges of the clock signal it changes, it state it means that it is half the speed.
28:46
As you can see in this small diagram, you. And half speed, sorry of the frequency or twice the fundamental period length.
28:54
No, having is nice, but what if you need something else than just halving, we could divide by an integer,
29:05
for example, remember our counting up to five circuit and two lectures a go.
29:11
So asynchronous divide by any integer can be easily designed using our methodology that we have learnt to come up.
29:17
For example, divide by seven can be done with the finite state machine opposite counting up from zero to six.
29:25
And what we do is that we distribute the outputs here as zeros consecutively or as ones.
29:33
Hence, we will have four states long zero three states at once.
29:41
And hence we divide the clock speed by the integer of seven.
29:46
What is important here is that we do not need to have the same amount of states having zero or one
29:50
because this will still give us a division by seven and will still have its rising and falling edges.
29:57
So we can use four zeros here, followed by three ones, so we could have used three zeros here, followed by four ones.
30:03
So in other words,
30:12
we're using our accounting up's finite state machine Typekit that we have learnt or some kind of circuit for counting up to divide the clock speed.
30:13
No, looking at clocks as an example, like digital watches have them, and believe me,
30:24
they were very, very en vogue in my very early childhood days when they came to the market.
30:29
You had to have one of these digital clocks and in practise we managed to divide by much larger numbers than seven or two.
30:34
So consider such a wristwatch pop in the 80s.
30:43
And so of course, in the market, a regulating crystal produces a steady waveform of one megahertz, meaning one million falling edges per second.
30:46
And what stepper motor, if you use, is, for example, to move analogue on?
30:59
Pointer requires one players per second to drive it, so we need to divide by one million and not by two or by seven.
31:06
We could use a synchronous circuit to divide by one million, but it would require a synchronous count towards one million seats.
31:15
Now, one million states would require us to queue flip flops because two to the 20th would be sufficient to do that.
31:23
But as you might imagine, this is difficult to design, and so clock dividing is often done in stages.
31:31
Now that's looking to clock division in stages. And an example we divide by 256, and we do this by dividing by 16 at first.
31:38
And we can do this synchronously was a counting up from zero to 15 like we have seen for the division by seven case.
31:48
And then we cascade and this is really what we will be seeing in our functional
31:55
design approach more and more cascading or reusing building blocks to scale up.
31:59
So we cascade to dividers and that gives us the divide by a 256.
32:06
In other words, we use clock in the original clock signal to divide by 16,
32:11
and the output of that is fed into the same divide by 16 counting known as a clock in.
32:18
And the clock out of that is the original clock signal divided by 256 with respect to its frequency.
32:27
This is a synchronous circuit overall. Think about it.
32:36
Well, it's not, of course, because the two different building blocks here are fed with two different clock signals here.
32:41
The first one here is fed by the original clock. The second one here is set by the original one, divided by 16 with respect to its frequency.
32:49
So this is not synchronous any longer. Now, let's look also at the famous Ripple through counter.
32:57
It's a delightfully simple counter and can be arbitrarily large.
33:06
But again, it's not synchronous like the previous one.
33:10
So rather than dividing by 16 here, we're simply using a single flip flop again, as the beginning of all this clock division, if you remember.
33:12
And we use again the cue inverted output here to be fed into DX and have this as clock input.
33:21
You remember that here for QR out, we would have half the clock speed.
33:28
Well, not half of the frequency. Hence, we can use the same principle and use this as input to the next.
33:32
Similarly, wired up dick, your flip flop and its output huger would, of course,
33:43
be the force of the original clock frequency and uses as an input here and Hans, this would be an eighth of the original one.
33:49
Again, not synchronous, of course, because each of these flip flops does not have the original same clock signal.
33:58
But each of these digital flip flops has a different clock similar.
34:04
Now, using a counter to divide by any number is what we will look at lost in this lecture.
34:11
Suppose that we wish to divide a clock by a number, which is not a power of two.
34:17
Of course, again, we could have been doing this was a counter to the next higher power of two.
34:22
So the next higher power of two that is above the number we want to divide by.
34:30
And let's assume we do a simple thing.
34:34
We divide by five refers to sign a contract and cutting up to eight because eight is the next higher power of two or five.
34:36
If you would use only owning up to four, of course you couldn't do five.
34:45
And there's no need to count up to 16 in terms of power of two. So we just use the next Typekit of two from our target number.
34:51
Now, recall also that when we design flip flops in the first place, we included a clear input.
34:59
Now the clear input to the Flip-Flop was not depicted in our lost circuits, but usually they would have such a clear line input line.
35:05
And if such to High State, it would set the output of the Flip-Flop to zero.
35:13
So the cue of the flip flop would be zero, hence the name here.
35:19
Or if you want to, you could call it maybe something like we said.
35:23
So for example, we can let a circuit count zero one, two, three or four, and it would otherwise cone up further to eight,
35:26
which is seven in this case, because we started from zero, but it was our eighth straight counter.
35:35
But as soon as we detect five on the output, we reset all the Curaleaf's to zero and hence would start over after counting up to five.
35:39
Or better said we would count up to four. And then when we detect five immediately go to zero, so we would count up four or five steps.
35:51
And how do we do that? So how do we detect that we counted up to five?
36:00
Well, it's pretty simple, actually. We just use a little gating here.
36:04
So we're having the cue output lines here.
36:11
Fed into an end gate.
36:15
And depending on which number we want to sort of spot on the output, we need inverters to realise this number as we want to count up to five.
36:18
We need not inverted, inverted, not inverted to spot a one zero one, which of course, is equivalent to five and decimal.
36:28
And this circuitry here, the blue circuitry will spot a five at first and then.
36:40
Will reset all these Typekit flip flops. So using euro ripples through counter and then spot an arbitrary number.
36:50
Business logic here and you see it reset or clear input of the GQ flip flops to start counting from from zero again.
37:00
And hence we only account zero one two three or four zero one two three four and so on and so forth.
37:10
Now was that I hope you enjoyed this lectures and at this lecture and everybody all excited about the next one.
37:16
Thank you very much.
37:24