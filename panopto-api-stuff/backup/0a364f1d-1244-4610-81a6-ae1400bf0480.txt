ID: 0a364f1d-1244-4610-81a6-ae1400bf0480
Title: K2J - 6 : Control Flow
Category: KotlinToJava
Lecturer: Robert Chatley
Date: 05/01/2022
In this section, we're going to work through building a simple noughts and crosses or a Tic TAC toe game in Japan.
0:05
And this will help us to demonstrate some of that control flow mechanisms that we have in the language,
0:12
as well as to allow us to have some examples working with arrays.
0:17
So let's get started by making a Tic TAC tongue course because we want to be able to start the game.
0:22
Let's right our main method of use the intelligent shortcut just to generate a skeleton for the main method.
0:32
And then the thing that I want to do inside the main method is basically to create some objects and start the game off,
0:40
so let's make an object of class tic tac toe. And then once I've done that, I want to just call a method on it called play.
0:46
Now this method doesn't exist yet, so let's create it. Here's a voyage method because we don't need it to return anything.
0:57
It's called play. And for the moment, it doesn't do anything.
1:05
Now, let's think about the state that we would want to hold inside the Tic-Tac-Toe class,
1:12
and this is where we want to hold the representation of the board, which as we know is a three by three grid.
1:18
So I think the most natural approach to doing that is to use a three by three two dimensional array,
1:25
and so that allows us to specify something like this. We use characters for simplicity just to hold each square.
1:33
So we could say we have a private final char array in two dimensions, which is called board.
1:41
Now we have a compilation error here, because this isn't initialised, and so we'll define a constructor to initialise the board.
1:54
So when we initialise an array in Java, what we do is to say that it equals a new char array, but we need to give a size for each of the dimensions.
2:09
And in fact, what we're doing here is to say that this is an array of arrays of characters.
2:20
So we're going to have three rows and within each of those rows, we're going to have three columns.
2:26
So we'll say three and three. That's going to create us three by three structure,
2:31
but it's not going to initialise any of the elements of the array in order for it to be fully initialised.
2:39
We should go through the array and initialise each of the cells. Given that the initial state of the board is that it's empty, no one has played.
2:44
Let's go through and initialise each of the cells with just a space character so that perhaps when we draw the board, it will show as empty.
2:53
So to do that with these two nested loops, we use a loop to iterate over the rows and another loop inside it to iterate over the columns.
3:02
So here we'll use a follow up and I use a starter for loop that we haven't seen yet.
3:11
This is what we might call a see style fully when we're actually going to declare a variable for a countdown that starts to zero.
3:16
Then we're going to continue this loop while I is less than three.
3:25
And for each iteration of the loop, we're going to increment I by one, so we're going to count three,
3:30
zero, one and two and we're going to stop before we have I equals three.
3:34
So this is the condition for continuing with the loop. So that allows us to go over the roads.
3:40
But what about the columns also inside, let's have another deep in a similar style.
3:49
In this case, I use J as a index variable.
3:54
We're going to say China is less than three and incorrect J.
3:59
So that we can address each row and each column. So now we've got an eye and a j.
4:06
We can say that food. I J.
4:12
It's just equal to a space character. And that should fill in each of the elements of the board.
4:18
So now that we've initialised that maybe we want to start off by printing the board on the screen.
4:24
So let's see. Let's make a method. Display board. And all that's going to do is to print the representation of the board to system out.
4:30
So let's make a quarter system out print line and just pass this.
4:45
And what that's going to do is therefore call the two string method on the Tic TAC toe object.
4:51
Get back the string representation and print that to the console.
4:56
So the thing we're missing is to string in order to define a nice string representation of the board.
5:01
So let's do that now. And as we've done lots of times before.
5:07
Let's use a string belt out. So that we can gradually build up this strength.
5:15
So in a similar way to that that we used when we initialise the board,
5:29
we want to iterate through each of the rows and each of the columns and just build up a string depending on the contents of that cell.
5:34
So I'll actually copy the leaps to be used above and go through for each eye, for the rows,
5:41
for each chain, for the columns SB Append and let's append first of all, a square brackets.
5:50
And then. The contents of the satellite IJA.
6:00
And then another square brackets. And then once we've iterated through the whole of J, we've completed the line, then let's add a new line.
6:08
Let's see how that looks. When we run the programme. OK, so we get an empty board and then the programme finishes.
6:27
So that's a good starting point. Now we'd like to be able to ask the players where they want to play and to place a
6:43
particular token Aether and nought to across into the board at the relevant location.
6:54
So let's update our play method and let's say they want to make a move and then maybe will display the board again once we've made our move.
7:00
So then let's define the function. Make a move.
7:10
That's avoid function doesn't need to return anything, and what we want to do here is to get input from the user.
7:17
So let's print something to the console to say, where do you want to play?
7:25
And then let's use the system input stream to get input from the user and use that to fill in the board.
7:34
So a useful cost that we saw before was scanner. So let's make a scanner and passing the input stream system dot in.
7:41
And then once I've got a scanner, what I can do is to pull from it the next integer and the next integer again and will have X and Y.
8:00
Then once we've got this, we can set boot and then we have pros and then columns, so let's have why and then X,
8:20
so that's getting the way through and then the X element of narrowed and set that to be we need something for the current plan.
8:32
So let's set that and the current plan needs to be a field because we need to maintain that state and change plans with each turn.
8:42
So let's have a private channel current plan, and let's set that off to be X to start with.
8:51
OK, let's see if that works. OK, so now we have an empty board, and if we want to play act to one, then we get an X in column two in row one.
9:02
Remember that we start indexing from zero. So the third row is row to the first row.
9:23
Eric. So that looks pretty good, but we need to do now is to introduce a loop so that we can keep playing until the game ends.
9:29
So let's update our playing methods and let's use a different type of loop now using while loop,
9:41
which we've already seen in codling and in Java, the loop is exactly the same as it is in Kopplin.
9:49
So we have, while some condition, do these statements.
9:54
So let's have a condition that says while the game continues.
10:03
Make a move. Display the board and then maybe switch players.
10:11
So we have a couple of methods we need to define here. Let's define Switch players.
10:21
So this is the Hoyt method because we're just doing something, we're not returning anything.
10:32
So Switch Players says that if the current plan is X, then the current player is assigned the value or not.
10:36
Else, the current plan is a sign the value of X, so that should allow us to switch between noughts and crosses come back again.
10:53
One thing we can't do in Java, which we could do in Scotland, could be to treat the IF as an expression and to say, for example,
11:05
current player equals, if this, this might be the way you might write it in Scotland, but in Java, if it's a statement and it's not an expression.
11:12
So if it doesn't return a value, therefore we can't do this, but we can write a switch expression, which is like a win.
11:27
And so we could try doing that instead to see whether that works. So we can say switch on the current plan.
11:35
And in the case that it's X, then we'll return.
11:43
Oh. And otherwise, which would do if the Congress defaults Roberts in X, so that's a different way that we could do it,
11:50
maybe with a simple expression like this, we might stick with an F. But it's quite nice to be able to do this as an expression.
12:03
And so in this case, maybe the switch expression is nice. For now, let's stick with this passion.
12:09
So now the only other thing I need to do is define game continues.
12:17
So this is a Boolean method which is going to return true if the game should continue and false if we've come to the point where we should stop.
12:20
So either we've run out of spaces to play or someone's won.
12:27
So let's define that here. So this is a Boolean methods. And let's, first of all, just concentrate on whether there's a space to play.
12:35
We'll say that the game continues if there are spaces available.
12:47
Panel to find this as a separate methods, and we'll see how this goes together in a minute.
12:56
So to find out whether there's is a space to play on the board again, let's iterate through all the sales.
13:05
So we'll use our two nested full lips again, can I, I and J, and then we can say that if it's the case that the cell at I.
13:15
J. Is empty because it just has a space character in it, then that means there are some spaces so he can return true.
13:24
As soon as we find a space, we don't have to check all of the cells. As long as there's at least one space that we can return, true.
13:37
Then at the end of this, we finished looking through the whole line and then the end of this loop,
13:44
we've looked through all of the rows and we've gone through all of that and we haven't found an empty cell.
13:49
Then we contend false to say there are no more cells available. So let's just check that.
13:55
OK, so we got to the end of the game and we exited because there were no more spaces to play.
14:19
The other case, of course, is that someone creates a winning line and then we should stop the game and congratulate the winner.
14:26
So let's have a look at that. Other condition for the game continuing is that there's no winning line and spaces are available.
14:34
So let's define winning line again, this is a brilliant method, it says, is it true that there's a winning line,
14:49
either a horizontal line, three in a row in a column or in one of the diagonals?
14:57
So let's actually write it like that.
15:03
So we'll say there's a winning line if there is a winning row or there's a winning column or there is a winning diagonal.
15:05
So by writing it this way, by calling these functions that don't exist yet,
15:23
I can define expressively what it is that I want and what the rules and then define the smaller functions in order to compete,
15:26
whether or not each of these things is true. So let's start with winning road.
15:34
So for a winning run,
15:45
we're going to iterate through each of the rows and check whether all of the cells did not contain the current players character,
15:46
so we only need one to do this because we've only got three cells to check.
16:01
So probably the simplest way to do this is to say.
16:05
If the board wrote I column zero is the current plan, and that's true for the other two columns as well.
16:11
They may have a winning row. And if we get through all of the rows and none of them are winning, then we can return false.
16:39
We can do something very similar for columns. In fact, I'll just duplicate this method, I say columns.
16:48
And we just have to change around these numbers. So this case, this is zero I.
16:58
One eye and two I.
17:07
And now we just have to do the diagonals, so that's a winning diagonal, if board zero zero one one and two two all belong to the current plan.
17:18
Goal the same thing, but for two, zero, one one and zero two.
17:55
And let's just put some brackets in just to make this clear.
18:13
So hopefully that gives us a winning condition. So the game should stop if we have a winning line.
18:25
So the last thing we need to do really is to print the results. So let's create this as a method.
18:32
And this is going to say, if there's a winning line, then we should congratulate the current plan.
18:48
So let's say. And if there's no red line, then we'll say that the game is true.
18:56
Now, there's just one problem here, and that is that, you know, gambling after we make a move and display the board,
19:24
then we switch players before checking whether or not the game continues.
19:31
So actually, this current plan will be the wrong player if we get to this point because we would have switched players before displaying the results.
19:35
So one thing we could do to fix that is just to move the switch player up to the beginning.
19:45
There might be other ways to solve this problem, but I think that makes it work.
19:52
One of the things we could do just to make things a little bit nicer is when we get the inputs.
19:56
We could say. Something like this.
20:05
OK, let's run it and see. So first, where we can start off.
20:16
So that seems to work, OK, we've got a complete game that we can play through. There are obviously some things we could tighten up.
20:45
One thing we don't do at the moment is to check whether the coordinates that is given by the players is actually on the board,
20:52
so it would be possible to input five seven. And that would cause this to access a space that doesn't exist and that causes an exception and a crash.
20:58
So we might not one that we've tried to access some parts of the array that's out of bounds because it's only a three by three array.
21:10
Perhaps what would be good would be to check the input that the user is given,
21:19
and if it's not on the board, then to ask the players to try again and make another choice.
21:23