ID: c8d31244-be14-4f24-8c63-adf800cab0ad
Title: idb-topic-04-ra-equivalences
Category: COMP40007 - Introduction to Databases (Autumn 2021-2022)
Lecturer: Peter McBrien
Date: 08/12/2021
In this topic, we look at how different relational algebra queries can be regarded as exactly equivalent to each other.
0:01
There are a large number of rules, but they are mostly very common sense, which, once you understand them,
0:11
should be intuitive to use and apply when you are manipulating relation algebra expressions.
0:17
The first one sticks if I am doing two projections on a relation, it's only going to be the outer projection has any impact on the end result.
0:24
Therefore, you can eliminate the inner of the two projections.
0:35
So for example, if I projected in the first project number and see nine from the account relation and then on the outside projected number,
0:40
there's no point in doing the inner projection number and see name from the account relation.
0:49
If I'm doing a projection and a selection on the table, then I can swap the ordering of the two because it doesn't matter whether I do the selections.
0:55
The rows first, followed by the selection of the columns or selecting the columns first, followed by the selection of the rows.
1:03
So both of these there's a certain necessity to maintain the fact that you've got a well-formed formula.
1:11
So, for example, it wouldn't be well-formed formula to project sea name from their count table
1:18
and then outside it to project the number from the result of the inner query.
1:24
And hence, we have this rule here that the vector of attributes used on the outer project must be a subset of those used in the inner project.
1:30
And similarly, to move a selection outside the projection, one needs to know that the attributes being selected are present in what's been projected.
1:40
Looking at doing a product over Cartesian products, then it's naturally possible to project the attributes from their respective relations first,
1:53
so you can project the attributes that come from are performed in the product and protect the attributes that come from this before doing the project.
2:02
If you have a union of two relations and remember for this to work, you must have the same columns in R and S.
2:10
Then it doesn't matter if you use the projection of columns before you do the union or after that you're in the unions.
2:17
On the right hand side, we projecting the attributes and R and S before in the union,
2:23
and I can take you equal to the projection of the attributes aft in the union.
2:29
Finally, a non equivalence is whether you do the projection before or after a difference.
2:35
If you project the columns after doing the difference,
2:40
then in general you can get more rows in your result than if you do the projection before you do the difference.
2:44
And therefore you cannot rewrite the query into the current one by pushing the projection inside a difference.
2:50
And there are similar set of rules for select, the first one is simply the rule from the previous slide repeated in the opposite order.
2:59
If I have to select been done on a relation,
3:10
then it's possible to combine them into a single select where I do both of the predicates within and to join them together.
3:13
If I'm doing the selection over a Cartesian product and if the attributes belong to one of the relations as these as inputs to partition product,
3:21
then I'm able to rewrite it to do the selection on that relation.
3:33
Before the Cartesian product is undoing selection on the output of a union,
3:38
then I could equal to the selection on the input to the union before in union.
3:46
And if I've got a difference, the selecting of the difference between our ancestors equivalent, of course,
3:52
to first of all in the selection on are before taking away the votes in this because both the select and the selecting to take a white rose from.
3:57
Let's try out a quiz question on this. The question is which one of the four options is not exactly equivalent to the other three.
4:10
And previously won, the most popular answer was C, indeed, that is the correct answer.
4:25
First of all, if we look at B, the inner project's number,
4:31
type and C name is redundant because of the outer projection of number and so it can be eliminated,
4:35
leaving me with a query that's exactly equivalent to a four d I can combine together.
4:41
The two selects into saying select type equals current and type does not equal to positive.
4:48
Of course, that is obviously equivalent to saying select type. You can't get anything matching that.
4:54
Of course not be a deposit account, but C is not equivalent to the other three.
5:00
It may at the moment, 14 return the same result as the other phrase, simply because there are only current or deposit accounts in the bank database.
5:07
Example I've given you but aren't a business type account.
5:16
And of course, then C would be returning anything that isn't a deposit account.
5:20
Type of current and business accounts was a B and D only return current accounts.
5:24
I'm not going to be covering anything about query optimisation in this course,
5:33
that's something for a later course in the third year available to you called advanced databases,
5:38
but nonetheless query array query query equivalencies are very useful for the process of performing query optimisation,
5:43
and it's good to have an intuitive understanding of that.
5:51
So these fall queries are all according to each other, and the question is which one of them makes the Cartesian product.
5:56
Operator have to handle fewer tuples and therefore make the join operation that's going on in each of these examples more efficient to execute.
6:03
And the answer is indeed a.
6:18
And the reason why that is, is because both the left and the right input to the Cartesian product on being reduced in size by the select statement.
6:22
And indeed, it's a standard process.
6:32
In that query, optimisation to push all selects inside a joint strike Cartesian operator to make the query more efficient.
6:34
Turning to the binary operators, the sets of equivalence is listed here,
6:46
who apply the first half of Cartesian product, you can push it inside a union and defence.
6:52
I, if I'm doing a relation, are Cartesian product with a union.
6:58
I could, first of all, Cartesian product, all with S and are with Ti before doing the union, saying for the difference,
7:03
if I've got a union with a Cartesian product or difference, there's no way I can push it inside.
7:11
So these are non equivalencies which you should not apply. And if you've got a difference, you cannot be pushing that inside a Cartesian product.
7:17
But you can regard the difference between R and Estudiante as being taken away the S and then taken away you because of course,
7:27
s union to give me anything that's in either S or T.
7:37
And therefore I could take away each one of these. So subsequently, to get an equivalent relation.
7:43
I haven't dealt with equivalencies between Cartesian products and themselves associative.
7:52
But let me set that as a problem for you to work out.
7:59
And indeed, B is the correct answer is what has been the most popular answer for all of a C and D,
8:11
the order in which you two intersections, unions or Cartesian products does not matter.
8:19
But here is very important which order you do the difference because on the right hand side, I'm taking away things that appear in T.
8:24
S before I can take those lessons away from all and therefore say if I have a value one in S and the value one in T,
8:32
the difference between those two will be the empty set and then I b take nothing away from them.
8:41
Whereas if I do it in the order on left hand side or be taking away the value of one and then taking that value one way again,
8:47
of course, one would then be eliminated from the set up if it was present that.
8:54
You have enough information now to do the network next worksheet on equivalencies between R.A. expressions.
9:02