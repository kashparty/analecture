ID: 2c836adf-7963-4830-a41c-ae2d0148fd16
Title: 7.5 Heapsort
Category: COMP40008 - Graphs and Algorithms (Spring 2021-2022)
Lecturer: Iain Phillips
Date: 28/02/2021
So let's discuss Heap's sort of our final sorting algorithm.
0:01
First of all, we need to know what a heap is. So a heap structure is a left complete binary tree and left complete means that
0:07
all the nodes are present at all the depths except for possibly the last level.
0:19
So if the tree has depth D, then all the nodes are present at zero up to D minus one and adopt D.
0:24
Then we have felled the tree up from the left. So no node is missing to the left of a node which is present.
0:32
So here we have an example of a heap structure.
0:39
And you can see that it's a full binary tree except for the last level where we've actually got two missing nodes here below the eight.
0:43
And we'll call the rightmost node at depth D, the last node.
0:52
So two, here is the last node here in the heap structure.
0:56
So this is not a heap yet. This is a heap structure. OK, so we have two kinds of heap's, which are men, Heap's and Max Heap's.
1:01
Let's talk about Men Heap's first. So we'll define a tree to be a minimising partial order tree.
1:11
If the key at any node is less than or equal to the keys at each child node.
1:18
If there is any child node. So and a min heap is a heap structure with the min partial order tree property.
1:23
So we have the heap's we men heap. We have the heat structure as in this diagram.
1:33
But we also have this property that if you take a look at the key at any node,
1:40
then you can see that it's Lessner equal to the keys at the child nodes.
1:46
So here with seven is less than equal to 16 and nine and two is less than four and less than eight, etc.
1:51
So a very nice property of men, Heap's or indeed Max Heap's, is that if you take any if you in a heap,
2:01
if you take the left and right some trees below any node, then they are also heap.
2:10
So if we just consider the some tree with root while at one here, then this is actually a mean heap as well.
2:15
So is this one here. And so are all the heap's that you can get by just looking at the tree below any given node in the heap.
2:24
Well, it's pretty obvious what a maxi will be. We'll say that a tree is a maximising partial order tree.
2:38
If the key at any node is Gracemere, equal to the keys at each child node.
2:44
So and a maxi is just a heap structure.
2:49
So we've got this property that it's a fall tree, except for possibly the last level which is filled up from the left.
2:53
And it's got this max partial order tree property. So we can see that, for instance, 12 is bigger than nine and bigger than five, etc.
3:01
Well, now we can give the scheme for Heap's or what we need to fill in the details later.
3:11
But let's see what how he sort works in outline.
3:20
So we've got an array of elements, and the first stage is to build the max heap out of those elements.
3:24
And so we don't know quite how to do that. But let's just imagine that we can do that.
3:33
So let's have a diagram. So we've got our array on the top here.
3:40
Here are elements unsorted. And then the first thing we want to do is to build our heat out of that,
3:49
so just sort of draw that as a kind of triangle like that with the last level possibly not completed.
3:59
So here is the last element. In that position there.
4:07
And here is the root of the heap. OK, so.
4:12
And now so in the heap sort scheme, what we once we've built a max heat here, which is what this is.
4:18
Okay. Then obviously, if we're looking for the greatest element and the heat, then it must be at the root here.
4:25
So here is the root, which is the max element.
4:32
So the next thing we do is to build just create an empty array of the appropriate dimensions here.
4:36
And then we're going to fill this in from the right. So at the moment, it's empty.
4:46
And what we're going to do is to take the root, which is the max element, and move that into.
4:50
The top the last position in this array here. So that is obviously the greatest element.
4:58
So now this is the sorted array we're building here and we're building it from the top and moving leftwards, obviously, as we go.
5:04
So we'll just sort of fill it in from the right. Well, okay, so we've taken the route out from the heat.
5:13
So now we've damaged our heap here. It doesn't have a maximum element.
5:20
So what we need to do is to repair the heat. So that's what the delete max scheme does.
5:25
So they get Max just gets the maximum element and copies it into the array and the delete max one, actually.
5:31
Basically, we'll take the last element and move it into the root position.
5:42
So the routers disappear and the previous route. So let's move that last one up into position at the top of the heap.
5:48
Okay. Well, that's good in that we've repaired the heap structure here.
5:57
And obviously we've got one fewer element in the heap because we've removed the last one.
6:04
But we have got the full binary tree, except for possibly the last level, which is filled up from the left, because we remove the last element.
6:10
We've kept the EEB structure property. But what we don't have is the max heap, the maximising partial order property.
6:16
So we need to restore that. And that's what our fixed max heap routine will do.
6:25
So if the fixed max max heap property will basically reorder the heap so that it has the desired property,
6:31
that every node is great and recall the keys are great and are equal to the keys of the child nodes.
6:42
And then of course, once we've done that, then we will have the new maximum element up at the top of the heap again.
6:49
And so then week we're in the position to start the process all over again.
6:56
So this new one here can be moved into position to second from the top in the sorted heap.
7:01
We remove it from the heap and then move the new last one into position again so that one can go to the top here again.
7:10
And then we restore the maxi property using the fixed max heap routine.
7:21
So that's the basic idea. We take the unsorted array.
7:27
We we turn it into a max heap and then we successively remove the top element in the max heap and put it in,
7:31
filling up the sorted array from the right. And restoring the max he property each time.
7:39